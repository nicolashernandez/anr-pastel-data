<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Trans SYSTEM "trans-14.dtd">
<Trans audio_filename="20140911" version="3" version_date="170602">
<Speakers>
<Speaker id="spk1" name="Locuteur 1" type="male" dialect="native" accent="" scope="global"/>
</Speakers>
<Episode>
<Section type="report" startTime="0" endTime="3881.308">
<Turn startTime="0.0" speaker="spk1" endTime="3218.019" mode="planned" fidelity="high" channel="studio">
<Sync time="0.0"/>
dans cette première partie euh je vais vous présenter pourquoi on va apprendre l'informatique, pourquoi pour vous c'est important d'apprendre l'informatique puisque vous n'allez pas tous faire de l'informatique
<Sync time="11.949"/>
euh vous ne serez pas tous étudiants en informatique.
<Sync time="12.697"/>
par contre c'est important pour tout le monde de l'apprendre.
<Sync time="17.668"/>
voilà
<Sync time="18.948"/>
donc
<Sync time="20.387"/>
pourquoi étudier l'informatique ? bon bah alors il y en a une partie d'entre vous qui étudient l'informatique pour devenir informaticiens.
<Sync time="28.163"/>
et ça c'est bien qu'il y en ait qui décident de devenir informaticiens parce qu'il y a une très forte demande
<Sync time="33.860"/>
dans l'industrie
<Sync time="35.045"/>
dans le public et dans le privé d'ailleurs
<Sync time="37.274"/>
euh de de d'informaticiens euh et c'est une demande qui augmente. donc euh qu'est-ce qu'on dit ? on dit qu'il y a
<Sync time="44.197"/>
environ quarante mille
<Sync time="45.649"/>
emplois d'informaticiens qui sont non pourvus chaque année.
<Sync time="48.633"/>
donc s'il y en avait quarante mille de plus
<Sync time="51.26"/>
ces quarante mille auraient un travail.
<Sync time="53.202"/>
voilà ce qu'on peut ce qu'on peut en dire.
<Sync time="54.694"/>
euh c'est c'est un chiffre qui augmente hein tous les ans.
<Sync time="58.891"/>
donc ça c'est une première raison, mais c'est pas la seule.
<Sync time="61.982"/>
pourquoi on étudie l'informatique ?
<Sync time="63.806"/>
ben parce que quel que soit l'emploi que vous 
<Event desc="pi" type="pronounce" extent="instantaneous"/>
 que vous z() euh occuperez plus tard
<Sync time="70.341"/>
ce sera probablement un emploi de de cadre vous êtes à l'université pour faire des études
<Sync time="74.801"/>
et devenir plutôt cadres
<Sync time="76.666"/>
dans les entreprises
<Sync time="78.620"/>
donc euh techniciens supérieurs ou cadres et dans ces cas-là ben faut savoir maîtriser l'outil.
<Sync time="84.215"/>
donc pourquoi ? parce que euh on parle
<Sync time="87.787"/>
d'un monde numérique, d'un univers numérique
<Sync time="90.1"/>
de plus en plus et que euh ne pas maîtriser cet outil
<Sync time="94.160"/>
l'outil informatique pour euh comprendre le monde numérique
<Sync time="98.255"/>
c'est un problème, c'est un souci
<Sync time="99.65"/>
dans le monde moderne.
<Sync time="101.063"/>
voilà donc le l'idée c'est de
<Sync time="103.044"/>
le petit terme c'est que il faut rester dans le coup quoi pour euh
<Sync time="106.320"/>
pour s'en sortir aujourd'hui.
<Sync time="108.861"/>
et puis euh vous vous êtes des MIPC
<Sync time="111.564"/>
donc euh mathématiciens physique
<Sync time="114.134"/>
informatique chimie
<Sync time="116.369"/>
donc si on enlève le i
<Sync time="118.824"/>
en quoi euh vous avez besoin de vous former en en informatique ? bon ben tout simplement parce que
<Sync time="124.782"/>
tout ce que vous aurez à manipuler plus tard
<Sync time="128.592"/>
en physique, en mathématiques, ce seront des nombres
<Sync time="131.225"/>
et comment vous les manipulerez ? ben vous allez les manipuler en écrivant des programmes qui traitent ces données.
<Sync time="135.834"/>
voilà donc c'est important
<Sync time="137.247"/>
pour comprendre le monde moderne d'étudier l'informatique.
<Sync time="143.260"/>
alors euh j'ai dit c'est bien d'étudier l'informatique mais j'ai toujours pas défini ce que c'était que l'informatique.
<Sync time="148.176"/>
donc l'informatique c'est euh
<Sync time="150.0"/>
la science des données.
<Sync time="153.157"/>
donc j'ai pris j'ai repris la définition de wikipédia
<Sync time="155.801"/>
je vais vous la lire
<Sync time="157.049"/>
je la connais pas par coeur ; donc l'informatique c'est le domaine d'activités scientifiques, techniques et industrielles
<Sync time="163.580"/>
concernant le traitement automatique de l'information
<Sync time="167.106"/>
par des machines.
<Sync time="168.496"/>
bon alors les machines sont diverses :
<Sync time="171.426"/>
la machine à laquelle on pense c'est l'ordinateur, mais c'est plus tout à fait ça maintenant.
<Sync time="174.924"/>
la machine à laquelle on peut penser actuellement c'est un téléphone
<Sync time="178.311"/>
qui va traiter une information. donc on () le téléphone c'est un système embarqué,
<Sync time="182.072"/>
il y a des consoles de jeux qui sont des ordinateurs hein finalement maintenant
<Sync time="185.784"/>
il y a des robots, des automates
<Sync time="188.379"/>
le robot qui passe l'aspirateur tout seul ça c'est s() s() c'est plus euh de la science-fiction hein.
<Sync time="194.180"/>
euh ça se trouve à deux cents ou trois cents euros
<Sync time="197.088"/>
voilà. donc c'est la science de l'information.
<Sync time="201.815"/>
euh qu'est-ce que c'est que l'information ?
<Sync time="203.806"/>
bah là
<Sync time="204.399"/>
on n'a pas de définition.
<Sync time="206.100"/>
il y en a () il y a un un un grand scientifique euh en soixante-huit qui disait euh
<Sync time="210.402"/>
l'information c'est de l'information.
<Sync time="212.308"/>
c'est pas de la matière, c'est pas de l'énergie, c'est euh abstrait ;
<Sync time="215.927"/>
c'est un concept abstrait.
<Sync time="216.991"/>
c'est quelque chose qu'on va chercher à manipuler.
<Sync time="219.784"/>
nous on va voir ça quand même () on va essayer de concrétiser cette euh cette information puisque on va la manipuler avec un ordinateur donc
<Sync time="225.711"/>
il y a un moment ce sera
<Sync time="227.734"/>
ce sera des lettres ou ce sera des chiffres ou ce sera
<Sync time="231.122"/>
des
<Sync time="232.125"/>
des bits
<Sync time="233.271"/>
d'information.
<Sync time="235.677"/>
voilà donc qu'est-ce qu'on fait sur l'information ?
<Sync time="237.561"/>
bah on va la ranger, on va l'ordonner, on va la transmettre
<Sync time="242.127"/>
on va la transformer
<Sync time="243.521"/>
et cetera et cetera.
<Sync time="244.606"/>
il y a tout un tas de traitements qu'on peut faire sur cette information
<Sync time="248.808"/>
euh j'ai une
<Sync time="250.403"/>
une petite citation aussi qui me plaît bien, qui est euh une citation de d'un ma() d'un mathématicien informaticien euh très célèbre
<Sync time="258.574"/>
que vous retrouverez
<Sync time="260.123"/>
euh certainement dans votre parcours, quel que soit le parcours,
<Sync time="263.920"/>
qui disait
<Sync time="264.761"/>
que la science informatique c'est pas plus la science des ordinateurs que l'astronomie n'est celle des télescopes.
<Sync time="272.818"/>
je vais vous l'expliquer en deux mots :
<Sync time="275.009"/>
autrement dit, dans ce cours je vais pas vous apprendre à réparer une imprimante.
<Sync time="278.809"/>
voilà
<Sync time="279.914"/>
parce que l'informatique s()
<Sync time="281.592"/>
l'informatique c'est pas savoir
<Sync time="284.153"/>
démonter et remonter un ordinateur.
<Sync time="286.324"/>
l'informatique c'est savoir maîtriser l'outil informatique,
<Sync time="289.358"/>
quel que soit cet outil.
<Sync time="294.535"/>
bon là il y a une petite répétition mais je pense que j() j'ai mis ce transparent-là pour vous mettre quelques images
<Sync time="300.146"/>
célèbres donc qu'est-ce que s() pourquoi l'informatique ? parce que c'est un outil scientifique incontournable
<Sync time="306.154"/>
euh c'est un domaine scientifique qui est maintenant omniprésent
<Sync time="309.615"/>
omniprésent
<Sync time="310.986"/>
parce que euh de plus en plus on parle de domaine pluridisciplinaire, et l'informatique est souvent associée à une autre matière
<Sync time="319.346"/>
moi je suis enseignant-chercheur en bio-informatique, donc informatique au service de la biologie
<Sync time="324.642"/>
mais il y a des chercheurs en informatique pour les sciences sociales, il y a des chercheurs en informatique pour () il y a des chercheurs en droit qui travaillent sur l'informatique
<Sync time="332.178"/>
et cetera. donc donc c'est un () c'est vraiment un domaine pluridisciplinaire.
<Sync time="336.897"/>
euh c'est une s() la science de la communication aussi,
<Sync time="340.583"/>
donc on va chercher à communiquer avec l'outil,
<Sync time="342.716"/>
on va chercher à échanger euh des des informations entre scientifiques,
<Sync time="348.098"/>
donc c'est vraiment un outil euh incontournable.
<Sync time="350.497"/>
et puis euh tout le monde euh dit, notamment les grandes entreprises disent que c'est un un vecteur de progrès technologique
<Sync time="358.005"/>
voilà.
<Sync time="358.669"/>
alors euh si j'ai mis ce transparent-là c'était pour vous faire apparaître un certain nombre d'images.
<Sync time="363.798"/>
qu'est-ce que c'est et pourquoi l'informatique ? ben parce que l'informatique recrute,
<Sync time="367.476"/>
ça je vous l'ai déjà dit
<Sync time="368.709"/>
et ça c'est euh un exemple de euh dans la silicon valley, quelles sont les entreprises informatiques
<Sync time="375.016"/>
de la silicone valley ? ben en fait il y en a beaucoup.
<Sync time="377.339"/>
il y en a qui sont connues, on retrouve ibm.
<Sync time="379.571"/>
je pense que euh qu'est-ce qu'on va retrouver que () de connu ? c'est difficile, c'est trop petit
<Sync time="383.994"/>
mais euh voilà.
<Sync time="386.206"/>
il y a plein plein plein d'informatique, de grandes euh in() euh de grandes boites
<Sync time="390.754"/>
qui développent euh
<Sync time="392.734"/>
ce qu'on appelle l'informatique.
<Sync time="394.900"/>
il y a des outils aussi
<Sync time="396.845"/>
connus
<Sync time="397.582"/>
euh ça vous l'utilisez tous, c'est google maps.
<Sync time="401.586"/>
donc ça c'est de l'informatique, voilà.
<Sync time="403.564"/>
on fait () on on développe euh l'outil google maps et puis on l'utilise
<Sync time="408.065"/>
le développer, c'est ce qu'on va apprendre ;
<Sync time="410.362"/>
l'utiliser, c'est ce que vous savez faire.
<Sync time="413.539"/>
euh je vous montrerai comment on peut euh développer donc pas google maps mais un équivalent euh open source euh
<Sync time="421.252"/>
on on pourra faire ça, vous pourrez faire ça à la fin du semestre.
<Sync time="423.831"/>
bon ça c'est itunes hein, vous savez euh vous *utilisez tous ce genre d'outils, vous utilisez tous google
<Sync time="429.545"/>
et puis euh de plus en plus, peut-être pas tout le monde mais vous avez un
<Sync time="433.676"/>
un téléphone connecté
<Sync time="435.518"/>
avec tout ce qu'il faut pour euh
<Sync time="437.659"/>
programmer
<Sync time="439.580"/>
ouais dans ce téléphone. donc euh ma photo est un peu vieille hein mais moi je suis un peu
<Sync time="443.073"/>
je suis un peu vieux ;
<Sync time="445.368"/>
vous avez certainement quelque chose de plus moderne.
<Sync time="449.981"/>
bon euh là encore il y a un petit peu de redites mais euh je vais passer très vite dessus. donc pourquoi
<Sync time="455.887"/>
un scientifique a besoin de l'informatique ? pour manipuler ses données, traiter des mesures, analyser les données
<Sync time="462.088"/>
quel que soient les données
<Sync time="464.475"/>
faire des simulations
<Sync time="465.662"/>
ça c'est important
<Sync time="466.665"/>

<Event desc="pi" type="pronounce" extent="instantaneous"/>
 avoir un () quand on a un modèle mathématique ou physique, on va chercher à le simuler pour euh
<Sync time="473.611"/>
en obtenir le comportement à très long terme.
<Sync time="476.408"/>
ben la simulation c'est un des
<Sync time="478.683"/>
un des enjeux de l'informatique : simuler proprement, rapidement
<Sync time="482.083"/>
un phénomène, c'est un
<Sync time="483.936"/>
un des enjeux.
<Sync time="484.566"/>
la gestion de données c'est un des enjeux euh très très actuel, parce que
<Sync time="488.552"/>
on produit énormément de données, on sait plus les gérer, on sait plus les stocker, on sait plus rien faire avec ces données.
<Sync time="492.648"/>
donc ça c'est euh l'enjeu euh le plus important actuellement gérer convenablement les données.
<Sync time="498.354"/>
voilà
<Sync time="499.065"/>
bon
<Sync time="499.998"/>
après cette petite introduction, on va commencer.
<Sync time="504.161"/>
le cours, il s'appelle introduction à l'informatique mais en fait ce qu'on va faire, c'est de l'algorithmique
<Sync time="513.420"/>
donc qu'est-ce que c'est que l'algorithmique, et qu'est-ce qu'on va apprendre dans ce cours ? on va apprendre
<Sync time="518.280"/>
à écrire des algorithmes,
<Sync time="521.0"/>
des algorithmes simples.
<Sync time="523.99"/>
les choses compliquées
<Sync time="526.107"/>
vous les verrez plus tard.
<Sync time="529.011"/>
mais je vais vous prouver que
<Sync time="531.014"/>
la plupart des la plupart des programmes informatiques
<Sync time="535.509"/>
ce sont des petites () des combinaisons d'algorithmes simples.
<Sync time="539.096"/>
et à la fin du semestre vous saurez faire des choses euh qui sont () qui ont qui ont de la gueule, quand même
<Sync time="546.243"/>
rien qu'en écrivant des algorithmes simples.
<Sync time="549.593"/>
voilà notre but.
<Sync time="551.995"/>
bon et qu'est-ce que c'est qu'un algorithme ?
<Sync time="554.762"/>
ça je vais revenir lon() je vais revenir dessus hein,
<Sync time="557.435"/>
mais en une phrase,
<Sync time="558.768"/>
un algorithme c'est le l'écriture dans un langage
<Sync time="562.019"/>
non ambigu
<Sync time="564.048"/>
d'une méthode de résolution d'un problème.
<Sync time="567.620"/>
c'est une définition classique de ce que c'est qu'un algorithme.
<Sync time="570.608"/>
donc on a un problème,
<Sync time="572.362"/>
on essaye de les r() de le résoudre
<Sync time="575.148"/>
et on écrit comment on le résout.
<Sync time="578.241"/>
la résolution, c'est une suite d'opérations qui permet de le résoudre.
<Sync time="583.395"/>
ce qu'on va apprendre
<Sync time="585.3"/>
c'est
<Sync time="586.683"/>
euh on va apprendre un langage qui permet de décrire cette méthode de résolution,
<Sync time="592.182"/>
et il faut que le langage respecte un certain nombre de règles.
<Sync time="600.130"/>
alors on a parlé d'algorithmie d'algorithme : pourquoi on a besoin d'algorithme ? ça c'est pas récent
<Sync time="606.044"/>
c'est tellement pas récent que je vous ai ressorti une petite photo de quelqu'un euh du dix-neuvième siècle début dix-neuvième siècle
<Sync time="614.628"/>
qui avait inventé ce qu'il () ce qu'on appelait une machine à calculer euh la la personne s'appelle euh
<Sync time="619.670"/>
charles babbage, il est là-haut
<Sync time="622.517"/>
euh la photo date d'environ mille huit cent trente-quatre
<Sync time="627.717"/>
et qu'est-ce qu'il avait fait ? donc il avait construit
<Sync time="630.230"/>
une grosse machine à base d'engrenages,
<Sync time="633.285"/>
il stockait l'information sur des cartes perforées, il stockait le programme sur des cartes perforées
<Sync time="640.378"/>
il lisait le programme en faisant des () en faisant tourner des manivelles, il y avait pas l'électricité
<Sync time="645.104"/>
donc euh il fallait quand même euh une source d'énergie
<Sync time="649.213"/>
et puis son but
<Sync time="650.44"/>
c'était euh
<Sync time="652.558"/>
son but et son enjeu, c'était de diminuer le nombre de tours de manivelle
<Sync time="656.404"/>
parce que euh tourner la manivelle ça ça ça musclait euh certes mais euh
<Sync time="663.290"/>
il y a bien un moment où on voulait avoir le résultat du calcul
<Sync time="666.487"/>
le plus rapidement possible donc fallait réduire l'énergie consommée.
<Sync time="670.347"/>
et puis il y avait une autre préoccupation, c'est que sa machine
<Sync time="674.728"/>
dont je vais vous donner euh là 
<Event desc="pi" type="pronounce" extent="instantaneous"/>
 je vais vous mettre la photo,
<Sync time="678.591"/>
c'était quand même une grosse machine.
<Sync time="681.24"/>
donc il avait la préoccupation, pour pouvoir la fabriquer simplement et rapidement,
<Sync time="686.101"/>
de réduire le nombre de pièces qu'il devait utiliser dans sa machine.
<Sync time="689.700"/>
donc là il y avait une autre euh
<Sync time="691.827"/>
euh notion de complexité d'un programme ou d'un algorithme, c'était : je voulais que l'algorithme utilise le moins de ma() de manivelles et d'engrenages possibles.
<Sync time="700.509"/>
donc il y a une con() parce que si on en utilise moins, on prend moins de place
<Sync time="703.600"/>
donc il y a une notion de complexité en taille occupée
<Sync time="706.83"/>
par le le programme.
<Sync time="709.038"/>
donc la notion de complexité elle est rappelée en dessous. il y a deux notions de complexité : une complexité en temps
<Sync time="715.417"/>
le temps d'exécution, qui va être aussi proportionnel à l'énergie consommée pour résoudre le problème, 
<Sync time="720.412"/>
et puis une complexité en espace, qui pour lui était le nombre de pièces
<Sync time="724.395"/>
utilisées par sa machine.
<Sync time="726.319"/>
voilà
<Sync time="729.062"/>
alors ça c'est vieux,
<Sync time="730.534"/>
mais le problème il est encore actuel : pourquoi on a envie d'écrire de bons algorithmes aujourd'hui ?
<Sync time="735.030"/>
ben tout simplement parce que euh
<Sync time="738.816"/>
aujourd'hui encore, et c'est encore plus primo() primordial qu'avant, on a envie de réduire la consommation
<Sync time="744.206"/>
d'énergie.
<Sync time="747.051"/>
pourquoi ? ben la première raison, c'est que réduire la
<Sync time="750.01"/>
le nombre d'instructions exécutées par un algorithme, c'est
<Sync time="753.816"/>
réduire la consommation d'énergie.
<Sync time="757.278"/>
et qui dit réduire la consommation d'énergie dit euh tout tout bêtement pour vos téléphones euh ajouter euh
<Sync time="762.181"/>
augmenter la la durée de vie de la batterie.
<Sync time="765.492"/>
et ça, vous allez pas me dire que c'est pas un enjeu.
<Sync time="770.353"/>
et puis
<Sync time="772.550"/>
donc euh pourquoi c'est encore plus un enjeu ? ben parce que évidemment, vous avez () il y a moins de puissance de calcul aussi donc s() si on réduit si on
<Sync time="779.109"/>
si on réduit le nombre d'instructions exécutées, on pourra les exécuter plus vite
<Sync time="783.345"/>
donc on pourra avoir
<Sync time="785.312"/>
un téléphone euh portable moins puissant
<Sync time="788.931"/>
mais qui fonctionne aussi vite qu'un téléphone portable plus puissant quand on n'a pas fait cet effort.
<Sync time="794.068"/>
voilà donc c'est () il y a il y a plein d'enjeux là-dessus
<Sync time="796.300"/>
de complexité.
<Sync time="797.656"/>
il y a aussi un un enjeu environnemental, et puis ça ça rejoint un terme à la mode qui s'appelle le 
<Event desc="en" type="language" extent="begin"/>
green it
<Event desc="en" type="language" extent="end"/>

<Sync time="805.268"/>
bah je vais vous montrer deux photos là,
<Sync time="807.037"/>
mes deux photos.
<Sync time="808.457"/>
donc p() premier enjeu, c'est le téléphone portable, on a envie de faire des choses euh sur des petits ordinateurs
<Sync time="815.523"/>
deuxième chose, c'est que vous avez à côté euh ce qui se trouve à peu près partout en france mais que vous verrez jamais :
<Sync time="820.913"/>
c'est un n() un centre de données, un datacenter.
<Sync time="824.485"/>
il y en a de plus en plus,
<Sync time="826.651"/>
de ces datacenter :
<Sync time="827.901"/>
ça stocke
<Sync time="829.299"/>
tout un tas d'informations,
<Sync time="830.600"/>
notamment les données de la sécurité sociale qui sont réparties un peu partout en france, mais mais pas que ça :
<Sync time="835.202"/>
les sites web que vous hébergez, que vous créez,
<Sync time="837.579"/>
les pages web euh à laquelle vous accé() auxquelles vous accédez, et cetera et cetera. donc ça stocke tout un tas d'informations.
<Sync time="842.783"/>
et ces petits datacenter, enfin pe() petits
<Sync time="845.981"/>
euh peut peut-être pas si petits que ça
<Sync time="849.190"/>
sont à l'origine de dix pourcent de la consommation électrique en france.
<Sync time="853.167"/>
dix pour cent, c'est vraiment beaucoup.
<Sync time="855.48"/>
voilà, donc
<Sync time="856.858"/>
il y a un vrai euh c'est vraiment beaucoup et puis euh on on parle tous les jours de construire un nouveau datacenter
<Sync time="862.691"/>
donc si on est à dix pourcent aujourd'hui,
<Sync time="864.332"/>
à combien on sera dans quelques temps ?
<Sync time="867.038"/>
donc évidemment, il y a un vrai enjeu à réduire la consommation d'énergie de ces datacenter.
<Sync time="872.149"/>
voilà
<Sync time="877.160"/>
bon, c'est des enjeux de société hein
<Sync time="879.87"/>
mais nous on n'est pas forcément là pour les résoudre ;
<Sync time="882.582"/>
on est là pour apprendre à écrire un bon algorithme.
<Sync time="885.146"/>
donc je vais vous donner un exemple :
<Sync time="887.63"/>
c'est un exemple de calcul mathématique
<Sync time="890.832"/>
pour vous prouver que écrire un algorithme
<Sync time="893.607"/>
é() écrire proprement un algorithme
<Sync time="896.237"/>
écrire un algorithme rapide, c'est important
<Sync time="899.319"/>
et je vais vous montrer comment on peut faire.
<Sync time="903.113"/>
alors
<Sync time="904.282"/>
on va étudier un exemple
<Sync time="905.926"/>
difficile dans le sens où euh
<Sync time="908.834"/>
dans le cours, vous aurez pas forcément beaucoup d'exemples aussi difficiles
<Sync time="911.822"/>
donc on commence vraiment à rentrer dans le dif() dans le dur là.
<Sync time="915.631"/>
le difficile, c'est : je veux calculer
<Sync time="918.302"/>
un nombre
<Sync time="919.349"/>
x à la puissance deux à la puissance k.
<Sync time="923.81"/>
calcul d'une puissance
<Sync time="927.457"/>
c'est pas si compliqué que ça, de calculer une puissance :
<Sync time="929.894"/>
si je veux calculer
<Sync time="931.182"/>
x à la puissance deux à la puissance k,
<Sync time="933.704"/>
je fais x fois x fois x fois x fois x fois x, et ça je le fais deux à la puissance k fois.
<Sync time="937.696"/>
vous êtes d'accord ?
<Sync time="939.356"/>
là on n'a rien fait de compliqué.
<Sync time="942.225"/>
j'ai une deuxième méthode pour le faire
<Sync time="945.252"/>
qui consiste à
<Sync time="947.793"/>
prendre x, le mettre au carré
<Sync time="950.296"/>
puis le remettre au carré
<Sync time="951.732"/>
puis le remettre au carré, puis le remettre au carré, et ça je le mets
<Sync time="954.292"/>
au carré k fois.
<Sync time="957.201"/>
et vous êtes bien d'accord
<Sync time="958.804"/>
que dans les deux cas, ça va calculer x à la puissance deux à la puissance k fois.
<Sync time="964.545"/>
vous êtes convaincus ?
<Sync time="966.558"/>
si vous êtes pas convaincus, vous essayez : vous allez voir, ça marche très bien.
<Sync time="971.142"/>
bon
<Sync time="972.975"/>
bah là ce que j'ai décrit par ce calcul-là, c'est deux algorithmes ;
<Sync time="978.407"/>
deux versions
<Sync time="979.433"/>
du même calcul.
<Sync time="982.075"/>
une première version qui consiste à
<Sync time="985.016"/>
partir de un, alors ça c'est un détail,
<Sync time="987.557"/>
on va partir de un et puis on va multiplier un par x
<Sync time="991.303"/>
puis un par i() puis x par x, puis
<Sync time="993.864"/>
ce qu'on a par x et cetera, et ça on le fera
<Sync time="996.535"/>
deux à la puissance k fois. c'est une description du calcul que j'ai fait avant.
<Sync time="1000.609"/>
une description algorithmique du calcul que j'ai fait avant.
<Sync time="1006.477"/>
vous êtes convaincus ?
<Sync time="1008.054"/>
par celui-là ?
<Sync time="1011.95"/>
si vous êtes convaincus, on va passer à la deuxième version.
<Sync time="1014.191"/>
la deuxième version, c'est je mets des () je mets au carré.
<Sync time="1017.757"/>
je fais des mises au carré
<Sync time="1019.254"/>
et ça, je le répète k fois.
<Sync time="1022.658"/>
toujours convaincus ?
<Sync time="1025.8"/>
bon, on a deux méthodes
<Sync time="1028.290"/>
donc euh il y a un calcul et une restitution du résultat à chaque fois.
<Sync time="1035.972"/>
ce qu'on va chercher à faire c'est euh quand on ch() étudie un algorithme,
<Sync time="1040.662"/>
on va chercher à écrire un algorithme qui calcule le bon résultat.
<Sync time="1043.954"/>
ça c'est un
<Sync time="1045.772"/>
on a un problème, on veut le résoudre, on écrit un p() un algorithme qui le résout. Si le pro() l'algorithme ne résout pas le problème, on n'a rien gagné.
<Sync time="1052.566"/>
mais s'il résout le problème,
<Sync time="1054.542"/>
on n'a pas tout à fait gagné ;
<Sync time="1057.213"/>
on va chercher à résoudre le problème le plus efficacement possible.
<Sync time="1060.939"/>
et là on en est à cette étape-là : on a deux algorithmes qui résolvent le même problème
<Sync time="1064.753"/>
et on veut regarder lequel est le plus efficace.
<Sync time="1067.946"/>
alors s() pour ça on prend un exemple
<Sync time="1070.221"/>
alors l'exemple, c'est : je prends x égale trois, k égale quatre. donc je cherche à calculer trois à la puissance seize,
<Sync time="1078.930"/>
d'accord ?
<Sync time="1081.903"/>
eh ben c'est simple :
<Sync time="1082.885"/>
je regarde ce que ça donne pour le pour la première version. donc dans la première version, je commence par faire puissance reçoit un, puis je répète
<Sync time="1089.701"/>
deux la puissance k fois
<Sync time="1092.474"/>
l'instruction puissance reçoit puissance fois trois.
<Sync time="1095.120"/>
et à chaque fois, je regarde ce que vaut puissance.
<Sync time="1097.875"/>
donc à la première fois puissance vaut trois, puis puissance vaut
<Sync time="1101.09"/>
neuf, puis puissance vaut vingt-sept et cetera et cetera et cetera.
<Sync time="1105.816"/>
voilà
<Sync time="1106.39"/>
je fais ça deux à la puissance k fois, donc je fais ça seize fois
<Sync time="1110.154"/>
ça me donne tout ça. et je restitue le résultat qui vaut euh que je me trompe pas quarante-trois millions
<Sync time="1115.923"/>
quarante-six mille sept cent vingt et un.
<Sync time="1120.950"/>
je fais tourner la deuni() deuxième version
<Sync time="1123.858"/>
alors la deuxième version, j'ai que quatre lignes hein
<Sync time="1126.602"/>
s() allez, cinq lignes
<Sync time="1128.910"/>
euh puisque la première fois je j'obtiens neuf, la deuxième fois quatre-vingt-un, la deuxième fois six mille cinq cent soixante et un et la quatrième fois le bon résultat
<Sync time="1136.540"/>
et je le restitue.
<Sync time="1138.384"/>
donc à chaque fois, j'ai restitué le résultat. c'est un bon () c'est () le résultat est bon, ça il suffit de le vérifier
<Sync time="1144.323"/>
et puis maintenant je vais me poser la question : qu'est-ce que c'est qu'étudier l'algorithme ?
<Sync time="1150.076"/>
euh qu'est-ce que c'est qu'étudier l'*algorithme ? je j() j'ai un transparent d'avance sur vous.
<Sync time="1155.554"/>
alors
<Sync time="1156.128"/>
étudier l'algorithme, c'est répondre à ces questions-là. c'est dire par exemple que
<Sync time="1161.781"/>
on a besoin d'une d() d'une seule case mémoire
<Sync time="1166.448"/>
pour résoudre le problème ;
<Sync time="1168.376"/>
ça, c'est la complexité en espace.
<Sync time="1170.464"/>
j'ai besoin d'une case mémoire, donc éventuellement d'un engrenage si vous si on prend l'image,
<Sync time="1175.317"/>
pour résoudre le problème.
<Sync time="1177.162"/>
cette case mémoire, elle va me servir à stocker la valeur de puissance.
<Sync time="1181.485"/>
on va revenir dessus euh tout à l'heure, hein
<Sync time="1183.626"/>
sur ces cases mémoires.
<Sync time="1186.620"/>
qu'est-ce que ça me permet de dire ? ça me permet de dire aussi que la deuxième version
<Sync time="1192.207"/>
pardon, la première version
<Sync time="1194.179"/>
a besoin de deux à la puissance k opérations, donc seize,
<Sync time="1196.819"/>
pour arriver au résultat.
<Sync time="1199.454"/>
la deuxième version, on n'a besoin que de k multiplications pour arriver au résultat ;
<Sync time="1203.426"/>
donc k, c'est quatre.
<Sync time="1206.111"/>
j'en conclus que
<Sync time="1208.18"/>
la deuxième version est meilleure que la première.
<Sync time="1210.612"/>
vous êtes d'accord ?
<Sync time="1213.183"/>
on est on est bien d'accord.
<Sync time="1215.396"/>
donc quand j'écrirai l'algorithme,
<Sync time="1217.820"/>
eh bah j'écrirai la deuxième version évidemment.
<Sync time="1221.170"/>
alors euh s() calculer x à la puissance deux à la puissance k c'est pas toujours utile, mais croyez-moi sur parole :
<Sync time="1227.661"/>
ça c'est un algorithme qui se généralise, ça s'appelle l'exponentiation rapide
<Sync time="1232.339"/>
ça se généralise pour n'impor() pour calculer n'importe quelle puissance de type x à la puissance n
<Sync time="1238.061"/>
c'est un peu compliqué de le généraliser
<Sync time="1240.480"/>
mais pas si compliqué que ça
<Sync time="1242.977"/>
et puis euh la petite euh la petite cerise sur le gâteau, c'est que
<Sync time="1247.703"/>
des algorithmes comme ça de trois lignes
<Sync time="1249.853"/>
ou quatre lignes
<Sync time="1251.653"/>
ben il y en a beaucoup qui sont utilisés
<Sync time="1253.472"/>
dans la vraie vie.
<Sync time="1254.19"/>
et celui-là, c'est certainement s() un de ceux qui sont les plus utilisés
<Sync time="1258.697"/>
tout simplement parce que
<Sync time="1260.807"/>
dès que vous faites une *transaction ()saction sur internet, vous avez un système de chiffrement de protection de données qui se met en place
<Sync time="1267.203"/>
qui est à base de multiplications
<Sync time="1268.871"/>
de d'exponentiations comme ça.
<Sync time="1271.186"/>
donc euh
<Sync time="1273.77"/>
vous z() vous l'utilisez tous les jours sans le savoir cet algorithme.
<Sync time="1278.470"/>
voilà pourquoi on va,
<Sync time="1279.882"/>
dans ce cours, proposer des algorithmes simples
<Sync time="1282.504"/>
mais c'est pas parce qu'ils sont simples qu'ils sont pas utiles.
<Sync time="1288.191"/>
voilà
<Sync time="1289.849"/>
donc ce qu'on va apprendre dans ce cours aussi
<Sync time="1293.513"/>
sur les algorithmes, c'est comment les écrire.
<Sync time="1298.704"/>
donc on va essayer de donner un langage
<Sync time="1301.099"/>
algorithmique
<Sync time="1302.78"/>
simple
<Sync time="1304.980"/>
pourquoi on le veut qui soit simple ? bah parce que on on veut pas avoir trop d'instructions à mémoriser.
<Sync time="1310.782"/>
et pourquoi on se donne un langage
<Sync time="1313.035"/>
ensemble ? c'est qu'on veut un langage commun.
<Sync time="1315.181"/>
donc on on essayera de partager le même langage dans tout cet amphi, dans tout ce module,
<Sync time="1320.085"/>
entre tous les enseignants.
<Sync time="1321.825"/>
mais on essaye aussi évidemment que ce soit un langage partagé
<Sync time="1325.793"/>
au moins en france, parce qu'on aura on sera f() on sera dans le langage français.
<Sync time="1329.359"/>
donc le but ça va être de décrire un problème
<Sync time="1331.338"/>
avec des
<Sync time="1332.815"/>
mots simples
<Sync time="1334.597"/>
et des mots n() normalisés.
<Sync time="1337.899"/>
des mots normalisés sans ambiguïté
<Sync time="1340.991"/>
le français n'est pas une langue qui permet de décrire un algorithme proprement, donc on est obligé de se donner un certain nombre de règles pour le décrire
<Sync time="1348.689"/>
donc le langage algorithmique qu'on va utiliser, il est codifié par un vocabulaire
<Sync time="1353.168"/>
le plus petit possible
<Sync time="1355.526"/>
et une syntaxe :
<Sync time="1357.738"/>
comment écrire
<Sync time="1358.802"/>
les phrases ?
<Sync time="1359.478"/>
syntaxe ou grammaire hein, si vous préférez, qui permet de bien décrire comment on écrit l'algorithme.
<Sync time="1366.297"/>
et il faudra respecter cette syntaxe parce que
<Sync time="1368.652"/>
le but, c'est pas d'écrire un algorithme pour vous, c'est de d'écrire un algorithme que je pourrai vous corriger,
<Sync time="1374.22"/>
ou que vous pourrez montrer à un de vos un de vos camarades, qui pourra le () qui pourra le comprendre.
<Sync time="1378.098"/>
voilà
<Sync time="1379.251"/>
donc l'utilisation de ce qui est appris pour résoudre le
<Sync time="1383.634"/>
et () oui voilà on verra ça aussi pardon
<Sync time="1387.617"/>
on utilisera tout ça
<Sync time="1389.031"/>
dans plein de cadres euh de l'in() dans plein de disciplines de l'informatique,
<Sync time="1393.260"/>
et ça c'est euh
<Sync time="1394.698"/>
une des spécificités du cours, c'est que il est organisé comme ça :
<Sync time="1400.177"/>
il y a une gro() une grosse partie algorithmique
<Sync time="1402.371"/>
de six cours
<Sync time="1403.866"/>
donc les six premiers cours vous allez apprendre l'algorithmique, vous allez apprendre comment on écrit un () comment on écrit et comme on résout un problème.
<Sync time="1410.767"/>
donc euh il y aura des instructions de base, on verra euh
<Sync time="1414.145"/>
allez, un petit teasing euh vous aurez les mots variable, type, instruction, structure de contrôle, fonction et tableau.
<Sync time="1419.542"/>
c'est d() tous les mots-clés qu'on va voir.
<Sync time="1422.068"/>
ça, ça tiendra en six cours.
<Sync time="1424.506"/>
et puis après ces six cours,
<Sync time="1426.485"/>
on va faire intervenir
<Sync time="1427.917"/>
des spécialistes d'un certain nombre de domaines :
<Sync time="1431.263"/>
donc euh un spécialiste de des réseaux sociaux,
<Sync time="1434.537"/>
qui vous expliquera comment euh facebook fonctionne, par exemple,
<Sync time="1438.082"/>
et comment on relie ça, évidemment, aux cours d'algorithmique.
<Sync time="1441.342"/>
donc
<Sync time="1441.775"/>
des choses compliquées abordées par des problèmes () par des méthodes algorithmiques simples.
<Sync time="1447.438"/>
euh vous aurez un cours de bio-informatique
<Sync time="1450.088"/>
qui est fait par un spécialiste de la bio-informatique parce que c'est pas parce que vous êtes dans ce cursus que vous n'allez pas bifurquer comme je l'ai fait
<Sync time="1458.308"/>
euh à une époque vers de la bio-informatique.
<Sync time="1463.239"/>
euh vous aurez aussi quelqu'un qui va vous parler du traitement automatique des langues naturelles
<Sync time="1468.581"/>
autrement dit euh comment on extrait d'un blog des informations pertinentes ;
<Sync time="1474.051"/>
c'est ce que vous verrez là.
<Sync time="1476.090"/>
donc traiter des données textuelles
<Sync time="1478.367"/>
euh qui peuvent venir de choses de de de sources très diverses.
<Sync time="1481.935"/>
euh vous aurez un cours de cryptographie que je vous donnerai
<Sync time="1486.199"/>
donc euh pour savoir comment on fait pour s'échanger efficacement et de manière sûre des informations.
<Sync time="1492.865"/>
et puis vous aurez un cours qui s'appelle "musique et sons"
<Sync time="1496.090"/>
mais qui est plutôt euh de l'algorithmique
<Sync time="1498.205"/>
pour générer de la musique et de l'algorithmique pour générer des sons,
<Sync time="1503.630"/>
qui qui vous sera donné euh par une spécialiste du du domaine.
<Sync time="1508.846"/>
alors vous êtes intéressés par ça vous, hein :
<Sync time="1511.407"/>
comment vous allez être évalués ?
<Sync time="1513.996"/>
bah vous serez évalués
<Sync time="1517.506"/>
dans
<Sync time="1518.298"/>
vous serez évaluée par des questions de cours.
<Sync time="1522.200"/>
sur les cours
<Sync time="1522.939"/>
donc on vous a euh à chaque euh contrôle continu que vous allez avoir, vous aurez une partie non négligeable, donc c'est important de de
<Sync time="1532.98"/>
de venir en cours et de de suivre les cours, donc c'est une partie de () sur sur en général quatre ou cinq points, un quart de la note
<Sync time="1539.222"/>
qui sont des questions de cours en général très faci() c'est très facile d'avoir ces quatre ou cinq points quand on est assidus ;
<Sync time="1544.839"/>
on n'est on n'est jamais méchants.
<Sync time="1547.247"/>
voilà
<Sync time="1548.642"/>
ça, c'est pour la partie cours donc il sera il sera organisé comme ça.
<Sync time="1554.159"/>
ensuite, on va distinguer deux choses :
<Sync time="1556.845"/>
on va distinguer les td et on va distinguer les tp.
<Sync time="1561.018"/>
autrement dit, on va distinguer une partie qui s'appellera l'algorithmique
<Sync time="1564.129"/>
d'une partie qui va s'appeler la programmation.
<Sync time="1566.565"/>
donc l'algorithmique, c'est l'écriture de méthodes de résolution
<Sync time="1570.58"/>
de problèmes dans une forme compréhensible par un humain ;
<Sync time="1575.010"/>
vous allez vous échanger ça avec votre camarade.
<Sync time="1577.921"/>
la programmation,
<Sync time="1580.062"/>
c'est l'écriture d'une méthode de résolution d'un problème dans u() un langage interprétable par un ordinateur.
<Sync time="1588.224"/>
la distinction est faible
<Sync time="1592.503"/>
euh mais euh ça veut dire que dans un () il y a deux langages :
<Sync time="1596.330"/>
il y aura un langage pour les td et un langage pour les tp.
<Sync time="1599.286"/>
et de la même manière,
<Sync time="1601.502"/>
il faudra un langage codifié pour écrire les programmes.
<Sync time="1604.846"/>
donc euh il y a une foison euh de de langages
<Sync time="1609.151"/>
j'ai écrit mille familles de langages,
<Sync time="1612.106"/>
dont une centaine de familles utiles, mais des langages c'est pas mille qu'il y en a ; il y en a
<Sync time="1616.715"/>
des millions.
<Sync time="1618.149"/>
chaque personne veut s'écrire son langage.
<Sync time="1622.496"/>
donc voilà
<Sync time="1626.080"/>
euh qu'est-ce que je dois dire maintenant ? je dois vous dire comme vous serez évalués
<Sync time="1629.816"/>
en td.
<Sync time="1631.148"/>
donc en en td, vous serez évalués
<Sync time="1632.87"/>
au cours de deux contrôle continus.
<Sync time="1635.949"/>
donc il y aura un contrôle continu aux alentours de la semaine quarante-deux, juste avant les vacances ou juste après, ça dépendra des groupes,
<Sync time="1642.366"/>
et puis euh il y aura une partie euh d'évaluation la dernière semaine de td.
<Sync time="1648.410"/>
donc vous aurez deux cc ;
<Sync time="1650.012"/>
ces deux cc seront organisés sur un créneau de td
<Sync time="1654.056"/>
et seront organisés par votre intervenant de td.
<Sync time="1658.094"/>
le codage d'algorithme
<Sync time="1660.412"/>
sera aussi évalué
<Sync time="1661.457"/>
donc
<Sync time="1661.929"/>
en tp, vous apprendrez à
<Sync time="1664.303"/>
en gros, transférer ce que vous avez appris à écrire en français en td
<Sync time="1668.322"/>
dans un langage informatique.
<Sync time="1671.15"/>
ça, ce sera le rôle des td, à vous apprendre à à à programmer euh la machine
<Sync time="1677.396"/>
et vous serez évalués
<Sync time="1680.08"/>
euh par des tp notés. donc il y en aura au moins deux, deux voire trois ; s() là encore, c'est organisé par les ens() les intervenants de tp
<Sync time="1688.713"/>
ce qui veut dire que s()
<Sync time="1690.925"/>
je vous dis comment j'organiserai mon tp,
<Sync time="1692.913"/>
comme ça vous serez pas surpris euh, ceux qui seront avec moi, mais tout le monde fera à peu près comme moi :
<Sync time="1696.800"/>
à chaque séance je vous demanderai de rendre
<Sync time="1698.54"/>
un ou deux exercices, à tout le monde.
<Sync time="1700.814"/>
et puis je piocherai
<Sync time="1702.533"/>
quatre personnes
<Sync time="1703.66"/>
quatre binômes
<Sync time="1704.777"/>
à chaque fois pour les pour les noter.
<Sync time="1707.955"/>
au final, en moyenne ça fera deux ou trois tp notés.
<Sync time="1711.622"/>
mais c'est pas tout :
<Sync time="1714.419"/>
vous serez aussi évalués par un
<Sync time="1715.982"/>
par la réalisation () enfin vous serez évalués par un projet, un un projet que vous ferez en binômes
<Sync time="1721.245"/>
un projet qui en général est ambitieux
<Sync time="1724.599"/>
un jeu ; programmer un jeu.
<Sync time="1726.627"/>
programmer un joli exemple euh un joli dessin,
<Sync time="1730.463"/>
programmer une belle réalisation musicale avec de la génération de sons de guitare ou quoi que ce soit.
<Sync time="1735.766"/>
c'est pas c'est pas de la science-fiction hein, ce que je vous dis : vous saurez le faire à la fin du semestre.
<Sync time="1740.141"/>
voilà ; et vous serez notés sur ce projet.
<Sync time="1744.813"/>
je reviens d() dessus tout de suite ; je vous montrerai des exemples
<Sync time="1748.729"/>
de ce qu'on peut attendre de vous.
<Sync time="1751.412"/>
le langage
<Sync time="1754.663"/>
le langage que vous allez utiliser,
<Sync time="1757.47"/>
c'est le javascript.
<Sync time="1759.664"/>
pourquoi ce langage ?
<Sync time="1763.007"/>
ben parce que c'est un langage qui est assez universel.
<Sync time="1766.409"/>
il est compris par tous les toutes les machines que vous pouvez avoir sous la main,
<Sync time="1770.469"/>
quel que soit le système d'exploitation.
<Sync time="1773.999"/>
il est rare d'avoir des langages aussi universels,
<Sync time="1777.687"/>
donc c'est un choix.
<Sync time="1779.434"/>
c'est un langage qui est interprété par le navigateur web
<Sync time="1783.405"/>
que vous utilisez tous les jours pour aller sur internet : c'est chrome, c'est firefox, c'est euh internet explorer, ça vous l'utilisez
<Sync time="1790.638"/>
donc comment ça va se présenter ? vous allez euh on va vous donner une adresse
<Sync time="1794.084"/>
vous allez aller sur la page, et là vous allez avoir un environnement de programmation qui va s'ouvrir
<Sync time="1798.608"/>
qui vous permettra de programmer en javascript.
<Sync time="1802.579"/>
voilà. donc cet environnement euh vous aurez pas besoin forcément d'un ordinateur pour l'utiliser, puisque vous pouvez prendre votre téléphone et i() et il pourra faire tourner vos programmes.
<Sync time="1812.340"/>
voilà. et pourquoi euh il y a ce choix de javascript ? ben ça c'est une citation de de lars bak ;
<Sync time="1819.693"/>
lars bak, qui est le responsable
<Sync time="1822.428"/>
euh chez google de du mo() du moteur chrome,
<Sync time="1826.966"/>
qui disait il y a deux ou trois ans que pour une entreprise qui se lance aujourd'hui, utiliser ce langage est une évidence
<Sync time="1833.31"/>
et il suffit de créer une application une seule fois, elle fonctionnera partout.
<Sync time="1837.511"/>
ça c'est () ça c'était vrai il y a trois quatre ans, c'est toujours vrai.
<Sync time="1839.773"/>
c'est tellement vrai que même des entreprises françaises
<Sync time="1842.481"/>
des grosses entreprises françaises
<Sync time="1845.184"/>
pou() dassault systèmes, typiquement,
<Sync time="1848.076"/>
qui a une très grande euh histoire de euh avec les physiciens pour euh créer des des langages de simulation de phénomènes physiques,
<Sync time="1859.594"/>
euh euh dassault systèmes met énormément d'argent actuellement pour recoder tout ce qu'ils ont fait en javascript.
<Sync time="1866.673"/>
ça ça leur coûte très cher.
<Sync time="1868.380"/>
ça leur coûte très cher parce que nous on se permet d'utiliser des
<Sync time="1871.746"/>
des codes publics 
<Sync time="1874.143"/>
euh qui permettent de faire plein de choses ;
<Sync time="1876.337"/>
eux ne peuvent pas se permettre d'ut() de réutiliser du code qui ne leur appartient pas, voilà.
<Sync time="1880.161"/>
donc ça leur coûte très cher.
<Sync time="1882.003"/>
euh pourquoi javascript encore ? parce que c'est un langage simple mais qui permet de faire plein de choses très facilement,
<Sync time="1887.597"/>
donc simple mais puissant.
<Sync time="1889.981"/>
euh il y a un typage
<Sync time="1892.889"/>
qui s'appelle l() les les les variables sont typées, s() elles sont typées ti() dynamiquement
<Sync time="1898.029"/>
c'est la seule différence parce que sa syntaxe elle-même ressemble à beaucoup de langages que vous aurez vous aurez à manipuler
<Sync time="1904.800"/>
comme le c, le c++, le java et cetera et cetera.
<Sync time="1907.668"/>
*évidemment, toutes les boucles qu'on va voir, vous écrivez la même boucle en c, ça marche.
<Sync time="1913.463"/>
voilà donc il y a un par() un grand partage d'éléments de syntaxe, c'est une bonne base pour la suite.
<Sync time="1921.030"/>
on met à votre disposition un environnement de programmation
<Sync time="1924.160"/>
qui est un petit peu plus qu'un environnement de programmation,
<Sync time="1927.011"/>
dans le sens où on vous simplifie la vie dans beaucoup de
<Sync time="1930.633"/>
pour beaucoup de choses.
<Sync time="1932.655"/>
c'est un souci pédagogique :
<Sync time="1935.378"/>
on a souhaité
<Sync time="1937.059"/>
que le langage
<Sync time="1938.250"/>
que vous allez utiliser en tp soit pas trop éloigné du langage que vous allez utiliser en td.
<Sync time="1942.676"/>
donc
<Sync time="1944.080"/>
il y aura des euh
<Sync time="1946.590"/>
il y aura () il y a une grosse bibliothèque de fonctions qui est ajoutée, mais c'est une bibliothèque hein
<Sync time="1951.443"/>
pour euh dialoguer
<Sync time="1953.764"/>
entre l'utilisateur et le programme.
<Sync time="1956.061"/>
donc euh et puis ces ces fonctions sont
<Sync time="1959.667"/>
traduites en français
<Sync time="1961.032"/>
dans la version qu'on vous met à disposition.
<Sync time="1963.355"/>
donc il y a écrire, saisie euh obtenir une entrée texte,
<Sync time="1967.063"/>
on peut faire des dessins facilement : point, rectangle, rectangle plein et cetera, cercle.
<Sync time="1971.953"/>
euh on peut faire des sons, charger un son,
<Sync time="1974.747"/>
le créer à partir d'un tableau, et cetera et cetera.
<Sync time="1978.666"/>
voilà euh mais euh ce qu'il faut retenir, c'est que c'est du javascript.
<Sync time="1982.196"/>
la bibliothèque elle-même est euh du javascript donc tout ce que vous allez écrire
<Sync time="1986.574"/>
il y a un phénomène de production d'application qui vous permet de diffuser
<Sync time="1991.536"/>
t() le code que vous allez produire.
<Sync time="1995.154"/>

<Event desc="pi" type="pronounce" extent="instantaneous"/>
 de le diffuser hors de l'environnement de programmation
<Sync time="1998.724"/>
donc l'environnement de programmation, ceux qui l'ont déjà croisé
<Sync time="2002.593"/>
pour ceux qui l'ont déjà croisé, ça r() euh ça ressemble à ça.
<Sync time="2005.990"/>
pour ceux qui ne l'ont pas croisé aussi d'ailleurs
<Sync time="2009.310"/>
donc ça se présente
<Sync time="2010.823"/>
comme ça il y a
<Sync time="2012.666"/>
une fenêtre
<Sync time="2014.121"/>
qui permet de développer euh le programme
<Sync time="2017.383"/>
et puis un certain nombre de fenêtres
<Sync time="2020.009"/>
qui permet de restituer un résultat.
<Sync time="2024.096"/>
donc là le re() résultat restitué, c'est un graphique et il y a une fenêtre de restitution de résultat graphique
<Sync time="2029.179"/>
mais il y a aussi une ré() une fenêtre de restitution de résultat texte.
<Sync time="2033.002"/>

<Event desc="pi" type="pronounce" extent="instantaneous"/>
 on peut produire des sons, on peut produire plein de choses.
<Sync time="2036.534"/>
donc maintenant je suis censé
<Sync time="2038.614"/>
vous faire une toute petite démonstration
<Sync time="2041.062"/>
du
<Sync time="2042.910"/>
de l'environnement
<Sync time="2044.2"/>
je regarde
<Sync time="2045.709"/>

<Event desc="bb" type="noise" extent="instantaneous"/>

<Sync time="2048.699"/>
ces démonstrations donc euh j'ai parlé de la webcam mais euh il y a le goo() l'équivalent de google maps et tout ça vous avez plein d'exemples
<Sync time="2056.563"/>
sur le site
<Sync time="2058.59"/>
sur le vrai site de l'intér() de l'environnement de travail
<Sync time="2061.176"/>
que vous retrouverez
<Sync time="2063.107"/>
euh qui est euh un site de développement voilà
<Sync time="2066.779"/>
donc il y a plein plein plein d'exemples
<Sync time="2070.138"/>
avec des explications ;
<Sync time="2071.858"/>
c'est en anglais,
<Sync time="2073.128"/>
hein.
<Sync time="2075.450"/>
voilà
<Sync time="2076.004"/>
donc en résumé
<Sync time="2078.378"/>
de cette première partie,
<Sync time="2083.089"/>
on verra d() vous allez voir deux choses dans ce cours : vous allez voir de l'algorithmique
<Sync time="2086.821"/>
et vous allez voir de la programmation.
<Sync time="2090.038"/>
en cours magistral, c'est le seul endroit où on parlera des deux.
<Sync time="2093.637"/>
on présentera un concept
<Sync time="2095.379"/>
algorithmique,
<Sync time="2096.736"/>
sa traduction dans le langage algorithmique, sa traduction dans le langage de programmation ;
<Sync time="2100.345"/>
c'est le seul endroit où vous verrez ça.
<Sync time="2102.434"/>
en td vous par() vous parlerez en en langage algorithmique, en tp vous parlerez en () dans le langage de programmation.
<Sync time="2110.150"/>
l'évaluation des cours,
<Sync time="2112.234"/>
des td et des tp sera () est réalisée comme ça
<Sync time="2115.193"/>
donc il y a deux cc
<Sync time="2118.366"/>
pour les cours et td,
<Sync time="2120.087"/>
deux cc pour les tp et un projet.
<Sync time="2126.380"/>
pourquoi je porte un micro
<Sync time="2128.220"/>
depuis le début ?
<Sync time="2130.107"/>
et j'espère que ça va fonctionner,
<Sync time="2131.695"/>
je suis pas certain
<Sync time="2132.721"/>
c'est parce que on a() enregistre les vidéos
<Sync time="2137.880"/>
donc précisément on enregistre le son
<Sync time="2140.580"/>
et tout ce qui sort de mon écran,
<Sync time="2143.137"/>
et on on construit une vidéo
<Sync time="2147.270"/>
qu'il sera possible d'annoter.
<Sync time="2149.728"/>
donc il y a un système d'annotation qui est dé() c'est une collaboration avec olivier euh je sais pas je crois qu'il est reparti,
<Sync time="2155.671"/>
mais c'est quelqu'un c'est un
<Sync time="2158.105"/>
un ingénieur euh chercheur sur une plate-forme de développement d'outil
<Sync time="2162.168"/>
pédagogique innovant
<Sync time="2164.052"/>
voilà donc c'est une c'est () on a la chance de d'avoir cette collaboration un peu bénévole, parce qu'on fait tout ça bénévolement pour vous.
<Sync time="2170.877"/>
donc comme on le fait bénévolement pour vous, on attend un petit peu une participation
<Sync time="2174.971"/>
de tout le monde pour annoter les les vidéos. alors qu'est-ce que ça veut dire, annoter ? ça veut dire
<Sync time="2180.139"/>
vous mettez un petit point sur "j'ai pas compris",
<Sync time="2182.997"/>
et puis si il y a un petit point sur "j'ai pas compris" euh eh ben ça ça nous permet à nous de voir que il faut vous réexpliquer des choses,
<Sync time="2191.868"/>
donc c'est important.
<Sync time="2195.003"/>
ça vous permet de faire des remarques
<Sync time="2197.975"/>
des remarques euh plutôt constructives hein euh
<Sync time="2201.278"/>
"je pense qu'en plus, on pourrait aller voir ça"
<Sync time="2204.33"/>
et puis ça me permet aussi de mettre des liens supplémentaires
<Sync time="2207.664"/>
notamment tous les exemple que je vous ai montrés, ben je vous mettrai un lien :
<Sync time="2210.714"/>
"cliquez ici"
<Sync time="2211.736"/>
et vous aurez tous les exemples.
<Sync time="2214.388"/>
ok ?
<Sync time="2216.404"/>
voilà
<Sync time="2217.087"/>
donc ça c'est euh la nouveauté de cette année : on essaye de mettre en place ce système de vidéos
<Sync time="2223.754"/>
screencastées
<Sync time="2225.124"/>
du cours.
<Sync time="2228.306"/>
ça ne remplace pas le cours
<Sync time="2231.290"/>
donc euh évidemment si on voit que l'amphi se vide parce que il y a les vidéos en ligne eh ben on arrête, évidemment.
<Sync time="2236.230"/>
voilà
<Sync time="2238.596"/>
euh
<Sync time="2239.829"/>
toutes les ressources pédagogiques
<Sync time="2243.320"/>
dont j'ai parlé
<Sync time="2245.003"/>
vont se retrouver sur "ma doc". donc "ma doc", c'est l'endroit
<Sync time="2248.088"/>
de référence pour trouver les informations dont vous avez besoin pour ce cours.
<Sync time="2253.592"/>
normalement vous avez appris à vous connecter sur "ma doc"
<Sync time="2257.443"/>
si vous ne l'avez pas appris au premier cours, on fera un petit rappel
<Sync time="2260.720"/>
premier tp, on fera un petit rappel
<Sync time="2263.233"/>
mais euh
<Sync time="2265.273"/>
ce sera le lieu de référence.
<Sync time="2269.464"/>
vous avez des questions ?
<Sync time="2277.254"/>
non ?
<Sync time="2292.993"/>
bon
<Sync time="2300.820"/>
après cette introduction un peu longue
<Sync time="2304.120"/>
de des méthodes qu'on suivra dans le cours,
<Sync time="2307.265"/>
on va rentrer dans le dur là, ça y est
<Sync time="2309.841"/>
et on va parler
<Sync time="2313.726"/>
on va on va maintenant décrire comme on écrit un algorithme
<Sync time="2317.393"/>
en détail ; on va commencer à parler du langage.
<Sync time="2320.486"/>
et
<Sync time="2321.357"/>
pour parler du langage, on verra que il y a des
<Sync time="2324.367"/>
il va falloir euh dialoguer avec la mémoire, récupérer des des valeurs en mémoire
<Sync time="2329.480"/>
ça, ça se fera par le biais de variables.
<Sync time="2332.610"/>
on verra qu'on devra faire des calculs
<Sync time="2336.256"/>
bah il y aura une manière de les décrire ces calculs, ça s'appellera une expression.
<Sync time="2340.677"/>
et puis euh il va falloir
<Sync time="2344.923"/>
voir comment on dialogue avec l'utilisateur et comment on réalise les calculs, ça se fera par le biais d'expressions.
<Sync time="2350.507"/>
voilà donc dans cette deuxième partie du cours, on va voir tout ça.
<Sync time="2358.678"/>
donc
<Sync time="2359.704"/>
je reviens sur euh un peu plus en détail sur ce que c'est qu'un algorithme.
<Sync time="2363.683"/>
l'algorithme dans la vie,
<Sync time="2366.287"/>
on le retrouve à plein d'endroits :
<Sync time="2368.668"/>
quand vous lisez une recette de cuisine, c'est un algorithme.
<Sync time="2374.130"/>
quand vous
<Sync time="2375.532"/>
suivez un ex() un protocole expérimental
<Sync time="2378.756"/>
ça vous avez pas encore eu de tp de chimie ;
<Sync time="2381.068"/>
dès que vous aurez un tp de chimie, vous verrez ce que c'est qu'un protocole expérimental.
<Sync time="2386.187"/>
eh ben ça c'est un algorithme :
<Sync time="2387.787"/>
c'est une suite d'instructions à
<Sync time="2390.074"/>
à suivre pour partir d'un problème non résolu et arriver à un problème résolu.
<Sync time="2397.697"/>
des consignes de sécurité, les instructions pour aller quelque part, ce sont des algorithmes.
<Sync time="2401.745"/>
dans ce cours, on va quand même se focaliser sur
<Sync time="2404.844"/>
des
<Sync time="2406.026"/>
des méthodes de résolution d'un problème
<Sync time="2409.047"/>
qu'on pourra écrire de manière non ambiguë
<Sync time="2412.508"/>
et qu'on pourra é()
<Sync time="2414.03"/>
éventuellement coder sur un ordinateur.
<Sync time="2417.191"/>
voilà notre définition d'un al() d'algorithme dans ce cours.
<Sync time="2424.525"/>
alors pourquoi non ambiguë ?
<Sync time="2427.859"/>
et que() qu'est-ce qu'on veut éviter ? ben euh on veut éviter le s() s() le syndrome recette de cuisine
<Sync time="2433.092"/>
où 
<Event desc="pi" type="pronounce" extent="instantaneous"/>
 où vous avez l'impression d'avoir suivi le
<Sync time="2435.637"/>
la recette de cuisine
<Sync time="2436.933"/>
de a à z et vous tombez sur un gâteau qui est complètement écrasé donc qui est pas bon.
<Sync time="2440.640"/>
eh ben nous on on fera en sorte que les algorithmes
<Sync time="2444.057"/>
soient ce qu'on appelle déterministes,
<Sync time="2445.858"/>
c'est-à-dire que si vous suivez l'algorithme,
<Sync time="2447.976"/>
vous arriverez au bon résultat.
<Sync time="2451.692"/>
voilà
<Sync time="2454.125"/>
deux mots sur l'ambiguïté
<Sync time="2457.809"/>
qui vont s'a() qui qui vont appuyer le fait que on peut pas utiliser le français pour euh
<Sync time="2463.467"/>
décrire proprement un algorithme ;
<Sync time="2465.285"/>
on sera obligé d'avoir des règles un peu plus précises.
<Sync time="2468.201"/>
ben tout simplement, voilà quelques exemples
<Sync time="2470.244"/>
tout bêtes : en français, on a le droit de dire "vends tricycle pour infirme en bon état".
<Sync time="2474.970"/>
il y a de l'ambiguïté : est-ce que c'est le tricycle ou est-ce que c'est l'infirme qui est en bon état ?
<Sync time="2480.434"/>
euh "deux conducteurs étaient interpellés par les gendarmes en état d'ivresse"
<Sync time="2484.952"/>
il manque visiblement une virgule
<Sync time="2487.500"/>
ou pas.
<Sync time="2490.068"/>
c'est dans le sud hein, donc on sait pas.
<Sync time="2492.875"/>
ce serait en bretagne, on saurait.
<Sync time="2496.579"/>
euh "j'ai lu la critique de chomsky", et cetera et cetera.
<Sync time="2501.694"/>
bon, clairement, le français ne convient pas
<Sync time="2504.825"/>
pour écrire un algorithme ; il y a trop d'ambiguïtés comme ça.
<Sync time="2508.831"/>
il faut euh avoir des règles de syntaxe
<Sync time="2511.546"/>
claires
<Sync time="2512.666"/>
de construction de phrases
<Sync time="2514.818"/>
pour éviter euh les euh gendarmes en état d'ivresse.
<Sync time="2520.476"/>
il faut avoir un vocabulaire précis
<Sync time="2524.830"/>
clair, précis : je veux écrire quelque chose, j'écris "écrire" ;
<Sync time="2528.953"/>
je veux saisir quelque chose, j'écris "saisie"
<Sync time="2531.349"/>
donc un vocabulaire
<Sync time="2532.532"/>
précis et si possible pas trop grand parce qu'on n'a pas envie de s'encom() s'encombrer l'esprit avec trop de mots-clés.
<Sync time="2538.561"/>
voilà le but
<Sync time="2540.150"/>
du langage algorithmique.
<Sync time="2544.983"/>
et quand on écrira ce langage et quand on *écrira ces règles,
<Sync time="2549.672"/>
on aura en tête
<Sync time="2551.080"/>
qu'il faut être capable de manipuler deux choses dans un algorithme.
<Sync time="2555.494"/>
il y a deux bases dans un algorithme :
<Sync time="2557.549"/>
c'est les variables
<Sync time="2560.669"/>
et les instructions.
<Sync time="2564.820"/>
donc des variables
<Sync time="2566.691"/>
qui sont des choses hein on va donner euh on on va être un peu plus précis, un peu moins abstrait sur ce que c'est qu'une variable.
<Sync time="2573.525"/>
hein
<Sync time="2574.322"/>
mais on peut voir ça comme des des cases qui stockent de l'information
<Sync time="2579.808"/>
et qui décrivent comment on accède à la mémoire de l'ordinateur.
<Sync time="2583.797"/>
on sera un peu plus précis que ça tout à l'heure
<Sync time="2586.129"/>
sur ce que c'est qu'une variable.
<Sync time="2589.183"/>
et puis il y a des instructions :
<Sync time="2591.366"/>
quel s() quel est le but d'une instruction ?
<Sync time="2593.657"/>
c'est de lire une variable
<Sync time="2596.71"/>
et de modifier une variable ;
<Sync time="2600.003"/>
pas plus.
<Sync time="2602.335"/>
et avec ça,
<Sync time="2604.737"/>
on est capables
<Sync time="2606.160"/>
de décrire
<Sync time="2607.312"/>
un programme qui va résoudre un problème
<Sync time="2609.754"/>
rien qu'en modifiant des états de variables.
<Sync time="2611.842"/>
qu'est-ce que c'est qu'un algorithme ?
<Sync time="2614.182"/>
je réécris
<Sync time="2616.583"/>
je je je réexplique ce que c'est :
<Sync time="2618.588"/>
c'est une suite d'instructions
<Sync time="2622.511"/>
qui, en modifiant l'état d'un certain nombre de variables intelligemment,
<Sync time="2626.246"/>
permet de résoudre un problème.
<Sync time="2632.728"/>
voilà
<Sync time="2634.065"/>
donc un algorithme, c'est composé d'une suite d'instructions
<Sync time="2636.847"/>
qui, partant d'une description en mémoire d'un problème non résolu,
<Sync time="2640.52"/>
donne les modifications de la mémoire permettant d'arriver à une description en mémoire du problème résolu.
<Sync time="2648.986"/>
au départ, on voulait calculer trois à la puissance seize
<Sync time="2657.060"/>
on a dit x égale trois, k égale quatre,
<Sync time="2660.57"/>
on a décrit la suite d'instructions qui permettait de le faire :
<Sync time="2664.798"/>
eh ben ça, c'était un algorithme.
<Sync time="2669.231"/>
ok ?
<Sync time="2669.640"/>
donc les () un exemple
<Sync time="2671.161"/>
ben je reviens dessus :
<Sync time="2672.324"/>
l'exemple, c'était le calcul de x à la puissance deux à la puissance k.
<Sync time="2678.440"/>
le problème est bien décrit
<Sync time="2680.720"/>
dès qu'on connaît les valeurs de x et k.
<Sync time="2683.631"/>
et dans le vocabulaire algorithmique,
<Sync time="2686.378"/>
x et k ce sont des variables ;
<Sync time="2689.454"/>
ce sont deux variables.
<Sync time="2692.293"/>
le problème est résolu
<Sync time="2694.663"/>
après l'exécution d'une suite d'instructions
<Sync time="2697.767"/>
puissance reçoit puissance au carré
<Sync time="2700.394"/>
donc puissance reçoit puissance au carré, c'est une instruction qui modifie
<Sync time="2704.109"/>
l'état de la mémoire ;
<Sync time="2706.167"/>
et l'état de la mémoire, qui est décrite elle-même par la variable puissance.
<Sync time="2710.640"/>
donc il y a
<Sync time="2712.072"/>
une troisième variable puissance.
<Sync time="2714.157"/>
le résultat est décrit
<Sync time="2715.571"/>
par la valeur courante de la variable puissance.
<Sync time="2719.712"/>
donc on a résolu le problème
<Sync time="2721.78"/>
quand on a calculé proprement la valeur de la variable puissance.
<Sync time="2726.719"/>
donc le but, d() ça va être d'écrire un algorithme qui permet de
<Sync time="2730.532"/>
faire convenablement le calcul
<Sync time="2732.21"/>
mais aussi,
<Sync time="2735.068"/>
ça on n'en avait pas parlé jusqu'à présent, mais aussi de gérer les interactions avec l'utilisateur
<Sync time="2740.043"/>
qu'on écrit explicitement dans l'algorithme ;
<Sync time="2742.611"/>
à quel endroit on veut que l'utilisateur interagisse avec le programme
<Sync time="2746.559"/>
ou avec l'algorithme.
<Sync time="2748.07"/>
donc se() elles sont décrites par des entrées sorties, et qu'est-ce qu'on va vouloir
<Sync time="2751.67"/>
demander à l'utilisateur ? bah on va l() vouloir lui demander x et k,
<Sync time="2755.347"/>
et qu'est-ce qu'on va vouloir lui restituer ? ben à la fin du calcul, on va lui restituer
<Sync time="2759.44"/>
puissance.
<Sync time="2761.006"/>
donc il y a des entrées et des sorties.
<Sync time="2766.220"/>
quand on parle d'écrire un algorithme,
<Sync time="2768.324"/>
un algorithme ça va ressembler à ça :
<Sync time="2774.480"/>
ça c'est la version té() td, hein.
<Sync time="2777.396"/>
donc il y aura le mot-clé algorithme, je veux écrire un algorithme
<Sync time="2781.412"/>
qui s'appelle puissance
<Sync time="2783.34"/>
je dis quelles sont les variables,
<Sync time="2786.991"/>
qu'est-ce que seront ces variables : x ce sera un réel puissance, ce sera un réel
<Sync time="2791.435"/>
et puis k ce sera un entier, i ce sera un entier.
<Sync time="2794.688"/>
puis j'ai une suite d'instructions
<Sync time="2797.976"/>
j'ai une suite d'instructions mais tout ça, ça
<Sync time="2800.293"/>
ça porte un nom :
<Sync time="2801.35"/>
donc le la ligne algorithme
<Sync time="2803.604"/>
quelque chose, c'est l'en-tête.
<Sync time="2806.014"/>
c'est l'en-tête, c'est surtout utile
<Sync time="2811.079"/>
pour euh prévenir la personne qui va lire que ce qu'on écrit, c'est un algorithme.
<Sync time="2815.647"/>
et puis euh le petit nom, c'est bien parce que on pourra écrire *plusieurs algorithmes sur la page, ils feront tous quelque chose de différent.
<Sync time="2821.751"/>
donc on leur a() donne à tous un petit nom.
<Sync time="2825.900"/>
il y aura autre chose qu'*algorithme, mais ça on le verra plus tard.
<Sync time="2830.805"/>
variable, eh ben ça c'est ce qu'on appelle l() c'est la partie déclaration, déclaration des variables
<Sync time="2838.147"/>
et la troisième partie, c'est ce qu'on appelle le corps de l'algorithme, donc la description des calculs et des interactions avec l'utilisateur.
<Sync time="2846.465"/>
cette euh ce corps est délimité par début et fin.
<Sync time="2855.336"/>
donc en() trois parties : en-tête, déclaration,
<Sync time="2858.549"/>
corps.
<Sync time="2864.488"/>
il y a un petit truc en plus
<Sync time="2866.479"/>
en bleu
<Sync time="2868.984"/>
c'est que j'ai écrit des commentaires en français.
<Sync time="2871.631"/>
je vous ai dit le français est est pas ambigu mais des fois faut quand même euh aider la le lecteur
<Sync time="2879.265"/>
faut aider le lecteur un petit peu pour comprendre l'algorithme.
<Sync time="2882.38"/>
si j'enlève les commentaires, ben je me creuse un peu la tête pour comprendre ce que fait le programme.
<Sync time="2886.826"/>
alors que si j'ajoute les lignes en bleu, qui sont des commentaires à destination de l'utilisateur,
<Sync time="2891.535"/>
c'est un peu plus facile à comprendre, notamment parce que je dis que c'est un calcul
<Sync time="2894.559"/>
c'est un algorithme qui calcule une puissance d'un nombre.
<Sync time="2897.360"/>

<Event desc="pi" type="pronounce" extent="instantaneous"/>

<Sync time="2899.027"/>
c'est un algorithme qui donc euh qui dit que l'utilisateur doit saisir un réel, qu'il doit saisir un entier
<Sync time="2904.780"/>
et cetera, et cetera.
<Sync time="2907.783"/>
bon et puis il y a des éléments de syntaxe
<Sync time="2909.538"/>
on reviendra dessus plus tard, c'est pas la peine de d'en parler maintenant.
<Sync time="2914.027"/>
donc qu'est-ce qu'on voit apparaître ?
<Sync time="2919.353"/>
on voit apparaître trois choses principales :
<Sync time="2922.372"/>
des saisies,
<Sync time="2923.586"/>
donc trois instructions principales, là encore on reviendra dessus,
<Sync time="2926.779"/>
mais il y a des saisies
<Sync time="2929.331"/>
des affichages
<Sync time="2931.130"/>
pour l'ut() donc saisis par l'utilisateur, affichages pour l'utilisateur
<Sync time="2934.811"/>
et il y a des modifications de valeurs de variables :
<Sync time="2937.519"/>
puissance reçoit x, c'est on modifie la valeur de la variable puissance.
<Sync time="2943.500"/>
ce sont les trois instructions de base d'un algorithme.
<Sync time="2946.168"/>
là encore, je reviendrai dessus en détail.
<Sync time="2954.050"/>
comme c'est peut-être,
<Sync time="2955.655"/>
pour certains d'entre vous, la première fois que vous allez avoir à écrire des algorithmes,
<Sync time="2959.693"/>
on va
<Sync time="2960.582"/>
toujours
<Sync time="2962.795"/>
décomposer
<Sync time="2964.087"/>
le corps de l'algorithme
<Sync time="2966.094"/>
lui-même
<Sync time="2967.292"/>
en trois parties.
<Sync time="2968.548"/>
parce que s() dans quatre-vingt-dix-neuf pourcent des cas
<Sync time="2970.851"/>
on peut le faire.
<Sync time="2973.577"/>
mais ces trois parties
<Sync time="2975.662"/>
seront euh en un, ce qu'on demande à l'utilisateur ;
<Sync time="2980.028"/>
tous les algorithmes seront un peu décomposés comme ça : on demande les choses à l'utilisateur, on fait un calcul
<Sync time="2984.919"/>
on restitue le résultat.
<Sync time="2989.253"/>
et vous allez voir s() enfin ce schéma-là, il se retrouve partout.
<Sync time="2991.91"/>
donc autrement dit, quand euh vous êtes face à un
<Sync time="2995.818"/>
à une question qui vous dit écrire un algorithme, bah vous vous posez les questions dans cet ordre-là :
<Sync time="3000.898"/>
qu'est-ce que je dois demander à l'utilisateur ? quelles sont les variables ?
<Sync time="3003.67"/>
quel est le calcul ?
<Sync time="3004.738"/>
qu'est-ce que je lui restitue ?
<Sync time="3007.545"/>
voilà donc il y a il y a ces trois parties-là.
<Sync time="3014.010"/>
c'est bon, je peux passer ?
<Sync time="3018.371"/>
je peux passer parce que je reviens
<Sync time="3019.892"/>
dessus ex() ici sur un exercice typique ; on va faire en() on va le faire ensemble.
<Sync time="3025.929"/>
voilà un exercice qu'on va vous donner en td :
<Sync time="3031.144"/>
vous êtes coincés, vous êtes devant votre feuille blanche, comment vous faites ?
<Sync time="3035.492"/>
donc écrire un algorithme qui demande à l'utilisateur de saisir une année de naissance et calcule l'âge qu'aura la personne au trente et un décembre deux mille vingt à minuit.
<Sync time="3045.544"/>
c'est un problème
<Sync time="3047.680"/>
donc je vais me poser la question
<Sync time="3050.363"/>
de : comment je fais pour le résoudre ?
<Sync time="3054.088"/>
bon déjà
<Sync time="3055.530"/>
ici, je retrouve "écrire un algorithme".
<Sync time="3058.756"/>
quand je retrouve "écrire un algorithme",
<Sync time="3062.787"/>
de manière automatique
<Sync time="3064.808"/>
j'écris ces quatre lignes
<Sync time="3066.188"/>
parce qu'elles y seront.
<Sync time="3068.554"/>
algorithme,
<Sync time="3070.237"/>
variable, début, fin.
<Sync time="3073.808"/>
déclaration euh en-tête, déclaration, corps de la fonction.
<Sync time="3077.699"/>
il y a ça euh s() c'est indispensable.
<Sync time="3080.047"/>
et ça on l'écrit de manière automatique, il y a pas à réfléchir, c'est toujours la même chose.
<Sync time="3086.110"/>
là où on se creuse un petit peu la tête, c'est que il faut lui donner un petit nom à cet algorithme,
<Sync time="3090.673"/>
c'est indispensable aussi.
<Sync time="3094.474"/>
vous avez une proposition ?
<Sync time="3099.232"/>
non ?
<Sync time="3101.852"/>
pardon ?
<Sync time="3103.510"/>
"anniversaire", c'est bien. alors j() moi j'en une autre, et puis puis comme je les ai préparées à l'avance, c'est ma solution qu'on va choisir.
<Sync time="3109.338"/>
ça calcule un âge, voilà ;
<Sync time="3110.937"/>
on donne une année et ça calcule un âge.
<Sync time="3112.521"/>
faut pas se creuser la tête, hein !
<Sync time="3114.795"/>
faut lui donner un petit nom,
<Sync time="3116.170"/>
un petit nom qui sera différent.
<Sync time="3119.011"/>
bon et puis maintenant là j'ai euh j()
<Sync time="3121.022"/>
pour le moment j'ai pas réfléchi beaucoup hein
<Sync time="3123.518"/>
j'ai un ensemble de trous à remplir.
<Sync time="3127.198"/>
bah on y va
<Sync time="3129.203"/>
pour les remplir, je lis le texte :
<Sync time="3132.35"/>
dans le texte, on dit () on demande à l'utilisateur de saisir une année de naissance
<Sync time="3136.458"/>
et qu'il calcule un âge.
<Sync time="3138.088"/>
ah
<Sync time="3139.114"/>
année, âge :
<Sync time="3140.741"/>
à votre avis, c'est quoi ?
<Sync time="3143.2"/>
c'est des variables.
<Sync time="3144.380"/>
ok
<Sync time="3145.182"/>
eh ben on les met là.
<Sync time="3146.521"/>
année, ben ça va être un entier, âge ça va être un entier.
<Sync time="3151.284"/>
bon
<Sync time="3152.438"/>
ensuite
<Sync time="3154.709"/>
bah on va
<Sync time="3155.410"/>
on a fini la partie dé() en-tête, on a fini la partie déclaration, on est dans le corps de la
<Sync time="3160.011"/>
de la fonction.
<Sync time="3161.36"/>
et là, on se souvient qu'il faut toujours décomposer le problème en trois parties :
<Sync time="3165.428"/>
saisie,
<Sync time="3166.449"/>
calcul, affichage,
<Sync time="3168.49"/>
et on le fait dans l'ordre.
<Sync time="3171.266"/>
qu'est-ce qu'on demande à l'utilisateur ?
<Sync time="3174.806"/>
saisir l'année.
<Sync time="3176.265"/>
tac
<Sync time="3176.728"/>
saisir une année.
<Sync time="3178.457"/>
c'est facile à trouver
<Sync time="3179.785"/>
saisir une année, ça donne la première partie
<Sync time="3182.792"/>
et ça s'écrit comme ça dans le langage algorithmique :
<Sync time="3184.991"/>
année reçoit saisie.
<Sync time="3191.590"/>
ensuite
<Sync time="3194.425"/>
ben on doit décrire le calcul
<Sync time="3196.029"/>
ça en général, c'est la partie difficile.
<Sync time="3198.696"/>
dans cet exemple-là, ça l'est pas trop.
<Sync time="3201.474"/>
comment je décris le calcul de l'âge ?
<Sync time="3204.344"/>
voilà
<Sync time="3204.872"/>
je recherche le calcul, je dois calculer l'âge
<Sync time="3209.630"/>
c'est quoi la formule
<Sync time="3211.06"/>
pour avoir l'âge au trente et un au trente et un décembre deux mille vingt à minuit,
<Sync time="3215.221"/>
sachant qu'on connaît l'année de naissance ?
</Turn>
<Turn startTime="3218.019" endTime="3220.595">
<Sync time="3218.019"/>

<Event desc="conv" type="noise" extent="instantaneous"/>

</Turn>
<Turn speaker="spk1" mode="planned" fidelity="high" channel="studio" startTime="3220.595" endTime="3254.090">
<Sync time="3220.595"/>
moins l'année de naissance
<Sync time="3221.790"/>
ouais
<Sync time="3223.768"/>
eh ben ça, ça me donne
<Sync time="3224.951"/>
l'instruction qu'il faut mettre pour décrire le calcul.
<Sync time="3229.411"/>
l'âge
<Sync time="3231.120"/>
sera égal à deux mille vingt moins l'année de naissance.
<Sync time="3233.965"/>
donc âge reçoit pour valeur deux mille vingt moins année de naissance.
<Sync time="3239.48"/>
bon
<Sync time="3240.178"/>
une fois qu'on est là,
<Sync time="3243.043"/>
on a résolu le problème
<Sync time="3246.689"/>
mais on n'a pas informé l'utilisateur qui qu'on avait résolu le problème.
<Sync time="3250.328"/>
donc qu'est-ce qu'on doit donner à l'utilisateur pour prouver qu'on a résolu le problème ?
</Turn>
<Turn mode="planned" fidelity="high" startTime="3254.090" endTime="3256.939">
<Sync time="3254.090"/>

<Event desc="conv" type="noise" extent="instantaneous"/>

</Turn>
<Turn speaker="spk1" mode="planned" fidelity="high" channel="studio" startTime="3256.939" endTime="3259.484">
<Sync time="3256.939"/>
ben restituer le résultat, mais que () c'est quoi le résultat ?
</Turn>
<Turn mode="planned" fidelity="high" startTime="3259.484" endTime="3260.401">
<Sync time="3259.484"/>

<Event desc="conv" type="noise" extent="instantaneous"/>

</Turn>
<Turn speaker="spk1" mode="planned" fidelity="high" channel="studio" startTime="3260.401" endTime="3275.5">
<Sync time="3260.401"/>
âge ?
<Sync time="3261.886"/>
eh ben on
<Sync time="3263.514"/>
on a une instruction "écrire âge"
<Sync time="3271.787"/>
voilà
<Sync time="3274.879"/>
oui ?
</Turn>
<Turn startTime="3275.5" endTime="3279.579">
<Sync time="3275.500"/>

<Event desc="conv" type="noise" extent="instantaneous"/>

</Turn>
<Turn speaker="spk1" mode="planned" fidelity="high" channel="studio" startTime="3279.579" endTime="3281.296">
<Sync time="3279.579"/>
âge ?
</Turn>
<Turn mode="planned" fidelity="high" startTime="3281.296" endTime="3282.577">
<Sync time="3281.296"/>

<Event desc="conv" type="noise" extent="instantaneous"/>

</Turn>
<Turn startTime="3282.577" speaker="spk1" endTime="3881.308">
<Sync time="3282.577"/>
c'est la dernière instruction
<Sync time="3284.727"/>
oui, c'est l'affichage.
<Sync time="3286.354"/>
donc il y a
<Sync time="3287.340"/>
saisie, calcul, affichage.
<Sync time="3289.689"/>
retenez bien ça : saisie, calcul, affichage. saisie, calcul, affichage. saisie, calcul, affichage.
<Sync time="3295.230"/>
si vous le retenez par coeur, c'est bon.
<Sync time="3300.137"/>
bon
<Sync time="3301.450"/>
je vous ai promis des petites traduction de temps en temps
<Sync time="3304.534"/>
en javascript, ça s'écrit comme ça :
<Sync time="3309.279"/>
il y a pas vraiment d'en-tête en javascript.
<Sync time="3311.424"/>
donc comme il y a pas vraiment d'en-tête mais qu'on a envie qu'il y en ait une,
<Sync time="3314.684"/>
on la met en commentaire.
<Sync time="3316.739"/>
ça c'est euh
<Sync time="3318.235"/>
un usage ;
<Sync time="3319.288"/>
c'est pas une nécessité.
<Sync time="3321.152"/>
donc par usage, on écrit en commentaire "algorithme calcul âge".
<Sync time="3326.804"/>
ce qui est nécessaire, c'est de déclarer les variables
<Sync time="3330.56"/>
donc *variable année de type entier, âge de type entier se transforme en : var année virgule âge.
<Sync time="3338.034"/>
pourquoi on ne précise pas les types ? ben parce que en javascript, il y a pas besoin.
<Sync time="3341.827"/>
les types sont euh
<Sync time="3344.106"/>
dy() dynamiques
<Sync time="3346.398"/>
donc la variable
<Sync time="3348.566"/>
aura le type de ce qu'on mettra dedans.
<Sync time="3350.936"/>
et le type pourra changer
<Sync time="3352.752"/>
au cours de l'é() 
<Event desc="pi" type="pronounce" extent="instantaneous"/>
 au cours de l'exécution.
<Sync time="3356.081"/>
certains trouvent que c'est un problème du langage, d'autres trouvent que c'est une grande force.
<Sync time="3361.227"/>
moi je serais plutôt *du deuxième avis.
<Sync time="3363.389"/>
en tout cas, on n'a pas à se poser la question du type en javascript.
<Sync time="3368.130"/>
et puis les instructions, dans le l() langage javascript amélioré qu'on met à votre disposition
<Sync time="3373.836"/>
amélioré dans le sens où on a la fonction saisie et on a la fonction écrire
<Sync time="3378.942"/>
eh ben euh on on peut écrire année reçoit saisie qui se transforme en année
<Sync time="3383.719"/>
égale saisie
<Sync time="3386.469"/>
c'est trop compliqué de faire une flèche sur un clavier
<Sync time="3389.442"/>
hein on est quand même là pour programmer avec un clavier en face de soi, donc les flèches sont remplacées par des égal ;
<Sync time="3394.426"/>
c'est le cas dans beaucoup de langages.
<Sync time="3397.171"/>
donc on remplace les flèches par des égal, et puis on a notre programme.
<Sync time="3401.755"/>
ok ?
<Sync time="3403.414"/>
donc en général, la phase de traduction du langage algorithmique au langage euh javascript
<Sync time="3408.165"/>
est relativement simple ;
<Sync time="3410.004"/>
ce sera souvent le cas.
<Sync time="3414.215"/>
et
<Sync time="3414.802"/>
je vous rappelle re() pour résoudre un un exercice que vous aurez en face de vous, il faut se souvenir de
<Sync time="3419.777"/>
saisie, calcul, affichage et puis c'est bon.
<Sync time="3422.845"/>
les éléments de syntaxe sont automatiques ensuite.
<Sync time="3427.705"/>
allez
<Sync time="3428.570"/>
on a encore le temps de parler de variables.
<Sync time="3434.628"/>
donc les variables,
<Sync time="3438.260"/>
on va voir qu'elles portent un nom, qu'elles ont un type
<Sync time="3440.824"/>
et puis on va voir deux, trois petites choses sur les variables.
<Sync time="3445.540"/>
mais à quoi servent les variables ?
<Sync time="3450.655"/>
bah elles servent tout simplement
<Sync time="3452.297"/>
à accéder à la mémoire de l'ordinateur. c'est tout bête mais euh
<Sync time="3457.244"/>
on a envie de () on on a envie de mémoriser des choses.
<Sync time="3461.579"/>
et qu'est-ce que c'est que la mémoire d'or() euh d'un ordinateur ? ben c'est un
<Sync time="3465.358"/>
un très grand espace, mais vraiment 
<Event desc="pi" type="pronounce" extent="instantaneous"/>
 on peut imaginer un très grand espace
<Sync time="3470.302"/>
qu'on a découpé en cases.
<Sync time="3476.400"/>
le très grand espace en fait il est il est même bizarre parce que
<Sync time="3480.373"/>
c'est pas un grand espace, c'est une grande suite d'interrupteurs
<Sync time="3483.120"/>
allumés ou éteints, la mémoire.
<Sync time="3486.204"/>
dans le temps, la mémoire c'était des é() des ampoules, hein
<Sync time="3489.27"/>
ou c'était des trous percés sur une carte perforée :
<Sync time="3491.495"/>
percé, pas percé, percé, pas percé, percé, percé, pas percé.
<Sync time="3495.961"/>
donc on a toujours cette image-là :
<Sync time="3498.126"/>
un une mémoire d'ordinateur, c'est un très grand ensemble d'interrupteurs
<Sync time="3503.459"/>
ouverts ou éteints.
<Sync time="3505.176"/>
ok ?
<Sync time="3508.369"/>
bon bah tous ces interrupteurs
<Sync time="3511.277"/>
portent un numéro :
<Sync time="3513.253"/>
l'interrupteur un milliard quatre cent soixante-dix-huit mille
<Sync time="3516.311"/>
est éteint,
<Sync time="3519.670"/>
le cent vingt-sept millionième est allumé ;
<Sync time="3522.02"/>
et cetera, et cetera. donc elles se () elles portent toutes un nom,
<Sync time="3524.870"/>
ces cases, qu'on appelle une adresse.
<Sync time="3527.501"/>
ça, c'est pour s'y retrouver.
<Sync time="3531.059"/>
et évidemment, on peut consulter
<Sync time="3534.1"/>
on peut lire le contenu d'un d'une case, l'état d'un interrupteur
<Sync time="3537.871"/>
et on peut
<Sync time="3539.096"/>
le modifier,
<Sync time="3540.550"/>
sinon on pourrait rien faire avec un ordinateur.
<Sync time="3543.506"/>
bah on peut le faire dès qu'on connaît l'adresse,
<Sync time="3546.340"/>
*alors de manière un peu moins
<Sync time="3549.307"/>
textuelle
<Sync time="3550.872"/>
bon la mémoire de l'ordinateur, pour ceux qui ont déjà démonté un ordinateur, ça ressemble à ça :
<Sync time="3555.054"/>
ça, c'est une barrette mémoire ;
<Sync time="3556.435"/>
c'est l'ensemble de tous les petits interrupteurs.
<Sync time="3560.845"/>
de manière un peu plus imagée
<Sync time="3563.343"/>
et un peu plus utile pour nous,
<Sync time="3565.667"/>
ça peut être représenté comme une s() longue longue suite
<Sync time="3569.128"/>
de cases qui contiennent ()
<Sync time="3571.468"/>
alors là j'ai mis des nombre
<Sync time="3573.790"/>
parce que on est () j'ai pas dessiné des interrupteurs,
<Sync time="3576.610"/>
mais euh c'est une longue suite de cases qui contiennent des nombres.
<Sync time="3580.323"/>
on va garder ça en tête.
<Sync time="3583.660"/>
on garde ça en tête, ça contient des nombres ?
<Sync time="3586.230"/>
en fait on va voir que
<Sync time="3587.725"/>
c'est pas grave qu'on parle de nombres
<Sync time="3589.980"/>
parce que on peut passer de nombres
<Sync time="3592.790"/>
à des suites de zéros et de uns.
<Sync time="3595.405"/>
et on peut passer de suites de zéros et de uns à des nombres.
<Sync time="3600.623"/>
donc euh
<Sync time="3603.310"/>
si on sait stocker des zéros et des uns, on sait stocker des entiers ; si on sait stocker des entiers, on peut presque tout stocker.
<Sync time="3609.389"/>
on verra comment.
<Sync time="3611.634"/>
donc schématiquement, c'est des entiers.
<Sync time="3613.941"/>
c'est des cases qui contiennent des entiers.
<Sync time="3617.155"/>
ces cases, elles ont des numéros
<Sync time="3619.572"/>
alors j'ai mis des numéros
<Sync time="3620.849"/>
j'ai pas fait exprès de prendre des numéros très très longs,
<Sync time="3623.125"/>
j'ai juste demandé à l'ordinateur de me donner
<Sync time="3626.713"/>
la case de
<Sync time="3629.068"/>
d'une euh variable que j'avais définie, puis la k() suivante, puis la suivante, et cetera.
<Sync time="3634.244"/>
et vous pouvez voir que ce sont des très grands nombres
<Sync time="3638.083"/>
c'est pas des très grands nombres parce que on fait exprès de prendre des *grands grands nombres au hasard, c'est des très grands nombres parce qu'il y en a vraiment beaucoup,
<Sync time="3644.739"/>
des cases mémoires.
<Sync time="3648.390"/>
et comme il y en a vraiment beaucoup,
<Sync time="3653.037"/>
c'est inconcevable de se dire : je vais modifier la case numéro ()
<Sync time="3657.684"/>
je sais même pas lire ce nombre
<Sync time="3661.940"/>
des milliards de milliards
<Sync time="3665.034"/>
donc je dis pas ça.
<Sync time="3667.958"/>
il y a un processus d'association
<Sync time="3670.803"/>
entre des noms
<Sync time="3674.160"/>
et des cases mémoires.
<Sync time="3676.656"/>
voilà, c'est fait comme ça.
<Sync time="3678.185"/>
en fait il y a une partie de la mémoire qui est réservée pour construire un petit () une petite table d'association entre des noms
<Sync time="3683.311"/>
et des cases mémoires.
<Sync time="3685.144"/>
c'est transparent pour vous, hein.
<Sync time="3687.257"/>
c'est ce qui se passe quand vous faites var
<Sync time="3689.330"/>
année
<Sync time="3691.200"/>
dès que vous faites var année, ça crée une petite case année
<Sync time="3693.758"/>
et ça crée une association entre année et une case mémoire.
<Sync time="3699.103"/>
l'endroit où ça se trouve dans la mémoire, je m'en fous.
<Sync time="3702.645"/>
que ce soit () les variables soient l'une à côté de l'autre, qu'elles soient pas l'une à côté l'autre,
<Sync time="3706.658"/>
c'est pas mon problème.
<Sync time="3708.071"/>
c'est l'ordinateur qui gère tout ça.
<Sync time="3710.029"/>
moi, je veux juste savoir qu'il y a une variable année, une variable âge, une variable x, et cetera et cetera.
<Sync time="3715.456"/>
donc qu'est-ce que c'est qu'une variable ?
<Sync time="3717.752"/>
de manière un peu plus concrète,
<Sync time="3719.49"/>
c'est un nom qu'on a attribué à une
<Sync time="3723.442"/>
à une case, si ça stocke un entier, ou à un ensemble de cases
<Sync time="3726.587"/>
si ça stocke des réels ou autre chose.
<Sync time="3728.596"/>
donc on a peut-être () on n'avait pas besoin d'avoir plusieurs cases pour représenter la même euh pour représenter une valeur, mais c'est pas grave.
<Sync time="3734.707"/>
c'est toujours une association entre un nom
<Sync time="3736.437"/>
et un ensemble de cases mémoires.
<Sync time="3739.501"/>
tout ça pour simplifier l'accès à la mémoire ;
<Sync time="3743.800"/>
l'accès en lecture et en écriture.
<Sync time="3755.070"/>
c'est bon ?
<Sync time="3761.471"/>
alors
<Sync time="3764.307"/>
les variables,
<Sync time="3766.614"/>
elles sont donc caractérisées par un nom.
<Sync time="3770.562"/>
ce qu'il faut retenir, c'est que si on nomme, c'est pour abstraire un petit peu le () s() s'abstraire de l'architecture de l'ordinateur.
<Sync time="3778.265"/>
cet ordinateur-là n'a pas la même représentation en mémoire que un pc euh que je ne vois pas
<Sync time="3784.868"/>
ou que mon téléphone.
<Sync time="3787.05"/>
nous on s'en on s'en moque qu'on soit sur un pc, sur un mac ou sur un téléphone :
<Sync time="3790.853"/>
on veut avoir un accès à la mémoire.
<Sync time="3793.372"/>
voilà, donc nommer c'est abstraire ;
<Sync time="3794.789"/>
c'est s'abstraire de cette architecture.
<Sync time="3797.067"/>
ça possède un type
<Sync time="3799.932"/>
le type de ce qui est stocké dans la variable, donc ça () on a vu que ça pouvait être des entiers,
<Sync time="3805.039"/>
ça pouvait être des zéros et des uns aussi, des booléens ;
<Sync time="3807.78"/>
ça pouvait être des chaînes de caractères
<Sync time="3810.099"/>
qu'est-ce que ça décrit ?
<Sync time="3811.512"/>
qu'est-ce que décrit le type ?
<Sync time="3813.366"/>
bah il décrit d'une part
<Sync time="3815.2"/>
le nombre de cases
<Sync time="3817.05"/>
physiques
<Sync time="3818.884"/>
nécessaires pour stocker la valeur.
<Sync time="3821.150"/>
il y a besoin de plus de cases pour stocker un nombre réel qu'un nombre entier.
<Sync time="3829.647"/>
euh
<Sync time="3830.801"/>
et les types
<Sync time="3833.375"/>
il y aura trois grandes familles
<Sync time="3835.35"/>
dans un premier temps : il y aura les types numériques, nombres entiers ou réels,
<Sync time="3839.305"/>
il y aura les chaînes de caractères et il y aura les booléens.
<Sync time="3841.388"/>
et puis plus tard,
<Sync time="3842.877"/>
on en abordera d'autres.
<Sync time="3845.877"/>
voilà, donc une variable c'est pas fini
<Sync time="3847.585"/>
il y a une troisième chose, c'est une variable courante : c'est l'é() dans quel état est la mémoire.
<Sync time="3852.626"/>
bon
<Sync time="3856.293"/>
juste u() en passant, une petite remarque et puis ce sera euh je m'arrêterai là-dessus :
<Sync time="3860.561"/>
euh on donne un nom
<Sync time="3863.311"/>
mais on va vous demander de programmer en binômes des projets donc il y a un jour
<Sync time="3867.610"/>
il faudra se poser la question de ce qui se passe quand deux membres
<Sync time="3870.351"/>
ne se parlent pas
<Sync time="3871.783"/>
et donnent euh le même nom à une variable.
<Sync time="3873.864"/>
ça posera des problèmes,
<Sync time="3875.681"/>
et les problèmes
<Sync time="3876.820"/>
sont résolus évidemment, on expliquera comment.
<Sync time="3879.585"/>
voilà, donc on se revoit demain matin
</Turn>
</Section>
</Episode>
</Trans>

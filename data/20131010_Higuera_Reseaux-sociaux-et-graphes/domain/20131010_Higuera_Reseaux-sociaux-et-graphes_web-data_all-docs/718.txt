https://www.theses.fr/2017NORMC203.pdf

Th√®se de doctorat

THESE

Pour obtenir le dipl√¥me de doctorat 

Sp√©cialit√© : Informatique et applications

Pr√©par√©e au sein de l'Universit√© de Caen Normandie

Caract√©riser et d√©tecter les communaut√©s

Titre de la th√®se

dans les r√©seaux sociaux
Pr√©sent√©e et soutenue par

Jean CREUSEFOND

Mme. Anne BOYER

Mr. Christoph D√úRR

Mr. Thomas LARGILLIER

Mr. Matthieu LATAPY

Mr. Sylvain PEYRONNET

Mr. Marc SPANIOL

Mr. Emmanuel VIENNET

Th√®se soutenue publiquement le 17/01/2016

devant le jury compos√© de

Professeur des Universit√©s
Universit√© de Nancy 2, LORIA
Directeur de recherche CNRS
Universit√© de Pierre et Marie Curie, LIP6
Ma√Ætre de conf√©rences
Universit√© de Caen Normandie, GREYC
Directeur de recherche CNRS
Universit√© de Pierre et Marie Curie, LIP6
Professeur des Universit√©s
Universit√© de Caen Normandie, GREYC
Professeur des Universit√©s
Universit√© de Caen Normandie, GREYC
Professeur des Universit√©s
Universit√© Paris 13, L2TI

Rapporteuse

Examinateur

Examinateur

Rapporteur

Directeur

Examinateur

Examinateur

Th√®se dirig√©e par Sylvain Peyronnet, laboratoire GREYC

Remerciements

Tout d'abord, j'aimerais remercier Sylvain Peyronnet et Thomas Largillier
pour leur encadrement tout au long de cette th√®se. Sans leur patience, leur
sinc√©rit√© et leur implication, cette th√®se n'aurait jamais vu le jour. Sylvain,
Thomas, je vous dois beaucoup.

Je remercie aussi Christoph D√ºrr et Emmanuel Viennet d'avoir accept√©
de faire partie de mon jury, et Marc Spaniol de le pr√©sider. En plus d'√™tre
membres de mon jury, Anne Boyer et Matthieu Latapy m'ont fait l'honneur
de rapporter ma th√®se, et je les en remercie profond√©ment.

Je souhaite aussi mentionner les interlocuteurs avec lesquels j'ai eu des
discussions qui ont √©t√©s des points clef lors de ce doctorat. Gaetan Richard,
merci pour ta curiosit√© insatiable et ton entrain √† toute √©preuve. Lo√Øc Lhote,
merci pour ton humour noir et ton enthousiasme. Michel Habib, merci pour
tes id√©es ing√©nieuses et tes projets innovants. Nicolas Bacquey, merci pour
ton regard critique et ton point de vue formel. Marc Spaniol, merci pour tes
propositions pertinentes et ton int√©r√™t qui m'a beaucoup encourag√©.

J'ai aussi re√ßu beaucoup d'aide pour louvoyer dans l'administration. Merci
√† Julien Cl√©ment pour son soutien au niveau de l'√©quipe AMACC, Marie
Meleux pour sa patience envers mon cas atypique pour l'√©cole doctorale et
Arielle Perette pour sa gestion du labo.

Certaines personnes furent un soutien indispensable dans mon quotidien.
Sans ordre particulier, je souhaiterais remercier Nicolas et Yohann Bacquey,
Alexandre Letois, L√©na Coms, Axel Huet, Laureen Collette, Yohann Troude,
Emily Abbott et Thibaut Vall√©e. Je remercie enn toute ma famille pour son
soutien inconditionnel et total.

Je remercie ensuite tous ceux que j'ai oubli√© de remercier : toutes ces
discussions rapides dans les couloirs, ou enamm√©es lors de colloques, toutes
ces rencontres √©ph√©m√®res et tous ces amis lointains. Vous avez apport√©, √†
votre mani√®re, une pierre √† mon modeste √©dice.

Enn, merci √† toi lecteur de cette th√®se, de t'int√©resser √† mon travail de

recherche. Ton regard critique lui donne un sens et une raison d'exister.

J. Creusefond

i

ii

J. Creusefond

Table des mati√®res

1 Introduction

1

2 Rappels

7
7
2.1 √âl√©ments de th√©orie des graphes . . . . . . . . . . . . . . . . .
9
2.1.1 Chemins . . . . . . . . . . . . . . . . . . . . . . . . . .
2.1.2 Partitions et couvertures . . . . . . . . . . . . . . . . .
9
2.1.3 Parcours et marches al√©atoires . . . . . . . . . . . . . . 10
2.2 R√©seaux sociaux . . . . . . . . . . . . . . . . . . . . . . . . . . 14
2.3 Fonctions de qualit√©
. . . . . . . . . . . . . . . . . . . . . . . 15
2.4 Algorithmes de d√©tection de communaut√© . . . . . . . . . . . . 19
. . . . . . . . . . . . . . 19
2.4.1
2.4.2 Algorithmes . . . . . . . . . . . . . . . . . . . . . . . . 20
2.5 M√©thodes de comparaison . . . . . . . . . . . . . . . . . . . . 22

Strat√©gies de partitionnement

3 √âtude de la structure communautaire de r√©seaux de commu-

25
nication par les motifs temporels
3.1 Adaptation des motifs aux p√©riodes d'activit√©
. . . . . . . . . 29
3.2 Experiences . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32
3.2.1 Analyse des propri√©t√©s des a-motifs . . . . . . . . . . . 34
3.2.2 Etude de la relation entre a-motifs et communaut√©s . . 37

4 Une nouvelle fonction de qualit√© : la compacit√©

41

4.1 Mod√©lisation et d√©nition d'une structure communautaire com-

pacte . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42
4.2 Respect des axiomes de Van Laarhoven et Marchiori . . . . . . 45

5 Une m√©thode de d√©tection de communaut√©s bas√©e sur l‚Äôalgo-

rithme du LexDFS
55
5.1 Un algorithme de partitionnement bas√© sur le LexDFS . . . . 56
5.2 √âvaluation exp√©rimentale du Lex-Clusering . . . . . . . . . . . 60
5.2.1 Vitesse de convergence du Lex-Clustering . . . . . . . . 61

J. Creusefond

iii

5.2.2 √âtude des  clusters  individuels . . . . . . . . . . . . 62
5.2.3 √âtude des partitions
. . . . . . . . . . . . . . . . . . . 68
5.2.4 Comparaison avec des v√©rit√©s de terrain . . . . . . . . . 71

6 L‚Äô√©valuation de structures communautaires

73
6.1 M√©thodologie exp√©rimentale . . . . . . . . . . . . . . . . . . . 75
6.2 Param√®tres exp√©rimentaux . . . . . . . . . . . . . . . . . . . . 76
6.3 Optimisations . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
6.4 R√©sultats . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80

7 CoDACom : une bo√Æte √† outils pour la d√©tection de commu-

naut√©s
87
7.1 Utilisation et fonctionnalit√©s . . . . . . . . . . . . . . . . . . . 88
7.2 Travaux connexes . . . . . . . . . . . . . . . . . . . . . . . . . 97

8 Conclusion

99
8.1 A-motifs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
8.2 Lex-Clustering et compacit√© . . . . . . . . . . . . . . . . . . . 100
8.3 Fonctions de qualit√© et v√©rit√©s de terrain . . . . . . . . . . . . 101

A D√©marches et description du r√©seau d‚Äôe-mails de l‚Äôuniversit√©

de Caen

103

iv

J. Creusefond

Chapitre 1

Introduction

En 2016, il y a plus de 1,71 milliards de comptes actifs sur un r√©seau
social comme Facebook 1. Le nombre d'inscrits sur les r√©seaux sociaux sur le
web augmente de deux cent millions par an depuis 2010 2. L'augmentation du
nombre de comptes entraine m√©caniquement une augmentation du volume
de donn√©es produit. La probl√©matique de la volum√©trie des donn√©es est au
coeur des challenges algorithmiques li√©s aux r√©seaux sociaux.

La taille des r√©seaux sociaux complique leur analyse. Pour pallier ce pro-
bl√®me, plusieurs m√©thodes sont envisageables, l'une d'elles est de partitionner
les r√©seaux sociaux en √©l√©ments plus petits. Ce partitionnement permet alors,
dans l'id√©al, de comprendre le comportement global du syst√®me en analysant
localement les √©l√©ments qui le composent et leurs comportements. Dans cette
th√®se, je m'int√©resse au partitionnement de r√©seaux sociaux en sous-groupes
d'individus le composant.

J'ai choisi de travailler avec une repr√©sentation usuelle des r√©seaux so-
ciaux : le graphe. Un graphe est un ensemble d'entit√©s et d'interactions (on
parle traditionnellement de noeuds et d'ar√™tes). Dans les r√©seaux sociaux
web, ces interactions sont repr√©sent√©es explicitement. Par exemple, sur Face-
book on se d√©clare ami d'une personne tandis que sur Twitter on suit son l
d'actualit√©. La Fig. 1.1 illustre un extrait du r√©seau de Facebook [65] repr√©-
sent√© sous forme de graphe. Les objets d'√©tude principaux de ma th√®se sont
les structures form√©es par ces interactions. Elles permettent de caract√©riser
des groupes d'individus.

Seule une fraction de l'activit√© des individus dans les r√©seaux sociaux est
repr√©sent√©e par ce mod√®le. En eet, dans ce mod√®le, on ne fait pas appara√Ætre

1. https://investor.fb.com/investor-news/press-release-details/2016/

Facebook-Reports-Second-Quarter-2016-Results/default.aspx

2. https://www.statista.com/statistics/278414/number-of-worldwide-

social-network-users/

J. Creusefond

1

Chapitre 1. Introduction

Figure 1.1  Un extrait de Facebook [65] sous forme de graphe : 4 039
utilisateurs et leurs 88 234 relations d'amiti√©.

le contenu des messages, le temps en ligne, ou m√™me la nature multiple des
relations (travail, amis, famille, etc.). Cependant, r√©duire le r√©seau de cette
mani√®re permet d'observer et d'interpr√©ter des caract√©ristiques de la struc-
ture. Voici par exemple quelques observations que l'on peut r√©aliser √† partir
de la gure Fig. 1.1 :

1. Certains individus sont √† la jonction de di√©rentes parties du r√©seau.
C'est par exemple le cas du noeud entour√© en rouge. Cette position
centrale permet d'agr√©ger l'information de plusieurs groupes distincts
et donne la possibilit√© de contacter indirectement beaucoup d'indivi-
dus [41].

2. On peut aussi remarquer que, m√™me s'il y a plus de quatre mille indivi-
dus dans le r√©seau, le nombre d'interm√©diaires pour aller de n'importe
quel individu √† un autre est faible, moins d'une dizaine. Une informa-
tion peut ainsi emprunter un chemin court pour aller d'un point √† un
autre du r√©seau et donc se propager rapidement [24].

3. On observe que les individus forment des groupes, comme ceux en-
tour√©es en bleu. Il s'agit de parties du r√©seau constitu√©es d'ensembles
d'individus ayant beaucoup de contacts entre eux. Il y a souvent une
raison sociale √† l'existence de ces groupes dans notre mod√®le [39].

De nombreux domaines applicatifs sont bas√©s sur les caract√©ristiques sous-
jacentes associ√©es √† ces trois observations [6, 7]. Les travaux de cette th√®se

2

J. Creusefond

portent tous sur la notion de groupe, esquiss√©e dans la troisi√®me observation
ci-dessus.

L'objectif de la d√©tection de communaut√©s est la d√©tection de ces groupes.
Il n'y a pas de consensus sur la d√©nition de ce qu'est une communaut√©. Il
est cependant commun√©ment admis qu'il s'agit d'une partie dense du graphe
repr√©sentant le r√©seau social [36].

Un grand nombre d'application r√©elles utilise des algorithmes de d√©tection
de communaut√©s : recherche d'organisations criminelles [33], d√©tection de
 spam  [12], syst√®mes de recommandation [84], etc. D'autres disciplines
scientiques utilisent la d√©tection de communaut√©s pour mieux comprendre
la structure des objets √©tudi√©s. C'est le cas de la sociologie [93] et de la
biologie [32] par exemple.

Du fait de la vari√©t√© des communaut√©s recherch√©es, les d√©nitions de la
communaut√© sont multiples. Par exemple, une entreprise cherchant √† diu-
ser un message publicitaire dans certaines communaut√©s sera int√©ress√©e par
les facteurs facilitant la transmission. Dans un autre contexte, la d√©tection
des communaut√©s de  spammers  utiliserait des crit√®res de coh√©sion in-
terne, o√π les membres d'une communaut√© doivent avoir des caract√©ristiques
proches [60].

Girvan et Newman [39] d√©nissent une communaut√© comme un ensemble
d'entit√©s au sein duquel il y a plus de relations internes qu'externes. Ra-
dicchi et al. [81] ajoutent √† cette d√©nition la contrainte que les individus
d'une communaut√© ont plus de voisins √† l'int√©rieur de leur communaut√© qu'√†
l'ext√©rieur. Ils appellent ces structures les communaut√©s fortes.

Ces d√©nitions sont binaires : elles n'apportent pas de gradation quant au
respect des propri√©t√©s recherch√©es. An de permettre plus de souplesse, on
peut concevoir des fonctions attribuant un score aux groupes. On appelle ces
fonctions des fonctions de qualit√©. Elles quantient les propri√©t√©s consid√©r√©es
comme importantes pour l'application. Les fonctions de qualit√© peuvent √™tre
vues comme une extension des d√©nitions. Newman et Girvan ont revisit√©
leur d√©nition pour cr√©er une fonction de qualit√© [75], la modularit√©.

Les fonctions de qualit√© sont plus exibles que les d√©nitions binaires.
En eet, elles permettent d'obtenir une pr√©f√©rence entre des communaut√©s
ainsi qu'entre des partitions du graphe. De nombreux algorithmes [20, 78]
cr√©ent initialement une partition triviale (une communaut√© par individu, par
exemple) et am√©liorent cet √©tat par des op√©rations locales qui augmentent
la valeur de la fonction de qualit√©. Les fonctions de qualit√© servent aussi √†
l'√©valuation des partitions [43]. Pour √©valuer un algorithme de d√©tection de
communaut√©s, on proc√©dera √† l'√©valuation des partitions qu'il calcule.

En plus des fonctions de qualit√©, les chercheurs utilisent fr√©quemment des
jeux de donn√©es extraits de la r√©alit√© pour √©valuer les structures communau-

J. Creusefond

3

Chapitre 1. Introduction

taires (par exemple [52, 79]). Ces jeux de donn√©es d√©crivent des structures
assimil√©es √† des communaut√©s, par exemple des domaines de recherche dans
des r√©seaux de chercheurs [16]. L'√©valuation consiste alors √† √©valuer la proxi-
mit√© entre partitions et donn√©es.

Les probl√©matiques au coeur de cette th√®se sont les suivantes :

 La diusion de l'information sur les r√©seaux sociaux est tr√®s proche
de mod√®les infectieux. Est-il possible de s'inspirer de ces mod√®les pour
d√©tecter les communaut√©s ?

 Les fonctions de qualit√© et les jeux de donn√©es sont utilis√©s pour √©valuer
les partitions de deux mani√®res di√©rentes. Quel est le lien entre les deux
m√©thodes √©valuatives ?

 Les communaut√©s ont √©t√© assez peu caract√©ris√©es dans le cas o√π le r√©-
seau correspond √† un ensemble de messages. Dans ces r√©seaux, je m'in-
t√©resse aux messages li√©s causalement, comme dans une conversation.
La structure communautaire a-t-elle une inuence sur la fa√ßon dont les
messages s'enchainent ?

Les contributions de cette th√®se sont les r√©ponses √† ces probl√©matiques.

Le chapitre 2 contient les notions n√©cessaires √† la lecture de cette th√®se.
J'y pr√©sente d'abord les notions fondamentales de la th√©orie des graphes puis
les propri√©t√©s classiques des r√©seaux sociaux. Enn, j'y d√©cris l'ensemble des
algorithmes de d√©tection de communaut√©s, fonctions de qualit√© et m√©thodes
de comparaison que j'utilise dans ce manuscrit.

Le chapitre 3 pr√©sente une √©tude exp√©rimentale des r√©seaux form√©s par
des messages. Les exp√©riences qui y sont men√©es ont pour but de d√©terminer
le lien entre la structure communautaire et les messages li√©s causalement.

Le chapitre 4 introduit une nouvelle fonction de qualit√© : la compacit√©. Elle
est bas√©e sur les propri√©t√©s d'un mod√®le simple de diusion de l'information.
Cette fonction mesure dans ce mod√®le le taux de propagation d'un message
dans une communaut√©. Une forte compacit√© implique que l'information se
propage rapidement dans la communaut√©.

Le chapitre 5 contient un nouvel algorithme de d√©tection de communaut√©s.
Celui-ci repose sur un algorithme de parcours de graphes visitant les zones
denses les unes apr√®s les autres. Cet algorithme cr√©e des  clusters  compacts.
Le chapitre 6 pr√©sente une √©tude sur la correspondance entre l'√©valuation
par les fonctions de qualit√© et la comparaison aux jeux de donn√©es. J'y d√©-
nis la notion de contexte, c'est-√†-dire d'ensemble de jeux de donn√©es qui se
comportent de mani√®re similaire au regard des fonctions de qualit√©.

4

J. Creusefond

Le chapitre 7 pr√©sente un outil d√©velopp√© dans le cadre de cette th√®se :
CoDACom 3 ( Community Detection Algorithme Comparator ). Cet ou-
til permet d'analyser des algorithmes de d√©tection de communaut√©s et des
fonctions de qualit√©. CoDACom a plusieurs objectifs : analyser de nouveaux
algorithmes, tester un algorithme connu dans un cas d'√©tude nouveau, et
√©valuer les m√©thodes d'analyse.

Enn, le chapitre 8 conclut la th√®se et ouvre quelques perspectives.

3. http://codacom.greyc.fr

J. Creusefond

5

Chapitre 1. Introduction

6

J. Creusefond

Chapitre 2

Rappels

Dans ce chapitre, je rappelle les notions essentielles √† la lecture de cette
th√®se. J'introduis d'abord les concepts fondamentaux de la th√©orie des graphes,
utilis√©s ici pour repr√©senter et manipuler les r√©seaux sociaux. Je pr√©sente en-
suite les propri√©t√©s structurelles connues des r√©seaux sociaux. Enn je pr√©-
sente l'√©tat de l'art des algorithmes de d√©tection de communaut√©s, fonctions
de qualit√© et m√©thodes de comparaison.

2.1 √âl√©ments de th√©orie des graphes

Dans cette section, je pr√©sente les d√©nitions de quelques √©l√©ments de

th√©orie des graphes. Les notations utilis√©es sont list√©es Tab. 2.1 page 13.

D√©finition 2.1 (Graphe). Un graphe ùê∫ = (ùëâ, ùê∏) est un ensemble ùëâ de
noeuds et un ensemble ùê∏ ‚äÜ ùëâ √ó ùëâ d‚Äôar√™tes entre ces noeuds.

Sauf mention contraire, je consid√®re des graphes non orient√©es, c'est-√†-
dire que pour tout ùë¢, ùë£ ‚àà ùëâ , (ùë¢, ùë£) est indistinguable de (ùë£, ùë¢). Les graphes
utilis√©s sont sans boucle, c'est-√†-dire : ‚àÄùë¢ ‚àà ùëâ , (ùë¢, ùë¢) /‚àà ùê∏. Par convention,
je note ùëõ = |ùëâ | le nombre de noeuds et ùëö = |ùê∏| le nombre d'ar√™tes.
D√©finition 2.2 (Incidence). Une ar√™te (ùë¢, ùë£) ‚àà ùê∏ est dite incidente √† ùë¢ et √†
ùë£, et ces noeuds sont dit voisins.

D√©finition 2.3 (Degr√©). Le degr√© d‚Äôun noeud ùë£ est le nombre d‚Äôar√™tes inci-
dentes √† ce noeud, ùëòùë£ = |{ùëí | ùëí ‚àà ùê∏, ùë£ ‚àà ùëí}|.

Notons que dans la d√©nition 2.3, le degr√© devrait √™tre formellement not√©
ùëòùë£(ùê∫). Cependant, pour simplier la lecture, le graphe ne sera pas mentionn√©
quand il n'y a pas d'ambigu√Øt√©. Dans le cas contraire, le graphe sera pr√©cis√©
en indice. Par exemple, je noterai ùëòùë£,ùê∫ le degr√© du noeud ùë£ dans ùê∫.

J. Creusefond

7

Chapitre 2. Rappels

D√©finition 2.4 (Densit√©). La densit√© d‚Äôun graphe est la probabilit√© que deux
noeuds pris au hasard soient voisins.

Un exemple de graphe est pr√©sent√© Fig. 2.1.

Figure 2.1  Exemple de graphe, repr√©sent√© de mani√®re ensembliste et gra-
phique. Le degr√© de chaque noeud est indiqu√©. La densit√© de ce graphe est
de 0,5.

D√©finition 2.5 (Clique). Une clique est un graphe de densit√© 1. Une k-clique
est une clique ayant ùëò noeuds.

J'utilise parfois des extensions du graphe, comme le graphe orient√© ou le

graphe pond√©r√©.

D√©finition 2.6 (Graphe orient√©). Un graphe orient√© ùê∫ = (ùëâ, ùê∏) est un
graphe pour lequel ‚àÄùë¢,ùë£ ‚àà ùëâ , (ùë¢, ùë£) est distinguable de (ùë£, ùë¢)

Dans un graphe orient√©, on parle d'arc et non d'ar√™te. Dans la suite de ce
manuscrit, je dirai qu'un arc (ùë¢, ùë£) est √©mis par ùë¢ ‚àà ùëâ et est re√ßu par ùë£ ‚àà ùëâ .
D√©finition 2.7 (Graphe pond√©r√©). Un graphe pond√©r√© ùê∫ = (ùëâ, ùë§) est un
ensemble de noeuds ùëâ et une fonction de poids ùë§ : ùëâ √ó ùëâ ‚Üí R qui associe
une valeur r√©elle √† chaque couple de noeuds.

8

J. Creusefond

v1v5v2v3v4G = (V, E)V = {v1,v2,v3,v4,v5}E = {(v1,v2),(v2,v3),(v2,v5),(v3,v4),(v4,v5)}kv1=1kv5=2kv4=2kv3=2kv2=22.1. √âl√©ments de th√©orie des graphes

2.1.1 Chemins

Dans cette th√®se, j'utilise des algorithmes visitant des noeuds de voisins

en voisins. Ces visites successives forment des chemins.
D√©finition 2.8 (Chemin). Un chemin de longueur ùëò ‚àà N+ dans un graphe
est une suite de noeuds ùúã = (ùë£0, . . . , ùë£ùëò) ‚àà ùëâ ùëò+1 respectant ‚àÄùëñ ‚àà [0..ùëò ‚àí
1], (ùë£ùëñ, ùë£ùëñ+1) ‚àà ùê∏.

Je note Œ†(ùë¢,ùë£) l'ensemble des chemins possibles entre ùë¢ et ùë£ et je note

ùëôùëíùëõ(ùúã) la longueur du chemin ùúã.

D√©finition 2.9 (Composante connexe). Une composante connexe d‚Äôun graphe
est un ensemble maximal (au sens du cardinal) de noeuds ùëâ ‚Ä≤ ‚äÜ ùëâ tel que
‚àÄùë¢, ùë£ ‚àà ùëâ ‚Ä≤, Œ†(ùë¢, ùë£) Ã∏= ‚àÖ.

Je traite principalement de graphes connexes, qui ne comportent qu'une

composante connexe.

D√©finition 2.10 (Distance). La distance entre deux noeuds dans la m√™me
composante connexe est ùëëùëñùë†ùë°(ùë¢, ùë£) = min

ùëôùëíùëõ(ùúã).

ùúã‚ààŒ†(ùë¢,ùë£)

D√©finition 2.11 (Excentricit√©). L‚Äôexcentricit√© d‚Äôun noeud dans un graphe
connexe est la distance maximale entre ce noeud et les autres noeuds du
graphe, ùëíùë•ùëê(ùë£) = max
ùë¢‚ààùëâ

ùëëùëñùë†ùë°(ùë¢, ùë£).

D√©finition 2.12 (Diam√®tre). Le diam√®tre d‚Äôun graphe connexe est le maxi-
mum des distances entre les noeuds, ùëëùëñùëéùëö(ùê∫) = max
ùë¢,ùë£‚ààùëâ

ùëëùëñùë†ùë°(ùë¢, ùë£).

2.1.2 Partitions et couvertures

L'objectif de la d√©tection de communaut√©s est de d√©couvrir des groupes
d'individus dans un r√©seau social. Ces groupes sont associ√©s √† des  clusters 
dans le graphe.

D√©finition 2.13 (Cluster). Un ¬´ cluster ¬ª est un ensemble de noeuds non
vide.

Un  cluster  est dit trivial s'il ne contient qu'un noeud.

D√©finition 2.14 (Internalit√©). Une ar√™te (ùë¢, ùë£) ‚àà ùê∏ est dite interne √† un
¬´ cluster ¬ª ùëê si ùë¢ ‚àà ùëê et ùë£ ‚àà ùëê. Elle est dite externe si ùë¢ ‚àà ùëê ou ùë£ ‚àà ùëê.
D√©finition 2.15 (Couverture). Une couverture ùê∂ est un ensemble de ¬´ clus-

ters ¬ª recouvrants ‚ãÉÔ∏Ä

ùëê‚ààùê∂

ùëê = ùëâ .

J. Creusefond

9

Chapitre 2. Rappels

Deux  clusters  ayant un noeud en commun sont dit chevauchants.

D√©finition 2.16 (Partition). Une partition ùê∂ d‚Äôun graphe est une couverture
dont les ¬´ clusters ¬ª sont disjoints : ‚àÄùëê1, ùëê2 ‚àà ùê∂, ùëê1 Ã∏= ùëê2 ‚áí ùëê1 ‚à© ùëê2 = ‚àÖ

Dans cette th√®se, je m'int√©resse aux algorithmes de d√©tections de com-
munaut√© produisant des partitions [36]. Je note toutefois qu'il existe des
algorithmes de d√©tection de communaut√©s produisant des couvertures [102].

D√©finition 2.17 (Sous-graphe induit). Le sous-graphe induit par un ¬´ clus-
ter ¬ª ùëê, est un graphe ùê∫‚Ä≤ = (ùëê, ùê∏‚Ä≤) o√π ùê∏‚Ä≤ = ùëê2 ‚à© ùê∏.

J'√©tends aux  clusters  les d√©nitions propres aux graphes, comme la
connexit√© ou le diam√®tre. Ces fonctions sont alors √† appliquer au sous-graphe
induit par le  cluster .

J'√©tudie syst√©matiquement des  clusters  connexes.

D√©finition 2.18 (Graphe quotient). Le graphe quotient associ√© √† la partition
ùê∂ d‚Äôun graphe ùê∫ = (ùëâ, ùê∏) est un graphe pond√©r√© ùê∫‚Ä≤ = (ùê∂, ùë§) tel que ‚àÄùëê1, ùëê2 ‚àà
ùê∂, ùë§(ùëê1, ùëê2) = |{(ùëé, ùëè) | (ùëé, ùëè) ‚àà ùê∏, ùëé ‚àà ùëê1, ùëè ‚àà ùëê2}|.

2.1.3 Parcours et marches al√©atoires

Un parcours de graphe est un chemin visitant chaque noeud du graphe.
Un algorithme de parcours de graphe visite donc s√©quentiellement tous les
noeuds du graphe.

Dans cette th√®se, j'utilise le DFS ( Depth-First Search , parcours en
profondeur) ainsi que le BFS ( Breadth-First Search , parcours en largeur).
Le DFS visite un noeud ùë£ puis choisit comme noeud √† visiter par la suite
l'un des voisins non visit√©s de ùë£. Si tous les voisins de ùë£ ont d√©j√† √©t√©s visit√©s,
le DFS choisit l'un des voisins du noeud pr√©c√©dent, et ainsi de suite. Le DFS
est pr√©sent√© Alg. 1.

Algorithme 1 : DFS(G,s)

Donn√©es : Un graphe ùê∫ et un noeud de d√©part ùë†

1 d√©but

2

3

4

5

10

Marque ùë† comme visit√©
pour ùë£ ‚àà ùë£ùëúùëñùë†ùëñùëõùë†(ùë†) faire

si ùë£ n‚Äôest pas marqu√© comme visit√© alors

DFS(ùê∫, ùë£)

J. Creusefond

2.1. √âl√©ments de th√©orie des graphes

Le BFS place d'abord le noeud d'origine dans une le. √Ä chaque it√©ration,
le BFS va visiter le premier √©l√©ment de la le puis placer tous ses voisins dans
la le, s'ils n'y sont pas d√©j√†. Le BFS est pr√©sent√© Alg. 2.

Algorithme 2 : BFS(G,s)

Donn√©es : Un graphe ùê∫ et un noeud de d√©part ùë†

1 d√©but

2

3

4

5

6

7

8

ùëì ùëñùëôùëí ‚Üê (ùë†)
tant que ùëì ùëñùëôùëí Ã∏= () faire

ùë£ ‚Üê ùëë¬¥ùëíùëì ùëñùëôùëí(ùëì ùëñùëôùëí)
pour ùë¢ ‚àà ùë£ùëúùëñùë†ùëñùëõùë†(ùë£) faire

si ùë¢ n‚Äôest pas marqu√© comme enfil√© alors

marque ùë¢ comme enl√©
ùëíùëõùëì ùëñùëôùëí(ùëì ùëñùëôùëí, ùë¢)

Le BFS visite les noeuds par ordre de distance par rapport au noeud
initial. Le DFS commence par cr√©er un long chemin, puis revient sur ses
pas quand il ne peut plus continuer. Un exemple de l'ex√©cution de ces deux
algorithmes est pr√©sent√© Fig. 2.2

Plusieurs algorithmes de d√©tection de communaut√©s utilisent des marches
al√©atoires uniformes, un processus discret sur le graphe. √Ä chaque instant, un
marcheur est situ√© sur un noeud du graphe. Il se d√©place √† l'instant suivant
uniform√©ment al√©atoirement vers l'un des voisins du noeud sur lequel il est
situ√©. Le chemin form√© est appel√© une marche al√©atoire. Les probabilit√©s de
transition du marcheur al√©atoire sur un graphe sont illustr√©es Fig. 2.3.

J. Creusefond

11

Chapitre 2. Rappels

Figure 2.2  √âtat d'un graphe lors d'une ex√©cution du DFS et du BFS.
Les noeuds bleus repr√©sentent les noeuds visit√©s et les noeuds rouges sont
les derniers noeuds visit√©s. L'it√©ration correspondant √† la visite est indiqu√©e
dans le noeud. Les √©tats successifs du graphe sont repr√©sent√©s de gauche √†
droite.

Figure 2.3  Un graphe et les probabilit√©s de transition d'un marcheur
al√©atoire sur ce graphe.

12

J. Creusefond

123412234DFSBFS11111122233Visite 1Visite 2Visite 3Visite 4‚á®1/31/21/21/21/31/211/32.1. √âl√©ments de th√©orie des graphes

Notation

ùê∫ = (ùëâ,ùê∏ ‚àà {ùë¢,ùë£ | ùë¢ ‚àà ùëâ, ùë£ ‚àà ùëâ })

ùëõ = |ùëâ |
ùëö = |ùê∏|

ùëòùë£ = |{ùëí | ùëí ‚àà ùê∏, ùë£ ‚àà ùëí}|

ùëôùëíùëõ(ùúã) = |ùúã| ‚àí 1

Œ†(ùë¢,ùë£)

ùëëùëñùë†ùë°(ùë¢,ùë£) = min

ùúã‚ààŒ†(ùë¢,ùë£)

ùëôùëíùëõ(ùúã)

ùëíùë•ùëê(ùë£) = max
ùë¢‚ààùëâ
ùëëùëñùëéùëö(ùê∫) = max
ùë¢,ùë£‚ààùëâ

ùëâ ùëúùëô(ùëê) =‚àëÔ∏Ä

ùë£‚ààùëê ùëòùë£

ùëëùëñùë†ùë°(ùë¢,ùë£)

ùëëùëñùë†ùë°(ùë¢,ùë£)

ùëö(ùëê) = |{ùë¢, ùë£ | ùë¢, ùë£ ‚àà ùëê,{ùë¢, ùë£} ‚àà ùê∏}|

ùëö(ùëê, ùëê‚Ä≤) = |{ùëñ, ùëó | (ùëñ, ùëó) ‚àà ùê∏, ùëñ ‚àà ùëê, ùëó ‚àà ùëê‚Ä≤}|

ùëê(ùê∂, ùë£) = {ùëê | ùëê ‚àà ùê∂, ùë£ ‚àà ùëê}

ùíû(ùëâ )

D√©nition

Un graphe, un ensemble ùëâ de

noeuds et un ensemble ùê∏ d'ar√™tes

Le nombre de noeuds
Le nombre d'ar√™tes
Degr√© d'un noeud ùë£

Longueur d'un chemin ùúã

L'ensemble des chemins allant de

ùë¢ √† ùë£

Distance entre deux noeuds ùë¢ et ùë£

Excentricit√© du noeud ùë£
Diam√®tre d'un graphe ùê∫
La somme des degr√©s d'un

 cluster 

Le nombre d'ar√™tes internes d'un

 cluster 

Le nombre d'ar√™tes entre les

 clusters  ùëê et ùëê‚Ä≤

Le  cluster  dans lequel appara√Æt

le noeud ùë£ dans la partition ùê∂
Ensemble des partitions d'un

ensemble ùëâ

Table 2.1  Notations

J. Creusefond

13

Chapitre 2. Rappels

2.2 R√©seaux sociaux

Un  r√©seau social  est un r√©seau ayant √©t√© cr√©√© par des interactions so-
ciales [31]. Il existe di√©rentes cat√©gories de r√©seaux sociaux. Dans les graphes
repr√©sentant ces r√©seaux, les individus correspondent aux noeuds et leurs in-
teractions correspondent aux ar√™tes. Je distingue les interactions bilat√©rales,
n√©cessitant l'accord des deux individus pour √™tre √©tablie, des interactions
unilat√©rales.
Les r√©seaux sociaux web permettent d'√©tablir explicitement des relations
entre les utilisateurs. Les relations dans certains de ces sites web sont
bilat√©rales. C'est par exemple le cas de Facebook. Dans d'autres r√©-
seaux comme Twitter ou Youtube, la relation sociale est √©tablie de
mani√®re unilat√©rale par le  follow  (le fait de suivre les publications
de quelqu'un). Deux individus sont voisins dans le graphe associ√© si une
relation existe entre les deux.

Les r√©seaux de communication sont form√©s par des transmissions d'in-
formation entre individus. On retrouve la m√™me distinction entre uni-
lat√©ralit√© (comme pour les e-mails et les SMS) et bilat√©ralit√© (appels
t√©l√©phoniques et vid√©oconf√©rences). Deux individus sont voisins dans le
graphe associ√© s'ils ont communiqu√© en utilisant ce r√©seau.

Les r√©seaux de collaboration correspondent √† des individus ayant tra-
vaill√© ensemble sur un sujet. On y trouve par exemple des r√©seaux
d'acteurs ayant tourn√© des lms ensemble ou des scientiques ayant co-
√©crit des articles. Les relations dans ce type de r√©seau sont bilat√©rales.
Deux individus sont voisins dans le graphe associ√© s'ils ont collabor√©.

On a observ√© des caract√©ristiques communes aux graphes repr√©sentant les

r√©seaux sociaux.

Tout d'abord, ces graphes sont d'une densit√© faible. Les mod√®les clas-
siques supposent m√™me un degr√© moyen constant [98, 8]. Leskovec et al. [62]
nuancent cette supposition en observent sur des r√©seaux √©voluant au court
du temps que ùëö ‚àà ùí™(ùëõùëé), avec ùëé mesur√© entre 1,05 et 1,68.

Ensuite, on observe que les distances dans ces graphes sont courtes [61].
Ainsi, en passant de voisin en voisin, il est possible d'atteindre n'importe quel
autre point du graphe en un nombre faible d'interm√©diaires, m√™me si le graphe
en question a beaucoup de noeuds. Ils s'agit de l'une des caract√©ristiques des
graphes petit monde [70].

La distribution du degr√© des noeuds est proche d'une loi de puissance [8].
La probabilit√© qu'un noeud al√©atoire du graphe soit de degr√© ùëò est proche de
ùëò‚àíùõæ, avec ùõæ d√©pendant du graphe, le plus souvent entre 2 et 4. Cette loi de

14

J. Creusefond

2.3. Fonctions de qualit√©

probabilit√© a pour cons√©quence qu'il existe une grande diversit√© des degr√©s
des noeuds, avec quelques noeuds √† degr√© tr√®s important et un grand nombre
de noeuds √† degr√© faible.

Une propri√©t√© sociologique importante dans les r√©seaux sociaux est l'ho-
mophilie [68] : les individus connaissent des personnes qui leur sont similaires.
La cons√©quence structurelle est que l'on observe beaucoup de triangles, c'est-
√†-dire des triplets d'individus formant des 3-cliques. En eet, si deux indivi-
dus ùëé et ùëè se connaissent, et que ùëê conna√Æt ùëé mais pas de ùëè, ùëê a la volont√© et
l'occasion de former un lien avec ùëè :

 Si ùëé et ùëè sont similaires, et que ùëé et ùëê sont similaires, il est probable

que ùëê soit similaire √† ùëè.

 Du fait de la relation de ùëê avec ùëé, ùëê a l'opportunit√© de former un lien

avec ùëè.

Cette propri√©t√© explique aussi l'apparition de sous-graphes denses dans les
r√©seaux sociaux.

2.3 Fonctions de qualit√©

Dans cette section, je d√©cris les fonctions de qualit√© que j'utilise pour

√©tudier les communaut√©s.

Yang et Leskovec [103] ont d√©ni quatre caract√©ristiques qu'ils estiment

axiomatiquement  d√©sirables  dans les communaut√©s recherch√©es.

 La densit√© interne : les noeuds √† l'int√©rieur de la communaut√© sont tr√®s

connect√©s entre eux.

 La s√©parabilit√© : la communaut√© pr√©sente des caract√©ristiques di√©-
rentes de son entourage. Par exemple, les noeuds de la communaut√©
ont plus de voisins √† l'int√©rieur qu'√† l'ext√©rieur de celle-ci.

 La coh√©sion interne : les caract√©ristiques de la communaut√© sont ro-
bustes √† la suppression de noeuds ou d'ar√™tes. Par exemple, il est n√©-
cessaire de supprimer un grand nombre des ar√™tes d'une communaut√©
pour qu'elle ne soit plus connexe.

 La fermeture triadique : pour ùë¢, ùë£, ùë§ des noeuds de la communaut√©, si

(ùë¢, ùë£) ‚àà ùê∏ et (ùë£, ùë§) ‚àà ùê∏, alors g√©n√©ralement (ùë¢, ùë§) ‚àà ùê∏.

Ces caract√©ristiques ne sont pas compl√®tement ind√©pendantes, par exemple
une forte densit√© interne est souvent corr√©l√©e avec une fermeture triadique
importante.
Une fonction de qualit√© est une application ùëû(ùíû(ùëâ )) ‚Üí R qui quantie
ces caract√©ristiques sur une partition an d'obtenir un r√©sultat num√©rique.

J. Creusefond

15

Chapitre 2. Rappels

J'utilise la convention que les fonctions de qualit√© doivent retourner un
haut score pour des  clusters  ayant des caract√©ristiques consid√©r√©es comme
pr√©f√©rables par les auteurs de ces fonctions. Je normalise les quelques fonc-
tions de qualit√© ayant un comportement inverse. Comme ces fonctions de
qualit√© sont syst√©matiquement comprises entre 0 et 1, pour une fonction de
qualit√© non normalis√©e ùëûùëì j'utilise la fonction ùëû1‚àíùëì = 1 ‚àí ùëûùëì.
Les fonctions de qualit√© sont pr√©sent√©es Tab. 2.2 page 18.

La Surprise [1] et la Signifiance [92] sont bas√©es sur le calcul d'une dis-
similarit√© de distribution, la divergence de Kullback-Leibler [57]. Dans notre
cas, elle n'est utilis√©e que pour des distributions binaires (un √©v√®nement et
son compl√©ment). Il s'agit de la quantit√© d'information perdue quand la dis-
tribution de r√©f√©rence est utilis√©e pour approcher l'autre distribution. Je note
ùë¶ comme la probabilit√© de l'un de ces deux √©v√®nements dans la distribution
de r√©f√©rence et ùë• la m√™me probabilit√© dans l'autre distribution. La divergence
de Kullback-Leiber est d√©crite Eq. 2.1.

ùê∑(ùë•||ùë¶) = ùë• log(

) + (1 ‚àí ùë•) log(

ùë•
ùë¶

1 ‚àí ùë•
1 ‚àí ùë¶

)

(2.1)

La distribution de r√©f√©rence de la Surprise correspond √† l'√©v√®nement
qu'une paire de noeuds al√©atoires soit √† l'int√©rieur de la m√™me communaut√©.
Elle est compar√©e √† la distribution de l'√©v√®nement o√π une ar√™te al√©atoire
est interne √† une communaut√©. La Signiance est une somme de divergences,
une par communaut√©, dont la distribution de r√©f√©rence est toujours la m√™me :
celle de l'√©v√®nement qu'une paire de noeuds al√©atoires soient reli√©s dans le
graphe. L'autre distribution de chaque divergence correspond √† la probabilit√©
qu'une paire de noeuds soit connect√©e dans la communaut√© consid√©r√©e. Ces
deux fonctions mesurent la densit√© interne. J'utilise la d√©nition de [91] qui
approxime asymptotiquement la valeur de la surprise.

Certaines fonctions de qualit√© sont d√©nies au niveau de la commu-
naut√©, c'est-√†-dire qu'elles calculent une qualit√© pour chaque  cluster .
Leur entr√©e est donc √©tendue pour inclure un  cluster  ùëê en plus de la par-
tition ùê∂. Je prends la somme de cette fonction sur tous les  clusters  pour
la calculer sur la partition enti√®re.
Le Cut-ratio [99] correspond √† la probabilit√© qu'il existe une ar√™te (ùë¢, ùë£) ‚àà
ùê∏ pour deux noeuds al√©atoires ùë¢ et ùë£ tels que ùë¢ ‚àà ùëê et ùë£ ‚àà ùëâ ‚àñùëê. Cette fonction
mesure la s√©parabilit√©.
La Conductance [51] correspond √† la probabilit√© qu'une ar√™te al√©atoire
(ùë¢, ùë£) ‚àà ùê∏ telle que |{ùë¢, ùë£} ‚à© ùëê| ‚â• 1 soit externe. Cette fonction mesure la
s√©parabilit√©.

16

J. Creusefond

2.3. Fonctions de qualit√©

Je fais le choix de pond√©rer ici les mesures de conductance et de cut-ratio
avec la taille de la communaut√© en nombre de noeuds. En eet, ces fonctions
sont pens√©es originellement pour √™tre appliqu√©es au niveau de la communaut√©,
et pas pour √™tre agr√©g√©es au niveau de la partition. Cette pond√©ration a pour
but qu'une communaut√© ait une inuence proportionnelle √† sa taille sur le
score agglom√©r√©.

La Modularit√© a √©t√© propos√©e par Girvan et Newman [39]. Comme je
le d√©taille Sec. 2.4, plusieurs algorithmes tr√®s utilis√©s sont bas√©s sur cette
fonction [9, 20]. Elle mesure la di√©rence entre le nombre d'ar√™tes internes
√† la communaut√© (le premier terme) et l'esp√©rance de cette valeur dans le
mod√®le de conguration (le second terme). Le mod√®le de conguration (ou
 conguration model ) correspond au m√™me graphe dont les ar√™tes sont
coup√©es en deux et ces demi-ar√™tes sont rattach√©es de mani√®re al√©atoire.
Ainsi, si un groupe d'individus a une densit√© de connexion signicativement
sup√©rieure √† ce que le mod√®le pr√©voit, ces connexions ne sont pas explicables
par des branchements al√©atoires.

La modularit√© quantie la densit√© interne ainsi que la s√©parabilit√©. La
densit√© interne est repr√©sent√©e par le nombre d'ar√™tes internes. On remarque
aussi qu'une augmentation du nombre d'ar√™tes externes entra√Æne une diminu-
tion de la modularit√©, du fait de la comparaison avec le mod√®le. La modularit√©
mesure donc aussi la s√©parabilit√©.

La Modularit√© locale [73] est similaire √† la modularit√©, mais le mod√®le
de conguration est modi√©. Les demi-ar√™tes de ce mod√®le ne peuvent √™tre
rattach√©es qu'entre des communaut√©s voisines, not√©es ùë£ùëúùëñùë†ùëñùëõùë†(ùëê). La modu-
larit√© locale mesure la densit√© interne ainsi que la s√©parabilit√©.

La Densit√© de modularit√© [19] consiste en la modularit√© dont on lui
soustrait une p√©nalit√© suivant sa connectivit√© externe. Le but est de mettre
l'accent sur la propri√©t√© de s√©parabilit√©, tout en conservant la mesure de la
densit√© interne.

Certaines fonctions de qualit√© sont d√©nies au niveau du noeud, c'est-
√†-dire qu'elles calculent une qualit√© pour tous les noeuds du graphe. Leur
entr√©e est donc √©tendue pour inclure un noeud ùë£ en plus du  cluster  ùëê
dans lequel il est et de la partition ùê∂. An de calculer la fonction sur toute
la partition, la moyenne de la fonction de qualit√© est prise.

Le Coefficient local interne de clustering [98] (appel√© coecient de
clustering dans ce manuscrit) d'un noeud est la probabilit√© que deux de ses
voisins pris al√©atoirement dans la m√™me communaut√© soient aussi voisins
entre eux. Cette fonction mesure la fermeture triadique.

Cette fonction est utilis√©e dans la Permanence [18], o√π elle est addition-

J. Creusefond

17

Chapitre 2. Rappels

Nom

Coefficient de clus-
tering

ùëûùëêùëôùë¢ùë†(ùê∂, ùëê, ùë£) =

Permanence

ùëûùëùùëíùëüùëö(ùê∂, ùëê, ùë£) =

1-Flake-ODF

FOMD

1-Cut ratio

1-Conductance

Modularit√©

Modularit√© locale

Densit√© de modula-
rit√©

Surprise

Signifiance

ùëû1‚àíùëì ùëôùëéùëò(ùê∂, ùëê, ùë£) =

ùëûùêπ ùëÇùëÄ ùê∑(ùê∂, ùëê, ùë£) =

Fonction

2|{ùë¢, ùë£, ùë§ ‚àà ùëê, ((ùë£, ùë¢), (ùë£, ùë§), (ùë¢, ùë£)) ‚àà ùê∏3}|

|ùëê|(|ùëê| ‚àí 1)

{Ô∏É

ùëö(ùë£, ùëê)

maxùëê‚Ä≤‚ààùê∂‚àñ{ùëê}(ùëö(ùë£, ùëê‚Ä≤)) √ó ùëòùë£

+ ùëûùëêùëôùë¢ùë†(ùê∂, ùëê, ùë£) ‚àí 1

1 quand ùëö(ùë£, ùê∂) > ùëö(ùë£, ùëâ ‚àñ ùëê)
0 sinon

ùëõ

ùëõ

ùëûùëöùëúùëë(ùê∂, ùëê) =

1 quand ùëö(ùë£, ùëê) > ùëëùëö
0 sinon

ùëû1‚àíùëêùë¢ùë°(ùê∂, ùëê) =

ùëû1‚àíùëêùëúùëõùëë(ùê∂, ùëê) =

{Ô∏É
)Ô∏Ç
(Ô∏Ç
√ó |ùëê|
1 ‚àí ùëö(ùëê, ùëâ ‚àñ ùëê)
)Ô∏Ç
(Ô∏Ç
|ùëê|(ùëõ ‚àí |ùëê|)
√ó |ùëê|
1 ‚àí ùëö(ùëê, ùëâ ‚àñ ùëê)
(Ô∏Ç ùëâ ùëúùëô(ùëê)
)Ô∏Ç2
(Ô∏Ç
ùëûùëëùëöùëúùëë(ùê∂, ùëê) = ùëûùëöùëúùëë(ùê∂, ùëê) ‚àí ‚àëÔ∏Å
)Ô∏Ä
(Ô∏Ä|ùëê|
‚Éí‚Éí‚Éí‚Éí‚Éí‚Éí‚Éí‚Éí‚àëÔ∏Ä
(Ô∏Äùëõ
)Ô∏Ä
‚Éí‚Éí‚Éí‚Éí‚Éí ùëö(Ô∏Äùëõ
)Ô∏Ä‚Éí‚Éí‚Éí‚Éí‚Éí
(Ô∏É
)Ô∏Ä)Ô∏É
(Ô∏Ä|ùëê|

(Ô∏Ç‚àëÔ∏Ä
(Ô∏Ç|ùëê|
)Ô∏Ç
‚àëÔ∏Å

ùëö(ùëê ‚à™ ùë£ùëúùëñùë†ùëñùëõùë†(ùëê))

ùëâ ùëúùëô(ùëê)
‚àí

ùëâ ùëúùëô(ùëê)
ùëö(ùëê, ùëê‚Ä≤)

ùëê‚ààùê∂ ùëö(ùëê)

ùëê‚ààùê∂

2

ùëê‚Ä≤‚ààùê∂‚àñùëê

ùëö

ùëö

ùê∑

ùëûùë†ùëñùëîùëõ(ùê∂) =

ùëö(ùëê)

ùëö

2

ùëö(ùëê)

2

2

ùëö(ùëê)

‚àí

ùëê‚ààùê∂

2

)Ô∏É

2ùëö

ùëûùë†ùë¢ùëüùëù(ùê∂) = ùê∑

ùëûùëôùëöùëúùëë(ùê∂, ùëê) =

2 ¬∑ ùëö(ùëê ‚à™ ùë£ùëúùëñùë†ùëñùëõùë†(ùëê))

)Ô∏Ç2

Table 2.2  Fonctions de qualit√©

n√©e √† une mesure de la connectivit√© du noeud dans sa communaut√©. Cette
densit√© est pond√©r√©e de telle mani√®re qu'un noeud a une permanence plus
faible s'il est relativement tr√®s connect√© √† une autre communaut√© en particu-
lier. La Permanence mesure la s√©parabilit√© ainsi que la fermeture triadique.

La Flake-ODF [34] ( Out-Degree Fraction ) compare directement de-

gr√© interne et degr√© externe. Cette fonction mesure la s√©parabilit√©.

La FOMD [103] ( Fraction Over Median Degree ) compare le degr√©
interne du noeud avec le degr√© m√©dian ùëëùëö du graphe. Cette fonction mesure
la densit√© interne.

18

J. Creusefond

2.4. Algorithmes de d√©tection de communaut√©

2.4 Algorithmes de d√©tection de communaut√©

Dans cette section, je pr√©sente les algorithmes de d√©tection de commu-

naut√©s auxquels je fait r√©f√©rence au long de cette th√®se.

2.4.1 Strat√©gies de partitionnement

Dans cette partie, je pr√©sente les di√©rentes strat√©gies adopt√©es par les

algorithmes de d√©tection de communaut√©s.

Les m√©thodes de partitionnement de donn√©es s'inspirent directement
du probl√®me √©ponyme, o√π l'on cherche √† grouper des objets g√©n√©riques. La
strat√©gie dans ce domaine est typiquement d'√©tablir une fonction de simi-
larit√© entre les objets, puis d'ex√©cuter un algorithme charg√© de trouver des
 clusters  o√π les similarit√©s internes sont fortes [50]. On y trouve des tech-
niques de partitionnement hi√©rarchique [20] (les communaut√©s fusionnent ou
se divisent au fur et √† mesure de l'ex√©cution) et de coupure de graphe [35]
(en minimisant le nombre d'ar√™tes entre les parties). On y trouve aussi l'int√©-
gration des graphes dans un espace m√©trique par une mesure de dissimilarit√©
entre les noeuds [83].

Les m√©thodes divisives sont des m√©thodes de partitionnement hi√©rar-
chique qui se basent sur l'identication et la suppression successive des ar√™tes
que l'on suppose √™tre entre les  clusters . Ces suppressions d√©connectent le
graphe et les composantes connexes sont les communaut√©s.

Newman et Girvan ont introduit la modularit√© [75] qui inspira une s√©rie
de m√©thodes bas√©es sur celle-ci. Il a √©t√© prouv√© par Brandes et al. [10] que
trouver la partition optimale en modularit√© est un probl√®me NP-Complet, ce
qui rend le passage √† l'√©chelle extr√™mement co√ªteux. Des approches d'opti-
misation gloutonne ont √©t√©s d√©velopp√©es pour apporter une alternative ac-
ceptable en temps de calcul, comme l'algorithme de Louvain [9]. D'autres
approches existent, comme la m√©thode du recuit simul√© [42] ou l'analyse
spectrale [74].

En eet, de nombreux algorithmes sont bas√©s sur des m√©thodes spec-
trales. Le spectre d'une matrice sp√©cique qui d√©nit une notion de proxi-
mit√© entre les noeuds y est analys√©. Les vecteurs propres associ√©s aux valeurs
propres les plus faibles (sauf le premier, √† valeur propre nulle) d√©crivent
des  clusters  √† forte similarit√© interne [72]. En eet, prendre les ùëò pre-
miers vecteurs propres (en ignorant le premier) permet une projection des
ùëõ noeuds dans un espace ùëò-dimensionnel. Il sut alors sut d'ex√©cuter un
partitionnement classique (type k-means) pour trouver des  clusters . La
matrice Laplacienne est traditionnellement utilis√©e comme matrice de simi-
larit√© entre les noeuds. Cependant, d'autres matrices peuvent √™tre utilis√©es,

J. Creusefond

19

Chapitre 2. Rappels

comme la matrice de modularit√© o√π la proximit√© est le gain en modularit√©
apport√© par la r√©union des noeuds voisins dans le m√™me  cluster  [74].

Les m√©thodes dites dynamiques simulent un processus se d√©roulant sur
le graphe. Le mod√®le de Potts [101] d√©crit un ensemble de particules ayant
chacune un √©tat, et une notion de proximit√© avec les autres particules. Les
particules s'inuencent entre elles, celles qui sont proches les unes des autres
ont tendance √† partager le m√™me √©tat. La strat√©gie est alors de trouver les pa-
ram√®tres du mod√®le correspondant le mieux aux donn√©es. Un autre processus
est celui de la synchronisation, o√π le syst√®me simul√© unie progressivement
tous ses √©l√©ments au m√™me √©tat. Les noeuds d'une communaut√© √©tant proches
les uns des autres, ils ont tendance √† √™tre localement synchronis√©s en premier,
ce qui permet leur identication [4]. D'un autre c√¥t√©, les marches al√©atoires
se concentrent dans les sous-graphes denses, ce qui est exploit√© par plusieurs
algorithmes [94, 78].

Les m√©thodes d'inf√©rence statistique font l'hypoth√®se que le graphe a
√©t√© g√©n√©r√© suivant un mod√®le, et que ce mod√®le admet l'appartenance des
noeuds aux di√©rentes communaut√©s en tant que param√®tre. Il s'agit alors
de trouver les param√®tres du mod√®le qui auraient g√©n√©r√© les donn√©es obser-
v√©es avec la probabilit√© la plus importante. Par exemple, consid√©rons que les
noeuds √† l'int√©rieur des communaut√©s sont connect√©s avec une probabilit√©
ùëùùëñùëõ, et √† l'ext√©rieur avec une probabilit√© ùëùùëúùë¢ùë° [45]. L'objectif est alors de trou-
ver la partition qui aurait le plus de chances de g√©n√©rer le graphe observ√© √†
partir de ce mod√®le.

Des explications plus d√©taill√©es sur ces cat√©gories peuvent √™tre trouv√©es

dans l'article r√©capitulatif de Fortunato [36].

2.4.2 Algorithmes

Dans cette partie, je pr√©sente les algorithmes utilis√©s dans ce manuscrit.
L'algorithme de Louvain [9] optimise la modularit√© de mani√®re glou-
tonne. Cet algorithme d√©place les noeuds dans le  cluster  de leur voisin de
mani√®re √† maximiser le gain en modularit√©. Une fois qu'aucun gain en modu-
larit√© n'est possible de cette mani√®re, il s'applique r√©cursivement au graphe
quotient de la partition. L'algorithme se termine quand le processus r√©cursif
cesse d'am√©liorer la modularit√©.

L'algorithme de Clauset [20], aussi appel√© Clauset-Newman-Moore (CNM)

du nom de ses cr√©ateurs, est une autre approche √† l'optimisation gloutonne de
la modularit√©. Cet algorithme suit une strat√©gie de partitionnement hi√©rar-
chique o√π, √† chaque √©tape, la fusion fournissant la plus forte augmentation de
la modularit√© est choisie. L'algorithme s'arr√™te quand la partition inclut une
unique communaut√©, et renvoie la partition maximale de modularit√© trouv√©e.

20

J. Creusefond

2.4. Algorithmes de d√©tection de communaut√©

L'algorithme MCL [94]( Markov CLustering ) est une approche bas√©e
sur du calcul matriciel. Chaque noeud du graphe est associ√© √† un entier
di√©rent entre 1 et ùëõ. Le graphe est repr√©sent√© par une matrice ùê¥ de taille
ùëõ √ó ùëõ telle que ùê¥ùëñ,ùëó = 1/ùëòùëó si (ùëñ,ùëó) ‚àà ùê∏ et ùê¥ùëñ,ùëó = 0 sinon. La matrice ùê¥
repr√©sente un graphe pond√©r√© dont les ar√™tes sont pond√©r√©es par l'inverse du
degr√© du noeud source de l'ar√™te.

Cette matrice est √©lev√©e au carr√©, ce qui a l'eet de propager les chemins :
il s'agit de l'√©tape d'expansion. Ensuite, les √©l√©ments de la matrice sont √©lev√©s
√† une puissance (d√©pendante d'un param√®tre de l'algorithme), et les colonnes
sont normalis√©es tels que la somme de leurs √©l√©ments fasse 1. Cette √©tape
augmente la variance du poids des ar√™tes : il s'agit de l'√©tape d'ination. En
r√©p√©tant les √©tapes d'expansion et d'ination, les ar√™tes internes des groupes
d'individus fortement connect√©es voient leur poids augmenter tandis que le
poids des ar√™tes externes tend vers z√©ro. Malgr√© son utilisation de la multipli-
cation matricielle, cet algorithme a une complexit√© proche du lin√©aire sur des
graphes peu denses gr√¢ce √† des techniques dites de  pruning , c'est-√†-dire
de suppression des faibles valeurs √©loign√©es de la diagonale.

L'algorithme infomap [86] associe √† chaque noeud un code en deux par-
ties : un pr√©xe correspondant √† la communaut√© ainsi qu'un identiant du
noeud dans la communaut√©. Un chemin peut √™tre d√©crit par les identiants
des noeuds qu'il parcourt, et le pr√©xe de communaut√©s travers√©es. L'objec-
tif est de trouver les pr√©xes communautaires permettant de minimiser le
nombre moyens de bits n√©cessaires pour repr√©senter une marche al√©atoire.
Cette optimisation est faite de mani√®re gloutonne, puis ran√©e par le biais
d'un algorithme de recuit simul√©.

Un k-core [87] est un ensemble maximal de noeuds li√©s aux autres noeuds
de cet ensemble par au moins ùëò ar√™tes. Les ensembles connexes du  k-core 
sont consid√©r√©s comme les communaut√©s. Les  k-core  sont obtenus en sup-
primant successivement les noeuds de degr√© inf√©rieur √† ùëò.

L'algorithme de label propagation [82] est un processus dynamique
discret simul√© sur le graphe. Il attribue initialement une √©tiquette contenant
un identiant di√©rent pour chaque noeud. L'√©tiquette de chaque noeud est
chang√©e √† chaque pas de temps par celle qui appara√Æt en majorit√© parmi
ses voisins. Quand le processus cesse de modier les √©tiquettes, celles-ci sont
retourn√©es comme √©tant les communaut√©s.

L'algorithme de betweenness [39] est une m√©thode divisive. Le crit√®re de
suppression d'ar√™te est la  betweenness centrality , une mesure de centralit√©
qui compte le nombre de plus courts chemins passant par une ar√™te. La
supposition est que les plus courts chemins traversent fr√©quemment des ar√™tes
entre les communaut√©s, du fait de la di√©rence de densit√© interne/externe.
La suppression de ces ar√™tes isole donc les communaut√©s les unes des autres.

J. Creusefond

21

Chapitre 2. Rappels

L'algorithme Walktrap [78] utilise les propri√©t√©s des marches al√©atoires
pour √©tablir une notion de distance entre les noeuds. Il calcule pour chaque
paire de sommets (ùëñ,ùëó) un poids ùë§ùë°(ùëñ,ùëó) correspondant √† la probabilit√© qu'une
marche al√©atoire aille de ùëñ √† ùëó en ùë° √©tapes. Il en d√©duit une distance sur les
paires de noeuds, d√©crite Eq. 2.2.

‚àöÔ∏É‚àëÔ∏Å

ùëëùëñùë†ùë°ùë°(ùëñ,ùëó) =

|ùë§ùë°(ùë£,ùëñ) ‚àí ùë§ùë°(ùë£,ùëó)|2

ùë£‚ààùëâ

ùëòùë£

(2.2)

Cet algorithme suit ensuite une strat√©gie de partitionnement hi√©rarchique en
fusionnant les communaut√©s √† faible distance.

L'algorithme de Spinglass [85] mod√©lise le graphe avec le mod√®le de
Potts [101], d√©crit pr√©c√©demment. Les auteurs en d√©duisent une fonction de
score proche de celle de la modularit√©, qu'ils optimisent avec la m√©thode du
recuit simul√©.

L'algorithme Conclude [30] commence par √©tablir une notion de distance
similaire √† celle Eq. 2.2. Cependant, ùë§ùë°(ùëñ,ùëó) est remplac√© par la probabilit√©
que l'arc (ùëñ,ùëó) soit travers√© par une marche al√©atoire de longueur ùë° depuis une
source al√©atoire. Ils appliquent ensuite l'algorithme de Louvain sur le graphe
pond√©r√© qui en r√©sulte.

L'algorithme SCD [79] ( Scalable Community Detection ) optimise de
mani√®re gloutonne un score mesurant la proportion des triangles pr√©sents √†
l'int√©rieur des communaut√©s. An de ne pas avoir √† calculer le nombre de
triangles des graphes, cet algorithme approche le score en question. Comme
pour l'algorithme de Louvain, cet algorithme change localement les noeuds
de communaut√©s et permet en plus aux noeuds de s'isoler dans de nouvelles
communaut√©s. D√®s que le score du graphe se stabilise, l'algorithme se termine.

2.5 M√©thodes de comparaison

Une m√©thode de comparaison (ou  extrinsic clustering evaluation me-
tric  [3]) est une fonction √©valuant la proximit√© entre deux couvertures du
m√™me ensemble.

La NMI ( Normalized Mutual Information ) est une m√©thode de com-
paraison bas√©e sur la th√©orie de l'information. J'utilise la version introduite
par Lancichinetti et al. [58].
Soient deux couvertures ùê∂ et ùêø de ùëâ . Soit ùëãùëê une variable al√©atoire
associ√©e au  cluster  ùëê ‚äÜ ùëâ valant 1 si l'√©v√®nement qu'un noeud pris
uniform√©ment al√©atoirement dans ùëâ est inclus dans ùëê, et 0 sinon. Je note
‚Ñé(ùë•) = ‚àíùë• ¬∑ log(ùë•). L'entropie jointe ùêª(ùëãùëê, ùëãùëô) d'une paire de  clusters 

22

J. Creusefond

ùëê ‚àà ùê∂ et ùëô ‚àà ùêø est calcul√©e ainsi :

ùêª(ùëãùëê ‚àà ùê∂, ùëãùëô ‚àà ùêø) =

ùëù(ùëãùëê = 1, ùëãùëô = 1) =

ùëù(ùëãùëê = 1, ùëãùëô = 0) =

ùëù(ùëãùëê = 0, ùëãùëô = 1) =

ùëù(ùëãùëê = 0, ùëãùëô = 0) =

2.5. M√©thodes de comparaison

‚Ñé(ùëù(ùë•,ùë¶))

(2.3)

‚àëÔ∏Å

‚àëÔ∏Å

ùëõ

ùë¶‚ààùëãùëô
ùë•‚ààùëãùëê
|ùëãùëê ‚à© ùëãùëô|
|ùëãùëê| ‚àí |ùëãùëê ‚à© ùëãùëô|
|ùëãùëô| ‚àí |ùëãùëê ‚à© ùëãùëô|
ùëõ ‚àí |ùëãùëê ‚à™ ùëãùëô|

ùëõ

ùëõ

ùëõ

L'entropie conditionnelle ùêª(ùëãùëê|ùëãùëô) = ùêª(ùëãùëê, ùëãùëô)‚àí ùêª(ùëãùëô) mesure la quantit√©
d'information n√©cessaire pour d√©crire le r√©sultat de ùëãùëê en sachant ùëãùëô. On
cherche √† utiliser l'entropie conditionnelle pour √©valuer la proximit√© de deux
 clusters . Si ùëê et ùëô sont tr√®s similaires, cette valeur est faible. Cependant,
c'est aussi le cas si ùëô est le compl√©ment de ùëê dans ùëâ .

En observant les termes de la somme de l'entropie jointe Eq. 2.3, les
auteurs d√©nissent la condition suivante pour consid√©rer deux  clusters 
comme pouvant √™tre proches (je note ùëù(ùëé,ùëè) = ùëù(ùëãùëê = ùëé, ùëãùëô = ùëè)) :

‚Ñé(ùëù(1, 1)) + ‚Ñé(ùëù(0, 0)) > ‚Ñé(ùëù(1, 0)) + ‚Ñé(ùëù(1, 0))

(2.4)

En eet, ils ont remarqu√© que les termes ‚Ñé(ùëù(1,0)) et ‚Ñé(ùëù(0,1)) sont dominants
quand ùëô est le compl√©ment de ùëê. Les deux autres termes sont dominants quand
ùëê et ùëô sont similaires. Je note ùëúùëèùë†(ùëê, ùêø) l'ensemble des  clusters  ùëô ‚àà ùêø tels
que ùëê et ùëô satisfont la condition 2.4.

Les auteurs d√©nissent ensuite l'entropie conditionnelle normalis√©e de
l'ensemble ùê∂ùê∂ùê∂ des variables al√©atoires associ√©es aux clusters de ùê∂ par rap-
port √† celles de ùêø, not√©es ùêøùêøùêø.

‚àëÔ∏Å

ùêª(ùê∂ùê∂ùê∂|ùêøùêøùêø)ùëõùëúùëüùëö =

1
|ùê∂|

minùëô‚ààùëúùëèùë†(ùëê,ùêø) ùêª(ùëãùëê|ùëãùëô)

ùëê‚ààùê∂

ùêª(ùëãùëê)

(2.5)

(2.6)

L'information mutuelle normalis√©e est alors d√©nie ainsi :
[ùêª(ùê∂ùê∂ùê∂|ùêøùêøùêø)ùëõùëúùëüùëö + ùêª(ùêøùêøùêø|ùê∂ùê∂ùê∂)ùëõùëúùëüùëö]

ùëÅ ùëÄ ùêº(ùê∂, ùêø) = 1 ‚àí 1
2

La F-BCubed (fb3) [5] a deux composantes : pr√©cision et rappel. Je
d√©nis un associ√© d'un noeud ùë£ pour une couverture ùê∂ comme un noeud qui
a au moins un  cluster  en commun avec ùë£ dans ùê∂. La pr√©cision ùëùùëüùëíùëê(ùê∂, ùêø)

J. Creusefond

23

Chapitre 2. Rappels

de deux partitions ùê∂ et ùêø mesure pour chaque noeud ùë£ la proportion de ses
associ√©s dans ùê∂ qui sont aussi ses associ√©s dans ùêø. La moyenne est prise sur
tous les individus. Le rappel correspond √† la pr√©cision dont les partitions
sont √©chang√©es, ùëüùëéùëùùëùùëíùëô(ùê∂, ùêø) = ùëùùëüùëíùëê(ùêø, ùê∂). Pr√©cision et rappel sont agr√©g√©s
en prenant la moyenne harmonique :

ùêπ -ùêµùê∂ùë¢ùëèùëíùëë(ùê∂, ùêø) =

1

2 * ùëùùëüùëíùëê(ùê∂,ùêø)

1

+

1

2 * ùëüùëéùëùùëùùëíùëô(ùê∂,ùêø)

(2.7)

Amig√≥ et al. [3] ont √©tendu cette m√©trique pour les couvertures, en prenant
en compte le nombre de  clusters  en commun que ùë£ et ses associ√©s ont dans
les deux partitions. Je note ùê∂ùë£ = {ùëê | ùëê ‚àà ùê∂, ùë£ ‚àà ùê∂} (resp. ùêøùë£) l'ensemble des
 clusters  dans ùê∂ (resp. ùêø) dans lesquels appara√Æt ùë£. Je note ùëéùë†ùë†ùëú(ùê∂, ùë£) =
{ùë¢ | ùë¢ ‚àà ùëâ, ùê∂ùë£ ‚à© ùê∂ùë¢ Ã∏= ‚àÖ} l'ensemble des associ√©s de ùë£ dans ùê∂. Les auteurs
d√©nissent ainsi la pr√©cision recouvrante :

‚àëÔ∏Å

(Ô∏Ç ùëöùëñùëõ(|ùê∂ùë£ ‚à© ùê∂ùë¢|,|ùêøùë£ ‚à© ùêøùë¢|)

|ùê∂ùë£ ‚à© ùê∂ùë¢|

)Ô∏Ç‚é§‚é¶

ùëùùëüùëíùëê(ùê∂, ùêø) =

1
ùëõ

1

|ùëéùë†ùë†ùëú(ùê∂, ùë£)|

ùë¢‚ààùëéùë†ùë†ùëú(ùê∂,ùë£)

‚é°‚é£

‚àëÔ∏Å

ùë£‚ààùëâ

(2.8)
Le rappel et la F-BCubed recouvrantes sont d√©nis par rapport √† cette

pr√©cision comme pour la version originelle.

L'Omega Index [21] d√©nombre les paires de noeuds qui sont dans le m√™me
nombre de  clusters  dans les deux couvertures. Cette valeur est compar√©e
avec son esp√©rance dans un mod√®le o√π les deux couvertures sont form√©es de
noeuds al√©atoires. Soit ùë°ùëó(ùê∂) l'ensemble des noeuds ayant ùëó  clusters  en
commun dans ùê∂. L'Omega Index non ajust√© est :

ùúîùë¢(ùê∂, ùêø) =

|ùë°ùëó(ùê∂) ‚à© ùë°ùëó(ùêø)|

(2.9)

2

)Ô∏Ä max(|ùê∂|,|ùêø|)‚àëÔ∏Å
1(Ô∏Äùëõ
max(|ùê∂|,|ùêø|)‚àëÔ∏Å
1(Ô∏Äùëõ
)Ô∏Ä2

ùëó=0

ùëó=0

La m√™me valeur dans le mod√®le nul est :

|ùë°ùëó(ùê∂)| ¬∑ |ùë°ùëó(ùêø)|

ùúîùëí(ùê∂, ùêø) =

L'Om√©ga Index correspond √† :

2

ùúî(ùê∂, ùêø) =

ùúîùë¢(ùê∂,ùêø) ‚àí ùúîùëí(ùê∂, ùêø)

1 ‚àí ùúîùëí(ùê∂, ùêø)

24

J. Creusefond

(2.10)

(2.11)

Chapitre 3

√âtude de la structure
communautaire de r√©seaux de
communication par les motifs
temporels

Dans ce chapitre, je propose une adaptation des motifs prenant en
compte le d√©lai de r√©ception d‚Äôun message. Je d√©duis d‚Äôune com-
paraison avec un mod√®le de r√©f√©rence que les messages dans ces
motifs ont des liens causaux. J‚Äôobserve que ces motifs ont des pro-
pri√©t√©s diff√©rentes √† l‚Äôint√©rieur et √† l‚Äôext√©rieur des communaut√©s.
Ces r√©sultats pr√©sent√©s dans ce chapitre sont les premiers r√©-

sultats d‚Äôun travail en cours, commun avec Remy Cazabet.

L'appartenance aux communaut√©s n'est pas quelque chose de x√© dans le
temps. Par exemple, un scientique peut changer de domaine de recherche
au cours de sa carri√®re. Analyser l'√©volution d'un r√©seau au cours du temps
est essentiel pour pouvoir capturer ces changements.

On d√©nit un r√©seau temporel comme un r√©seau contenant des interactions
inscrites dans le temps. Des exemples classiques de r√©seaux temporels sont
les r√©seaux d'e-mails [55], les appels t√©l√©phoniques [11], la proximit√© physique
entre des personnes √©quip√©es de puces RFID [13] et les citations dans les
publications scientiques [17]. Le fait que chaque interaction soit inscrite
dans le temps permet d'observer des dynamiques qui n'apparaissent pas dans
les r√©seaux statiques. Par exemple, il a √©t√© observ√© dans les r√©seaux d'appels
t√©l√©phoniques que les utilisateurs sont tr√®s actifs durant de courtes p√©riodes
et sont inactifs le reste du temps [54].

J. Creusefond

25

Chapitre 3. √âtude de la structure communautaire de r√©seaux de
communication par les motifs temporels

Pour d√©crire ces communications, le graphe temporel peut √™tre utilis√© [48].

D√©finition 3.1 (Graphe temporel). Un graphe temporel ùê∫ = (ùëâ, ùê∏) est un
ensemble de noeuds ùëâ et d‚Äôarcs ùê∏ = {(ùë¢,ùë£, ùë°1, ùë°2) | ùë¢, ùë£ ‚àà ùëâ, ùë°1 ‚àà R+, ùë°2 ‚àà
R‚â•ùë°1}, o√π ùë¢, ùë£ ‚àà ùëâ sont la source et la destination du lien, ùë°1, ùë°2 sont respec-
tivement la date de d√©but et de fin de l‚Äôinteraction.

Il s'agit donc d'un graphe orient√© o√π plusieurs arcs peuvent exister entre
la m√™me paire de noeuds. √Ä chaque arc est associ√© un intervalle temporel. Je
qualie un arc (ùë¢, ùë£, ùë°1, ùë°2) ‚àà ùê∏ de pr√©sent √† un instant ùë° si ùë°1 ‚â§ ùë° ‚â§ ùë°2.

Dans ce chapitre, je m'int√©resse particuli√®rement aux r√©seaux form√©s par
des communications √©crites instantan√©es, du type messagerie en ligne, e-mails
ou SMS. J'utilise donc une sous-cat√©gorie des graphes temporels adapt√©e √†
ce type de r√©seau, les flux de liens [96]. Il s'agit d'un graphe temporel o√π
ùë°1 = ùë°2.

D√©finition 3.2 (Flux de liens). Un flux de liens ùê∫ = (ùëâ,ùê∏) est un ensemble
de noeuds ùëâ et d‚Äôarcs ùê∏ ‚äÇ ùëâ 2 √ó R+.

Des algorithmes de d√©tection de communaut√©s ont √©t√©s con√ßus pour traiter
les graphes temporels [66, 14]. Ils supposent qu'√† chaque instant les arcs
pr√©sents forment un graphe d'une densit√© comparable √† celle d'un graphe de
r√©seau social. Ils sont par exemple adapt√©s √† traiter les r√©seaux sociaux web
repr√©sent√©s par un graphe temporel. Les arcs de ces graphes repr√©sentent les
relations, de la date de sa cr√©ation √† la date de sa n. Ainsi, les arcs pr√©sents
√† chaque instant de ce graphe repr√©sentent des instantan√©s du r√©seau social
web.

Les r√©seaux de communications √©crites instantan√©es, repr√©sent√©s en ux
de liens, ont une densit√© tr√®s faible presque tout le temps. En eet, le nombre
de messages envoy√©s par des utilisateurs √† chaque instant est extr√™mement
faible en moyenne. La strat√©gie actuelle de d√©tection de communaut√©s sur
ces ux de lien consiste √† agr√©ger les arcs sur des fen√™tres temporelles pour
ensuite les traiter comme des graphes temporels denses [47]. Cette approche
n√©glige une donn√©e des ux de liens : l'ordre des communications √† l'int√©rieur
des fen√™tres d'agr√©gation. Or, s'il existe une relation entre l'ordre des com-
munications et l'appartenance communautaire des noeuds impliqu√©s dans
ces communications, cela implique que les algorithmes actuels n√©gligent une
donn√©e importante.

Dans le but d'observer cette relation, je m'int√©resse aux motifs temporels,
d√©nis par Zhao et al. [106]. Ces motifs correspondent √† la structure form√©e

26

J. Creusefond

Figure 3.1  Exemple d'une s√©rie de communications respectant le motif
"AB-AC-BC"

par l'enchainement des arcs sur une courte p√©riode. Une instance d'un motif
consiste en un ensemble d'arcs dans le graphe temporel. Soit (ùë¢, ùë£, ùë°1, ùë°2) ‚àà ùê∏
l'un des arcs d'une instance d'un motif. Les arcs ayant √©t√©s √©mis dans un
intervalle de temps ùëä par ùë¢ ou par ùë£ peuvent aussi √™tre inclus dans cette
instance.

D√©finition 3.3 (Instance de motif). Une instance d‚Äôun motif sur une fen√™tre
de taille ùëä ‚àà R+ est un graphe temporel ùê∫ = (ùëâ, ùê∏) tel que ‚àÄ(ùë¢ùëñ, ùë£ùëñ, ùë°1ùëñ, ùë°2ùëñ) ‚àà
ùê∏, ‚àÉ(ùë¢ùëó, ùë£ùëó, ùë°1ùëó, ùë°2ùëó) ‚àà ùê∏ tel que (ùë¢ùëñ, ùë£ùëñ, ùë°1ùëñ, ùë°2ùëñ) Ã∏= (ùë¢ùëó, ùë£ùëó, ùë°1ùëó, ùë°2ùëó), {ùë¢ùëñ, ùë£ùëñ} ‚à©
{ùë¢ùëó, ùë£ùëó} Ã∏= ‚àÖ et 0 < ùë°1ùëñ ‚àí ùë°2ùëó < ùëä ou 0 < ùë°1ùëó ‚àí ùë°2ùëñ < ùëä .

Un motif est une classe d'√©quivalence de ces instances dans le graphe
temporel √©tudi√©. Deux instances de motifs ùê∫1 = (ùëâ1, ùê∏1) et ùê∫2 = (ùëâ2, ùê∏2)
sont consid√©r√©s comme √©quivalentes s'il existe une application bijective ùëì :
ùëâ1 ‚Üí ùëâ2 telle que :

‚àÄùë¢, ùë£ ‚àà ùëâ1,‚Éí‚Éí{(ùë¢, ùë£, ùë°ùëé, ùë°ùëè) ‚àà ùê∏1}‚Éí‚Éí =‚Éí‚Éí{(ùëì (ùë¢), ùëì (ùë£), ùë°ùëé, ùë°ùëè) ‚àà ùê∏2}‚Éí‚Éí

Cette fonction d'√©quivalence a √©t√© √©tendue par Kovanen et al. [56] pour
prendre en compte l'ordre des arcs √† l'int√©rieur du motif.

Je fais r√©f√©rence aux di√©rents motifs par les noeuds qui composent la
s√©quence temporelle des arcs. Les noeuds sont identi√©s par les lettres de
l'alphabet dans l'ordre de leur apparition dans le motif. Par exemple, l'en-
semble de trois arcs {(ùë¢,ùë£,1,1), (ùë¢,ùë§,2,2), (ùë£,ùë§,3,3)} est une instance du motif
"AB-AC-BC" avec la fen√™tre adapt√©e, comme illustr√© Fig. 3.1.

J. Creusefond

27

uvw(u,v,1,1)(u,w,2,2)(v,w,3,3)Chapitre 3. √âtude de la structure communautaire de r√©seaux de
communication par les motifs temporels

L'apparition d'instances de motifs correspond √† un type de communi-
cation qui se d√©roule entre les utilisateurs repr√©sent√©s par les noeuds. Par
exemple, une conversation entre deux individus induit un motif de va-et-
vient [106] (type "AB-BA-AB").

Les √©tudes au sujet des motifs temporels [106, 89, 104] mettent en avant
la sur-repr√©sentation de certains motifs par rapport aux autres, comme la
chaine (type "AB-BC-CD"), le va-et-vient ou l'√©toile (type "AB-AC-AD").
N√©anmoins, ces observations peuvent tr√®s bien provenir de propri√©t√©s qui
n'ont aucun rapport avec la causalit√© des communications, c'est par exemple
le cas de la chaine. On peut donc se poser la question de l'inuence de la
causalit√© sur les motifs.

Dans ce but, j'utilise un mod√®le o√π la causalit√© n'existe pas entre les mes-
sages √©mis. Ce mod√®le, que j'appelle mod√®le nul, sert de base de comparaison
pour quantier l'inuence de la causalit√©. Le mod√®le nul est un mod√®le de
g√©n√©ration de graphe. Il prend en entr√©e un graphe et fait dispara√Ætre une
partie de ses propri√©t√©s [56] ( null model ). Dans le cadre de mes travaux,
j'utilise le  correlation-mixing model  [89] pour g√©n√©rer des graphes o√π les
liens causaux entre les messages sont supprim√©s. Ce mod√®le rend al√©atoire
l'ordre des messages √©mis par les noeuds.

Notons que le mod√®le nul est un mod√®le de g√©n√©ration al√©atoire de graphe.
Il est th√©oriquement possible de g√©n√©rer le graphe de base √† partir du mod√®le.
N√©anmoins, la probabilit√© d'obtenir le graphe de base est tr√®s faible.

Dans le  correlation-mixing model , les propri√©t√©s structurelles telles que
le nombre d'arcs entre deux noeuds ou leur degr√© sont conserv√©es. Certaines
propri√©t√©s temporelles persistent aussi, comme la fr√©quence d'√©mission ou la
distribution temporelle des messages. D'un autre c√¥t√©, l'encha√Ænement des
messages est d√ª au hasard et non plus √† un lien causal.

Pour chaque mesure sur les motifs, je compare la valeur sur le graphe d'ori-
gine et sur les graphes g√©n√©r√©s par le mod√®le nul. Je consid√®re les di√©rences
statistiquement signicatives entre le mod√®le nul et la r√©alit√© observ√©e comme
une cons√©quence de la causalit√©, comme d√©crit par Tabourier et al. [89]. Dans
ce but, j'√©tudie la distribution de probabilit√© sur le mod√®le nul des di√©rentes
mesures en g√©n√©rant plusieurs instances du mod√®le.

J'observe en pratique que ces mesures sont distribu√©es suivant une loi
normale. Dans ce cas, on peut utiliser la  r√®gle des 66-95-99,7  [80], qui
indique qu'environ 66% des valeurs se situent √† un √©cart-type de la moyenne,
95% √† deux √©carts-types et 99,7% √† trois √©carts-types. Une valeur qui se
situerait au-del√† de trois √©cart-types de la moyenne aurait donc moins de
0,3% de chances d'√™tre g√©n√©r√©e par cette distribution. Ainsi, pour chaque
mesure ùë† sur les donn√©es, on mesure la moyenne ùúáùë† et l'√©cart-type ùúéùë† sur le
mod√®le nul, puis on mesure la cr√©dibilit√© de ce mod√®le sur les donn√©es par le

28

J. Creusefond

3.1. Adaptation des motifs aux p√©riodes d‚Äôactivit√©

biais du z-score :

ùëß-ùë†ùëêùëúùëüùëí(ùë†) =

ùë† ‚àí ùúáùë†
ùúéùë†

(3.1)

Si le z-score d√©passe trois en valeur absolue, je suppose que le mod√®le nul

n'explique pas la valeur de la mesure.

3.1 Adaptation des motifs aux p√©riodes d‚Äôacti-

vit√©

Je traite des r√©seaux dans lesquels les communications sont instantan√©es,
j'adopte donc le formalisme de ux de liens. Comme Kovanen et al. [56], je
prends en compte l'ordre des √©v√®nements dans les motifs.

Je m'int√©resse aux r√©seaux de communications au sein desquels les indi-
vidus ne sont pas forc√©ment conscients de la r√©ception d'un message. Il s'agit
typiquement de r√©seaux d'e-mails ou des r√©ponses √† des messages sur des
forums en ligne. Dans ce cas, le lien causal entre deux communications n'est
pas clairement li√© au d√©lai de r√©ponse. En eet, un individu peut mettre un
temps important √† r√©agir √† un message du fait qu'il n'en ait pas conscience.
Ma d√©nition des motifs, les a-motifs, prend en compte cette sp√©cicit√©. Elle
correspond √† une approche qui d√©tecte plus de structures que celle d√©nie
par Zhao et al. [106].

Je s√©pare l'activit√© d'un individu en p√©riodes d‚Äôactivit√©. Ces p√©riodes sont
des intervalles de temps o√π un individu √©met des messages en un d√©lai court.

D√©finition 3.4 (ùúá-p√©riode d'activit√©). Pour chaque noeud ùë£ ‚àà ùëâ d‚Äôun flux de
liens ùê∫ = (ùëâ, ùê∏), je note ùê∏ùë£ l‚Äôensemble des messages √©mis par ùë£ et ùëöùëíùëë(ùë£ ‚àà
ùëâ ) la m√©diane du temps √©coul√© entre deux messages √©mis par un individu
ùë£ sur l‚Äôensemble du graphe. Je note aussi ùë°((ùë¢, ùë£, ùë•) ‚àà ùê∏) = ùë• la fonction
associant la date d‚Äôun arc √† l‚Äôarc lui-m√™me. Une ùúá-p√©riode d‚Äôactivit√© d‚Äôun
individu ùë£ ‚àà ùëâ est un intervalle de temps [ùëé; ùëè] durant lequel ùë£ a √©mis un
ensemble de messages ùëÄ (ùëé,ùëè) = {ùëí ‚àà ùê∏ùë£ | ùëé ‚â§ ùë°(ùëí) ‚â§ ùëè}, qui a les propri√©t√©s :

‚Äî ‚àÉùëí1 ‚àà ùëÄ (ùëé,ùëè), ùë°(ùëí1) = ùëé et ‚àÉùëí2 ‚àà ùëÄ (ùëé,ùëè), ùë°(ùëí2) = ùëè et
‚Äî ‚àÄùëí1 ‚àà ùëÄ (ùëé,ùëè), ùë°(ùëí1) Ã∏= ùëè ‚áí ‚àÉùëí2 ‚àà ùëÄ (ùëé, ùëè), 0 < ùë°(ùëí2)‚àíùë°(ùëí1) ‚â§ ùúá¬∑ùëöùëíùëë(ùë£)

‚Äî ‚àÄùëí ‚àà ùê∏ùë£, ùë°(ùëí) < ùëé ‚áí ùë°(ùëí) < ùëé ‚àí ùúá ¬∑ ùëöùëíùëë(ùë£) et ùë°(ùëí) > ùëè ‚áí ùë°(ùëí) >

et

ùëè + ùúá ¬∑ ùëöùëíùëë(ùë£).

J. Creusefond

29

Chapitre 3. √âtude de la structure communautaire de r√©seaux de
communication par les motifs temporels

C'est-√†-dire que les messages √©mis pendant une p√©riode d'activit√© de ùë£
ne sont pas √©loign√©s de plus de ùúá ¬∑ ùëöùëíùëë(ùë£) deux √† deux et ces p√©riodes sont
maximales. Pour chaque individu ùë£ l'ensemble ùê∏ùë£ de ses messages √©mis est
une suite de ùúá-p√©riodes d'activit√©. Je note ùëéùëêùë°(ùë£, ùë°) la date de n de la derni√®re
p√©riode d'activit√© avant un temps ùë° d'un noeud.
Je d√©nis maintenant les a-motifs de la m√™me mani√®re que les motifs,
mais en prenant en compte les p√©riodes d'activit√©. Soit (ùë¢, ùë£, ùë°1, ùë°2) ‚àà ùê∏ l'un
des arcs d'une instance d'un a-motif. Les arcs √©mis par ùë¢ ou par ùë£ avant la
n de leur prochaine p√©riode d'activit√© peuvent aussi √™tre inclus dans cette
instance.

D√©finition 3.5 (Instance de a-motif). Une instance de a-motif est un flux
de liens ùê∫ = (ùëâ, ùê∏) tel que tout arc ùëí = (ùë¢, ùë£, ùë°) est soit :

‚Äî temporellement le premier du flux, ‚àÄùëí‚Ä≤ ‚àà ùê∏, ùë°(ùëí‚Ä≤) > ùë°(ùëí) ou
‚Äî ‚àÉùë§ ‚àà ùëâ , ùë°‚Ä≤ ‚àà R+, (ùë¢, ùë§, ùë°‚Ä≤) ‚àà ùê∏ tel que ùëéùëêùë°(ùë¢, ùë°) < ùë°‚Ä≤ < ùë° ou
‚Äî ‚àÉùë§ ‚àà ùëâ , ùë°‚Ä≤ ‚àà R+, (ùë£, ùë§, ùë°‚Ä≤) ‚àà ùê∏ tel que ùëéùëêùë°(ùë£, ùë°) < ùë°‚Ä≤ < ùë°.
La fonction d'√©quivalence d√©nissant les a-motifs est la m√™me que celle

des motifs. La d√©tection des instances des a-motifs est illustr√©e Fig. 3.2.

Figure 3.2  Pour un noeud, les arcs √©mis forment des p√©riodes d'activit√©.
L'ensemble des arcs incidents forme des instances de a-motifs

Pour des raisons combinatoires, je me restreins aux a-motifs de taille 3,
c'est-√†-dire ceux qui contiennent 3 arcs. Je choisis cette taille car il s'agit

30

J. Creusefond

: P√©riode d'activit√©t: Arc incident au noeudArcs re√ßusArcs √©mis Œît > Œº.med : Pr√©sence dans la m√™me instance de a-motif3.1. Adaptation des motifs aux p√©riodes d‚Äôactivit√©

Figure 3.3  Les motifs de taille 2. Quand l'ordre importe, l'arc rouge a une
date ant√©rieure √† l'arc bleu.

d'un bon compromis entre le temps de calcul n√©cessaire √† la d√©tection des
instances des a-motifs et la complexit√© des structures √† observer.

Remarquons que les a-motifs de taille xe sont en nombre ni. Par ex-
emple, il existe 4 a-motifs de taille 2 (illustr√©s Fig. 3.3), et 26 a-motifs de
taille 3.

Certaines p√©riodes d'activit√© incluent des dizaines de communications
tandis que d'autres n'en incluent qu'une. Si une p√©riode d'activit√© contient ùëò
arcs et que le noeud associ√© a re√ßu ùëô arcs avant cette p√©riode, alors ùëò ¬∑ ùëô ins-
tances de a-motifs de taille 2 seront g√©n√©r√©s. Cela signie qu'un message re√ßu
avant une p√©riode d'activit√© incluant beaucoup de messages a plus d'impact
qu'un message re√ßu avant une p√©riode d'activit√© de petite taille.

Le choix que je fais dans ces travaux est de ne pas favoriser un message
plus qu'un autre en raison de la taille des p√©riodes d'activit√©. Pour cela,
j'associe une pond√©ration aux instances de telle sorte que la somme des poids
de l'ensemble des instances g√©n√©r√©es par un seul arc source donne 1. Ce poids
est calcul√© de la mani√®re suivante : √† partir d'une instance de poids ùëù, si
cette instance peut √™tre √©tendue pour g√©n√©rer ùëò instances de taille sup√©rieure,
chacune de ces instances a un poids ùëù/ùëò. Ainsi, si un arc g√©n√®re originellement
ùëò1 instances de taille 2, chacune a un poids 1/ùëò1. Le premier de ces motifs
g√©n√®re alors ùëò2 instances de taille 3, chacune d'entre elles a un poids 1/(ùëò1¬∑ùëò2).
Le second des motifs de taille 2 g√©n√®re ùëò‚Ä≤
2 instances, chacune a un poids
1/(ùëò1 ¬∑ ùëò‚Ä≤
2), et ainsi de suite. Chaque mesure utilis√©e dans les exp√©riences de
ce chapitre est pond√©r√©e par cette valeur.

Certains motifs de taille 3 sont g√©om√©triquement assez similaires entre
eux, comme "AB-AC-BC" et "AB-AC-CB", ou "AB-BC-CB" et "AB-BA-
BC". An de diminuer le nombre d'observations, je me concentre sur quatre
motifs qui ont √©t√© identi√©s comme importants dans la litt√©rature asso-
ci√©e [106, 89, 104]. Il s'agit de l'√©toile "AB-AC-AD", du va-et-vient "AB-
BA-AB", du triangle "AB-BC-CA" et de la chaine "AB-BC-CD". J'ajoute
le a-motif de spam "AB-AB-AB".

J. Creusefond

31

Chapitre 3. √âtude de la structure communautaire de r√©seaux de
communication par les motifs temporels
3.2 Experiences

Aucun jeu de donn√©es ne fournit de v√©rit√© de terrain d'un graphe temporel.
Il s'agit pourtant d'une donn√©e indispensable pour √©tudier le lien entre la
structure communautaire et la fa√ßon dont les individus communiquent. Pour
pallier ce manque, j'ai obtenu les donn√©es correspondant aux e-mails ayant
transit√© sur les serveurs de l'Universit√© de Caen. J'en ai extrait le r√©seau de
communication correspondant aux √©changes pendant 3 mois, accompagn√© de
partitions provenant de l'annuaire.

Il existe trois donn√©es permettant d'√©tablir une partition du r√©seau. Des
utilisateurs sont associ√©s √† une entit√© de rattachement, typiquement une
Unit√© de Formation et de Recherche ou un Institut Universitaire Technolo-
gique. Le laboratoire de rattachement de chaque chercheur est aussi identi√©.
Enn, la section CNU (Conseil National des Universit√©s) est renseign√©e, ce
qui associe l'utilisateur √† un domaine d'√©tude. En r√®gle g√©n√©rale, un √©tudiant
d√©pend d'une entit√© et d'une section CNU, un chercheur est en plus aect√©
√† un laboratoire et un personnel de support peut n'√™tre attach√© qu'√† une
entit√©.

Le r√©seau r√©sultant a les caract√©ristiques suivantes :
 7 688 665 messages √©chang√©s entre 210 085 adresses,
 1 275 662 messages √©chang√©s entre 26 177 adresses ayant une entit√© de

rattachement renseign√©e,

 168 507 messages √©chang√©s entre 918 adresses appartenant √† un labo-

ratoire,

 378 721 messages √©chang√©s entre 17 275 adresses ayant une section CNU

renseign√©es.

Sont repr√©sent√©es 57 entit√©s de rattachement (459 adresses par entit√© en
moyenne), 45 laboratoires (20 adresses en moyenne) et 146 sections CNU (118
adresses par section en moyenne). Plus de d√©tails sur le contenu du r√©seau et
les d√©marches qui ont √©t√©s n√©cessaires pour l'obtenir sont disponibles App. A.
Puisqu'il y a trois partitions distinctes, je cr√©e trois ux de liens √† partir de
ce r√©seau. Chacun de ces ux de liens correspond aux communications entre
les individus ayant l'une de ces informations indiqu√©e.

En plus du r√©seau de mails de l'universit√© de Caen, j'utilise un ensemble des
r√©seaux de communication provenant du site web Konect 1. Le seul traitement
eectu√© sur ceux-ci est la suppression des boucles et des noeuds de degr√© nuls.

1. http://konect.uni-koblenz.de

32

J. Creusefond

Nom

Enron [55]

Facebook [97]
UC Irvine [76]
Radoslaw [69]
Debian [38]
Digg [29]

Linux Kernel Mailing

List (LKML)2
Slashdot [44]

3.2. Experiences

arcs

e-mails

ùëõ

ùëö

noeuds
86978 1134990 employ√©s
45813 855542 utilisateurs √©critures sur les  murs 
√©tudiants
1899 59835
167
employ√©s
82876
34648 316569 utilisateurs
30360 86203 utilisateurs
26885 1028233 utilisateurs

messages
e-mails
r√©ponses
r√©ponses
r√©ponses

51083 139789 utilisateurs

r√©ponses

Table 3.1  Les r√©seaux de Konect

Aucun des r√©seaux de Konect n'est associ√© √† une v√©rit√© de terrain. Je
g√©n√®re une partition de ces ux de liens √† partir de l'algorithme de Louvain [9].
Cet algorithme s'applique sur des graphes non temporels. Je g√©n√®re donc des
graphes non temporels en utilisant les m√™mes noeuds que le graphe temporel
et un lien entre deux noeuds si le graphe temporel contient une interaction
entre ceux-ci.

Ces communaut√©s sont donc g√©n√©r√©es en ignorant l'aspect temporel des
r√©seaux. Mon objectif est de d√©terminer si les communaut√©s ainsi g√©n√©r√©es et
les communaut√©s observ√©es ont des propri√©t√©s similaires en ce qui concerne
les motifs.

Je classe ces r√©seaux en trois cat√©gories :

Les plateformes de communication directe o√π les utilisateurs s'envoient des
messages. L'entreprise Enron a d√ª, au terme d'un proc√®s, publier les
e-mails qui ont transit√© par ses serveurs. Le r√©seau Facebook repr√©sente
la publication sur les  murs  dans le r√©seau social web, c'est-√†-dire
des messages publics entre utilisateurs. UC Irvine contient les messages
transmis entre les membres d'une communaut√© √©tudiante de l' Univer-
sity of California . Radoslaw correspond √† la communication interne
entre employ√©s d'une entreprise de manufacture.

Les listes de diusion techniques o√π les utilisateurs posent et r√©pondent √†
des questions. Deux listes de diusions sont pr√©sent√©es, celle de Debian
et celle du noyau Linux (LKML)

Les sites d'informations o√π les utilisateurs commentent un sujet. Les utilisa-
teurs du site Digg peuvent proposer, voter et commenter des actualit√©s.

2. http://konect.uni-koblenz.de/networks/lkml-reply

J. Creusefond

33

Chapitre 3. √âtude de la structure communautaire de r√©seaux de
communication par les motifs temporels

Le site Slashdot fonctionne de mani√®re similaire et a une orientation
technophile.

Les r√©seaux provenant de l'universit√© de Caen appartiennent √† la premi√®re
cat√©gorie.

3.2.1 Analyse des propri√©t√©s des a-motifs

Tout d'abord, j'analyse les statistiques de base des a-motifs an de d√©-
terminer les di√©rences avec les motifs. Dans ces exp√©riences, j'ai suppos√©
qu'une p√©riode d'activit√© englobait typiquement plusieurs communications.
Pour ùúá = 1 (voir d√©nition 3.4), la moiti√© des arcs termine une p√©riode d'ac-
tivit√©, ce qui implique que beaucoup de p√©riodes ne contiennent qu'un arc
dans les jeux de donn√©es. An d'obtenir des p√©riodes d'activit√© correspondant
mieux √† mes suppositions, j'ai choisi ùúá = 2.

Zhao et al. [106] ont observ√© que les motifs de chaine et d'√©toile sont
les plus fr√©quents. C'est aussi ce que l'on observe Fig. 3.4. Les a-motifs de
cha√Æne sont les plus fr√©quents (16% en moyenne), suivis par l'√©toile (6%) et
le va-et-vient (3%).

Je mesure ensuite le z-score de ces fr√©quence, pr√©sent√© Fig. 3.5. Je vais
comparer les observations de Tabourier et al. [89] sur un r√©seau d'appels
t√©l√©phoniques avec mes observations sur les r√©seaux mentionn√©s plus haut.
Comme relev√© dans [89], les a-motifs d'√©toile sont moins communs dans les
r√©seaux r√©els que dans le mod√®le nul, ce qui se traduit dans mes mesures par
un z-score n√©gatif. Les a-motifs de chaine ont un z-score n√©gatif, ce qui est
l'inverse de ce que Tabourier et al. avaient relev√©. Une explication possible
de cette di√©rence est que la d√©nition des a-motifs entraine l'apparition de
beaucoup de chaines dans le mod√®le nul. En eet, si la fen√™tre temporelle est
remplac√©e par des p√©riodes d'activit√©, une chaine peut √™tre beaucoup plus
facilement initi√©e par des √©missions al√©atoires.

Les z-scores mesur√©s ici sont hauts. Ceci implique une di√©rence impor-
tante avec le mod√®le nul, la causalit√© semble donc avoir une inuence impor-
tante sur les a-motifs relev√©s.

Sur l'ensemble des r√©seaux consid√©r√©s, le spam et le va-et-vient ont des
z-scores toujours positifs tandis que l'√©toile a un z-score toujours n√©gatif.
Je rejoins l'observation de Zhao et al. : le va-et-vient a le z-score le plus
important. J'apporte une nouvelle information : le a-motif de spam, qui n'a
pas √©t√© consid√©r√© dans la litt√©rature, pr√©sente une fr√©quence non expliqu√©e
par le mod√®le nul. Je mesure que les a-motifs d'√©toile sont statistiquement
plus pr√©sents dans le mod√®le nul que dans les donn√©es. J'en d√©duis que les
a-motifs d'√©toile des donn√©es sont majoritairement dues au hasard.

34

J. Creusefond

3.2. Experiences

Figure 3.4  La fr√©quence des a-motifs des di√©rents r√©seaux

Figure 3.5  Le z-score de la fr√©quence des a-motifs des di√©rents r√©seaux.
Un score d√©passant 3 en valeur absolue est consid√©r√© comme tr√®s signicatif.
Les valeurs sup√©rieures √† 20 ou inf√©rieures √† -20 sont tronqu√©es.

J. Creusefond

35

Chapitre 3. √âtude de la structure communautaire de r√©seaux de
communication par les motifs temporels

Figure 3.6  Le z-score de la dur√©e entre l'√©mission du premier message et
du second

Le a-motif de triangle ne fait pas consensus au niveau du z-score des jeux
de donn√©es. Ce a-motif a aussi le z-score moyen le plus faible parmi les a-
motifs observ√©s. M√™me si les z-scores du triangle sont en moyenne positifs,
l'inuence de la causalit√© sur la fr√©quence de ces motifs n'est pas claire de
mani√®re g√©n√©rale.

Une autre indication que les a-motifs sont similaire aux motifs est pr√©sen-
t√©e Fig. 3.6. En eet, pour la plupart des a-motifs, la dur√©e entre l'√©mission
des messages est inf√©rieure √† celle du mod√®le nul. Ceci indique un enchaine-
ment plus rapide des communications que ce que pr√©vu par le mod√®le. Comme
il s'agit du crit√®re utilis√© pour d√©nir les motifs, les a-motifs semblent simi-
laires aux motifs.

Le a-motif d'√©toile est le seul dont la dur√©e entre les √©missions a un z-score
positif. L'intervalle de temps entre les deux premiers messages des instances
du a-motif √©toile est donc plus long dans les donn√©es que dans le mod√®le nul.
Les jeux de donn√©es provenant de l'universit√© de Caen ont un z-score
positif sur la dur√©e du a-motif chaine, contrairement √† tous les autres jeux
de donn√©es. Il est notable que ces jeux de donn√©es couvrent des vacances
scolaires d'une √† deux semaines suivant les √©tablissements. Il est possible
qu'un grand nombre d'e-mails ait √©t√© envoy√© durant ces vacances, et que ces

36

J. Creusefond

3.2. Experiences

e-mails aient form√© des chaines. Le d√©lai important de r√©ponse serait alors
d√ª aux vacances.

Je conclue que certains a-motifs sont inuenc√©s par la causalit√©. En eet,
les mesures eectu√©es montrent une di√©rence importante des propri√©t√©s des
instances de ces a-motifs entre le mod√®le nul et les jeux de donn√©es.

On a pu voir que les instances des a-motifs de spam et de va-et-vient sont
plus fr√©quentes et plus courtes que ces m√™mes instances dans le mod√®le nul.
J'interpr√®te ces r√©sultats comme dus √† un lien causal entre les instances de
ces motifs.

Les instances du a-motif d'√©toile ont des propri√©t√©s inverses : dans les
donn√©es, elles sont moins fr√©quentes et plus longues que dans le mod√®le nul.
Or, dans ce mod√®le o√π la causalit√© est supprim√©e, les a-motifs tels que le
spam et le va-et-vient deviennent moins fr√©quents. Je suppose alors que le
mod√®le forme des instances de a-motifs d'√©toile avec les arcs qui composaient
les instances des autres a-motifs dans les donn√©es.

Les instances du a-motif de chaine dans les donn√©es sont moins fr√©quentes
et plus courtes que dans le mod√®le nul. Ces di√©rences sugg√®rent que les a-
motifs de chaine observ√©s sont li√©s causalement.

Il n'y a pas de consensus quant √† la di√©rence de fr√©quence du motif
de triangle sur les jeux de donn√©es. Les z-scores de la dur√©e sont cependant
majoritairement n√©gatifs, ce qui laisse supposer que les triangles sont li√©s
causalement.

3.2.2 Etude de la relation entre a-motifs et communau-

t√©s

J'√©tudie ensuite les arcs utilis√©s par les a-motifs, en distinguant arcs in-
ternes aux communaut√©s et arcs externes. L'objectif de cette exp√©rience est
de comparer les propri√©t√©s des a-motifs se produisant entre les communaut√©s
et ceux se produisant √† l'int√©rieur. Soit ùë§ùëñùëõ(ùëö) la somme des poids des a-
motifs de type ùëö qui utilisent un arc interne. On s'int√©resse aux poids relatifs,
ùëö‚Ä≤‚ààùëÄ ùë§ùëñùëõ(ùëö‚Ä≤) avec ùëÄ l'ensemble des a-motifs
donc ùë§ùëõùëúùëüùëö
extraits (ici, l'ensemble des a-motifs de taille 3). La distribution de ces poids
est similaire √† la Fig. 3.4.

(ùëö) = ùë§ùëñùëõ(ùëö)/‚àëÔ∏Ä

ùëñùëõ

Je calcule un ratio entre ces poids internes et les poids externes d√©crit

Eq. 3.2.

ùëüùëéùë°ùëñùëú(ùëö) =

ùë§ùëõùëúùëüùëö

ùëíùë•ùë°

max(ùë§ùëõùëúùëüùëö

ùëíùë•ùë°

(ùëö) ‚àí ùë§ùëõùëúùëüùëö
(ùëö), ùë§ùëõùëúùëüùëö

ùëñùëõ

ùëñùëõ

(ùëö)

(ùëö))

(3.2)

Si ce ratio d√©passe z√©ro pour un a-motif, les instances de cet a-motif ont une

J. Creusefond

37

Chapitre 3. √âtude de la structure communautaire de r√©seaux de
communication par les motifs temporels

Figure 3.7  Le ratio entre la proportion ext√©rieure et int√©rieure des a-motifs

fr√©quence relative sup√©rieure √† l'ext√©rieur des communaut√©s par rapport √†
l'int√©rieur. Les r√©sultats sont pr√©sent√©s Fig. 3.7.

Tout d'abord, le a-motif de va-et-vient semble avoir une fr√©quence relative
plus importante √† l'int√©rieur des communaut√©s, tous les jeux de donn√©es
ayant un ùëüùëéùë°ùëñùëú(AB-AB-AB) < 0. Le a-motif de spam pr√©sente les m√™mes
caract√©ristiques, sauf pour le r√©seau de Caen_CNU qui a un ratio au-dessus
de z√©ro (ratio de 0,16). De m√™me, les ratios du a-motif de triange sont n√©gatifs
sauf pour Debian (ratio de 0,9). L'inverse se produit pour le a-motif d'√©toile,
majoritairement plus fr√©quent sur la fronti√®re des communaut√©s, sauf pour
Caen_Lab (ratio de ‚àí0,11), et Debian (ratio do ‚àí0,13). Pour le a-motif
chaine, les ratios sont majoritairement positifs mais trois des jeux de donn√©es
ont des ratios n√©gatifs. Il est donc dicile d'en tirer une conclusion g√©n√©rale.
La Figure 3.8 montre que la grande majorit√© (‚àº 84%) des z-scores du
ratio pr√©c√©demment √©tudi√© sont positifs. Ceci implique que les ratios dans les
jeux de donn√©es sont sup√©rieurs √† ceux du mod√®le nul. Donc, dans le jeu de
donn√©es, les a-motifs se situent plus souvent √† l'ext√©rieur des communaut√©s
par rapport √† ce que le mod√®le nul pr√©voyait.

Je conclue que ces r√©sultats montrent une tendance assez claire pour chaque
a-motif √† se d√©rouler soit exclusivement √† l'int√©rieur des communaut√©s soit

38

J. Creusefond

3.2. Experiences

Figure 3.8  Le z-score du ratio Fig. 3.7

exclusivement √† l'ext√©rieur. D'un c√¥t√©, les instances des a-motifs de cha√Æne
et d'√©toile sont majoritairement externes. D'un autre c√¥t√©, les instances des
a-motifs de spam, de va-et-vient et de triangle sont majoritairement internes.
Il semble donc que les motifs puissent servir √† di√©rencier arcs internes et
externes des communaut√©s. Il y a donc des modes de communication dif-
f√©rents √† l'int√©rieur des communaut√©s et √† l'ext√©rieur. Dans le premier cas,
on retrouve plut√¥t des dialogues, comme l'indique les motifs de va-et-vient
et de triangle. Dans le second cas, on identie des motifs de propagation
d'information non r√©ciproques.

Les r√©sultats montrent que la causalit√© a pour eet que les motifs sont
plus externes que pr√©vu par le mod√®le nul. Une interpr√©tation possible de
ce r√©sultat est que c'est sur la fronti√®re des communaut√©s que se d√©roule la
plus grande partie des a-motifs li√©s par la causalit√©. Une explication est que
les communications qui se d√©roulent aux fronti√®res ont besoin de structures
particuli√®res. En eet, les individus qui s'y transmettent des informations
servent de point de transfert entre les deux communaut√©s, ce qui g√©n√®re des
a-motifs sp√©ciques quand ils sont dius√©s.

Enn, on remarque que les communaut√©s produites par l'algorithme de
Louvain et celles provenant des jeux de donn√©es de l'Universit√© de Caen
pr√©sentent des r√©sultats similaires. Cela implique que les propri√©t√©s tempo-

J. Creusefond

39

Chapitre 3. √âtude de la structure communautaire de r√©seaux de
communication par les motifs temporels
relles observ√©es sont des caract√©ristiques de communaut√©s structurelles. Ces
observations ne di√©rencient pas les communaut√©s observ√©es sur un r√©seau
temporel des communaut√©s obtenues par un graphe.

Dans ce chapitre, j'ai pr√©sent√© une d√©nition alternative des motifs dans
un graphe temporel qui prend en compte les p√©riodes d'activit√© dans
les communications. Avec l'aide de donn√©es fournies par l'Universit√© de
Caen et avec d'autres donn√©es de la litt√©rature, j'ai pu √©tablir certaines
propri√©t√©s de ces motifs. Je rel√®ve notamment des di√©rences importantes
entre les motifs relev√©s sur des donn√©es r√©elles et les motifs d'un mod√®le
nul qui a √©t√© cr√©√© pour supprimer la causalit√© dans le r√©seau. Cela porte
√† croire que cette version d√©tecte des motifs li√©s causalement.

J'ai aussi observ√© le lien entre la structure communautaire et les mo-
tifs. J'ai pu remarquer que certains motifs, comme le spam, le va-et-vient
et le triangle, √©taient g√©n√©ralement plus pr√©sents √† l'int√©rieur qu'√† l'ext√©-
rieur des communaut√©s. Un autre motif, l'√©toile, apparait fr√©quemment √†
l'ext√©rieur des communaut√©s. En plus, tous les motifs apparaissent plus
fr√©quemment √† l'ext√©rieur qu'√† l'int√©rieur des communaut√©s par rapport
√† ce que le mod√®le nul pr√©voyait. Ces observations pourraient aider le d√©-
veloppement de la d√©tection de communaut√©s sur ux de liens, en √©tant
utilis√© en tant que fonction de qualit√©, par exemple.

40

J. Creusefond

Chapitre 4

Une nouvelle fonction de qualit√© :
la compacit√©

Dans ce chapitre, je d√©finis une fonction de qualit√©, la compa-
cit√©. Celle-ci est bas√©e sur un mod√®le de diffusion o√π chaque in-
dividu retransmet directement les informations re√ßues √† chaque
pas de temps. Dans ce mod√®le, une information se diffuse rapi-
dement dans une communaut√© si les chemins entre ses membres
sont courts. J‚Äô√©tudie ensuite cette mesure de mani√®re analytique.
Les travaux pr√©sent√©s dans ce chapitre ont fait l‚Äôobjet de deux

publications [25, 26].

Dans le chapitre pr√©c√©dent, j'ai √©tabli qu'il √©tait possible de di√©rencier
arcs internes et arcs externes des communaut√©s en observant l'ordre des com-
munications entre les membres du r√©seau.

On sait que la diusion d'information est particuli√®rement rapide au
sein de certaines communaut√©s comme pour les utilisateurs de forums de
sant√© [15]. Une faible longueur des chemins acc√©l√®re la diusion d'informa-
tion [24]. Par cons√©quent, mesurer la taille des chemins entre les membres
d'une communaut√© caract√©rise en partie la vitesse de diusion des messages
au sein de ses membres.

Ce crit√®re de la distance dans les communaut√©s n'est pas directement
corr√©l√© au crit√®re de s√©parabilit√© (voir Sec. 2.3). Leskovec et al. [64] comparent
les  clusters  r√©sultants de l'application de deux algorithmes de d√©tection
de communaut√©s sur les m√™mes graphes. Ils observent notamment que les
 clusters  produits par l'un des deux algorithmes pr√©sentent des chemins
plus courts que ceux de l'autre. Cependant, les  clusters  ayant des chemins
courts ont aussi une moins bonne conductance que ceux produits par l'autre
algorithme.

J. Creusefond

41

Chapitre 4. Une nouvelle fonction de qualit√© : la compacit√©

Dans ce chapitre, je propose une nouvelle fonction de qualit√© appel√©e
compacit√©. Elle se base sur le diam√®tre pour estimer l'ecacit√© d'une diusion
d'information dans une communaut√©. Je montre ensuite que cette fonction de
qualit√© satisfait les propri√©t√©s de Van Laarhoven et Marchiori [95], con√ßues
pour d√©crire un comportement intuitif des fonctions de qualit√©.

Alors que je note la compacit√© ùëûùëêùëúùëöùëù(ùê∂) dans le reste du manuscrit, je la

d√©signe par Comp(ùê∂) dans ce chapitre an d'all√©ger les notations.

4.1 Mod√©lisation et d√©finition d‚Äôune structure

communautaire compacte

Dans cette section, je pr√©sente une nouvelle fonction de qualit√©, la com-

pacit√©.

Certaines communaut√©s permettent une diusion rapide des informa-
tions [15]. La compacit√© permet d'identier les communaut√©s o√π la diusion
d'information est rapide en mesurant la vitesse de propagation de celles-ci.
Le terme  compacit√©  provient du fait que les structures favoris√©es par ce
type de mesure ont un diam√®tre faible et sont donc  compactes .

J'utilise l' Independant Cascade Model  [40, 53] avec une probabilit√© de
contamination de 1 comme mod√®le de diusion d'information. Dans ce mo-
d√®le, un unique individu poss√®de initialement une information. √Ä chaque pas
de temps, chaque individu poss√©dant l'information la transmet √† ses voisins
qui ne la poss√®dent pas, en activant l'ar√™te qui les relie. On remarque alors
que le temps n√©cessaire √† ce que la diusion atteigne toute la communaut√©
est √©gal √† la distance maximale entre le noeud d'origine et les autres noeuds
de la communaut√©. La vitesse de propagation d'une diusion d'information
correspond au nombre moyen d'ar√™tes activ√©es par pas de temps lors de la
diusion.

Le noeud de d√©part d'une diusion a une inuence sur la vitesse de pro-
pagation En eet, une diusion partant d'un noeud proche de tous les autres
dans la communaut√© a une vitesse de propagation bien plus importante qu'en
partant d'un noeud excentr√©. Je consid√®re la pire vitesse de propagation dans
le pire des cas. Ce choix permet de garantir que les diusions dans les com-
munaut√©s  compactes  sont toujours rapides. Le pire des cas a lieu quand
le noeud de d√©part d'une diusion se situe √† l'extr√©mit√© d'un diam√®tre.

L'ensemble de ces √©l√©ments am√®ne √† la d√©nition formelle de la compacit√©.

42

J. Creusefond

4.1. Mod√©lisation et d√©finition d‚Äôune structure communautaire compacte

D√©finition 4.1 (Compacit√©). La compacit√© d‚Äôun ¬´ cluster ¬ª ùëê est d√©finie par :

‚éß‚é®‚é© 0

Comp(ùëê) =

ùëö(ùëê)

ùëëùëñùëéùëö(ùëê)

si ùëëùëñùëéùëö(ùëê) = 0 ou si ùëê non connexe

sinon

Pour calculer la compacit√© d'une partition, on somme la compacit√© des

 clusters  qui la composent.

Le d√©savantage de l'utilisation du diam√®tre est que la complexit√© de sa
mesure est quadratique en la taille de la communaut√©. De plus, le calcul doit
√™tre refait enti√®rement en cas de modication de la partition. Je note donc
que la compacit√© est plus adapt√©e √† l'√©valuation de partitions, qui peut √™tre
faite sur des r√©seaux de taille r√©duite, qu'√† de l'optimisation gloutonne.

La compacit√© n'utilisant que les arcs internes, elle n'est pas aect√©e par
les relations des membres de la communaut√© avec l'ext√©rieur de celle-ci. Ainsi,
tout ensemble de noeuds est optimal en compacit√© si ses noeuds forment une
clique.

La compacit√© et les fonctions se basant sur la s√©parabilit√© ne favorisent
pas les m√™mes  clusters . Pour l'illustrer, je compare la compacit√© et la
modularit√© sur des exemples jouet. J'appelle informellement  satellite  un
noeud de degr√© 1 et  pont  un noeud √† la jonction de sous-parties denses
du graphe, comme le noeud gris√© Fig. 4.1a.

La modularit√© a tendance √† favoriser les  clusters  qui incluent des
satellites et des ponts (par exemple Fig. 4.1). Sur cet exemple, la partition
pr√©sent√© Fig. 4.1a a une modularit√© plus importante qu'en Fig. 4.1b, o√π le
satellite ainsi que le pont sont dans leur propre  cluster . La modularit√©
peut donc √™tre utilis√©e dans une application o√π chaque noeud doit √™tre class√©
dans une communaut√© non triviale. N√©anmoins, cette approche n'est pas
adapt√©e quand le but est de trouver des communaut√©s o√π la transmission
d'informations est ecace. La compacit√© correspond √† une approche plus
conservatrice : si un utilisateur n'a qu'une seule connexion, il semble dicile
de conclure sur son appartenance communautaire.

Un autre exemple soulignant la di√©rence entre les deux mesures est pr√©-
sent√© Fig. 4.2. La partition optimale en modularit√© s√©pare les noeuds de la
3-clique centrale pour grouper les satellites connect√©s aux noeuds participant
√† la clique. D'un autre c√¥t√©, la compacit√© favorise la coh√©sion interne, par
cons√©quent son optimum regroupe la 3-clique centrale et isole les satellites.
On peut √©tendre l'exemple en consid√©rant une ùëò-clique centrale o√π chaque
noeud est de plus connect√© √† ùëò + 1 satellites. Pour tout ùëò > 2 entier, la
modularit√© favorisera syst√©matiquement le regroupement avec les satellites
tandis que la compacit√© favorisera la conservation de la clique centrale.

J. Creusefond

43

Chapitre 4. Une nouvelle fonction de qualit√© : la compacit√©

(a) Partition incluant noeuds satellites et de connexion

(b) Partition excluant noeuds satellites et de connexion

Figure 4.1  Modularit√© and compacit√© de deux partitions du m√™me graphe

Figure 4.2  Un cas simple d'une clique centrale avec des satellites.

44

J. Creusefond

qmod=0.194Comp=2qmod=0.194Comp=2qmod=0.136Comp=3qmod=-0.003Comp=0qmod=0.182Comp=3qmod=-0.012Comp=0Modularit√©maximale     Compacit√©maximale4.2. Respect des axiomes de Van Laarhoven et Marchiori

4.2 Respect des axiomes de Van Laarhoven et

Marchiori

Dans cette section, je montre que la compacit√© respecte un ensemble de
propri√©t√©s con√ßues pour repr√©senter un comportement intuitif de la commu-
naut√©.

Van Laarhoven et Marchiori [95] ont cr√©√© un ensemble de six axiomes :
invariance par permutation, invariance d‚Äô√©chelle, richesse, monoto-
nicit√©, localit√© et continuit√©. Selon eux, une fonction de qualit√© devrait
respecter ces axiomes dans le contexte du partitionnement de graphes. Ces
axiomes sont di√©rents des propri√©t√©s pr√©sent√©es Sec. 2.3. En eet, ces pro-
pri√©t√©s sont utilis√©es dans les d√©nitions des communaut√©s. Les axiomes de
Van Laarhoven et Marchiori sont ind√©pendants des d√©nitions des commu-
naut√©s.

Dans leur article [95], les auteurs prouvent notamment que la modularit√©
ne respecte pas les axiomes de localit√© et de monotonicit√©. Ils ne pr√©sentent
aucune fonction de qualit√© sans param√®tre satisfaisant tous ces axiomes.

Ces propri√©t√©s portent sur des graphes pond√©r√©s. Je d√©nis maintenant la
compacit√© sur les graphes pond√©r√©s. La communication entre deux individus
proches permet souvent une transmission rapide des informations entre ces
individus [53]. An d'utiliser le m√™me formalisme que Van Laarhoven et Mar-
chiori [95], un poids fort sur une ar√™te signie une grande anit√© donc une
vitesse de transmission faible. Utiliser la distance classique d'un graphe pon-
d√©r√© (c'est-√†-dire la somme des poids des ar√™tes) produit un r√©sultat contraire
√† ce que je souhaite obtenir. Je consid√®re donc le poids associ√© aux ar√™tes
comme √©tant une vitesse de transmission, l'inverse de celui-ci √©tant alors le
temps de transmission. Dans un graphe pond√©r√© (ùëâ, ùë§), la fonction de lon-
gueur d'un chemin ùúã que j'utilise est la suivante :

‚àëÔ∏Å

ùëôùëíùëõ(ùúã) =

1

ùë§(ùëí)

ùëí‚ààùúã

(4.1)

Cette d√©nition de la longueur d'un chemin est utilis√©e par la compacit√© dans
le calcul du diam√®tre. Le num√©rateur correspond √† la somme du poids des
ar√™tes internes au  cluster  consid√©r√©.

Je vais maintenant montrer que la compacit√© respecte les six axiomes de

Van Laarhoven et Marchiori.

D√©finition 4.2 (Invariance par permutation). Une fonction de qualit√© ùëÑ
est invariante par permutation si, pour tous graphes ùê∫ = (ùëâ,ùë§), toute

J. Creusefond

45

Chapitre 4. Une nouvelle fonction de qualit√© : la compacit√©

partition ùê∂ ‚àà ùíû(ùëâ ) et tout isomorphisme ùëì qui √† ùê∫ associe ùëì (ùê∫) = (ùëâ ‚Ä≤, ùë§‚Ä≤),
on a ùëÑùê∫(ùê∂) = ùëÑùëì (ùê∫)(ùëì (ùê∂)).

Intuition : Une fonction de qualit√© ne devrait pas d√©pendre de la repr√©sen-
tation du graphe.

Th√©or√®me 4.3. La compacit√© est invariante par permutation.

D√©monstration. Par abus de notation, j'utilise ùëì sur des  clusters  et des
noeuds. Prouvons que les distances sur les graphes pond√©r√©s sont invariantes
par permutation, en utilisant la notion de longueur d√©nie Eq. 4.1 :

ùëëùëñùë†ùë°ùëì (ùê∫)(ùëì (ùë¢), ùëì (ùë£)) =

=

min

ùúã‚ààŒ†ùëì (ùê∫)(ùëì (ùë¢),ùëì (ùë£))

(ùëôùëíùëõùëì (ùê∫)(ùúã))

(ùëôùëíùëõùê∫(ùëì‚àí1(ùúã)))

min

ùúã‚ààŒ†ùê∫(ùë¢,ùë£)

= ùëëùëñùë†ùë°ùê∫(ùë¢, ùë£)

Ceci implique que la compacit√© est invariante par permutation :
(ùëì (ùëñ),ùëì (ùëó))‚ààùëì (ùëê)2 ùë§‚Ä≤(ùëì (ùëñ), ùëì (ùëó))

Compùëì (ùê∫)(ùëì (ùê∂)) =

ùëì (ùëê)‚ààùëì (ùê∂)

max(ùëì (ùë¢),ùëì (ùë£))‚ààùëì (ùê∂)2(ùëëùëñùë†ùë°ùëì (ùê∫)(ùëì (ùë¢),ùëì (ùë£)))

(ùëì (ùëñ),ùëì (ùëó))‚ààùëì (ùëê)2 ùë§(ùëñ, ùëó)

=

ùëì (ùëê)‚ààùëì (ùê∂)

max(ùëì (ùë¢),ùëì (ùë£))‚ààùëì (ùëê)2(ùëëùëñùë†ùë°ùê∫(ùë¢, ùë£))

‚àëÔ∏Å
‚àëÔ∏Å

‚àëÔ∏Ä
‚àëÔ∏Ä

Compùëì (ùê∫)(ùëì (ùê∂)) = Compùê∫(ùê∂)

La compacit√© est stable par isomorphisme, et est donc invariante par permu-
tation.

D√©finition 4.4 (Invariance en √©chelle). Une fonction de qualit√© ùëÑ est inva-
riante en √©chelle si pour tous les graphes ùê∫ = (ùëâ, ùë§), toutes les partitions
ùê∂1, ùê∂2 ‚àà ùíû(ùëâ ) de ùê∫ et toutes les constantes ùõº > 0, ùëÑùê∫(ùê∂1) ‚â§ ùëÑùê∫(ùê∂2) si et
seulement si ùëÑùõºùê∫(ùê∂1) ‚â§ ùëÑùõºùê∫(ùê∂2), o√π ùõºùê∫ = (ùëâ, ùõº ¬∑ ùë§) est le graphe ùê∫ dont
les poids des ar√™tes est multipli√© par ùõº.

Intuition : Le poids des ar√™tes a souvent une √©chelle choisie arbitrairement.
Tout changement sans inversion de cette √©chelle ne devrait pas avoir d'impact
sur le classement des partitions par la fonction de qualit√©.

Th√©or√®me 4.5. La compacit√© est invariante en √©chelle

46

J. Creusefond

4.2. Respect des axiomes de Van Laarhoven et Marchiori

D√©monstration. Commen√ßons par prouver une corr√©lation lin√©aire des lon-
gueurs des chemins entre ùê∫ et ùõºùê∫.

ùëôùëíùëõùõºùê∫(ùë£0, ..., ùë£ùëò) =

ùëôùëíùëõùõºùê∫(ùë£0, ..., ùë£ùëò) =

ùëò‚àí1‚àëÔ∏Å

1

ùõº ¬∑ ùë§(ùë£ùëñ, ùë£ùëñ+1)

ùëñ=0
ùëôùëíùëõùê∫(ùë£0, ..., ùë£ùëò)

ùõº

Du fait que les longueurs des chemins sont corr√©l√©s lin√©airement, les che-

mins minimums sont les m√™mes dans ùê∫ et dans ùõºùê∫, ce qui implique :

ùëëùëñùë†ùë°ùõºùê∫(ùë¢, ùë£) =

min

ùúã‚ààŒ†ùõºùê∫(ùë¢,ùë£)

ùëôùëíùëõùõºùê∫(ùúã)

=

=

ùëôùëíùëõùê∫(ùúã)

ùõº

min

ùúã‚ààŒ†ùõºùê∫(ùë¢,ùë£)
ùëëùëñùë†ùë°ùê∫(ùë¢, ùë£)

ùõº

Par le m√™me raisonnement, ùëëùëñùëéùëöùõºùê∫(ùëê) = ùëëùëñùëéùëöùê∫(ùëê)/ùõº La compacit√© peut

√™tre √©crite de la mani√®re suivante :

Compùõºùê∫(ùê∂) =

=

‚àëÔ∏Å
‚àëÔ∏Å

ùëê‚ààùê∂

‚àëÔ∏Å
‚àëÔ∏Å

(ùëñ,ùëó)‚ààùëê2

ùëê‚ààùê∂

(ùëñ,ùëó)‚ààùëê2

ùë§ùõºùê∫(ùëñ, ùëó)
ùëëùëñùëéùëöùõºùê∫(ùëê)
ùõº2 ùë§ùê∫(ùëñ, ùëó)
ùëëùëñùëéùëöùê∫(ùëê)

= ùõº2Compùê∫(ùê∂)

Par cons√©quent, pour toutes partitions ùê∂1, ùê∂2 ‚àà ùíû(ùëâ ), si Compùê∫(ùê∂1) ‚â•
Compùê∫(ùê∂2) alors ùõº2Compùê∫(ùê∂1) ‚â• ùõº2Compùê∫(ùê∂2), ce qui implique Compùõºùê∫(ùê∂1) ‚â•
Compùõºùê∫(ùê∂2). La compacit√© est donc invariante en √©chelle.

D√©finition 4.6 (Richesse). Une fonction de qualit√© ùëÑ est riche si pour
tous les ensembles ùëâ et toutes les partitions ùê∂* ‚àà ùíû(ùëâ ), il existe un graphe
ùê∫ = (ùëâ, ùë§) tel que ùê∂* est la partition ùëÑ-optimale de ùëâ , c‚Äôest-√†-dire que
ùê∂* = arg maxùê∂‚ààùíû(ùëâ ) ùëÑùê∫(ùê∂).
Intuition : N'importe quelle partition d'ensemble de noeuds devrait pouvoir
√™tre optimale par rapport √† la fonction de qualit√©, si la structure du graphe
correspond.

J. Creusefond

47

Chapitre 4. Une nouvelle fonction de qualit√© : la compacit√©

Th√©or√®me 4.7. La compacit√© est riche
D√©monstration. ‚àÄùê∂* ‚àà ùíû(ùëâ ), soit ùê∫ = (ùëâ, ùë§) un graphe tel que, ‚àÄ(ùëñ, ùëó) ‚àà ùëâ 2,
ùë§(ùëñ, ùëó) = 1 si ‚àÉùëê ‚àà ùê∂* tel que ùëñ ‚àà ùëê et ùëó ‚àà ùëê (ùëñ et ùëó appartiennent au
m√™me  cluster ) et ùë§(ùëñ, ùëó) = 0 sinon. ùê∫ est donc un graphe dont toutes
les composantes connexes sont des cliques, et ces cliques sont les  clusters 
composant ùê∂*. Soit ùê∂ ‚àà ùíû(ùëâ ) une partition optimale en compacit√© de ùê∫,
c'est-√†-dire que arg maxùê∑‚ààùíû(ùëâ ) Compùê∫(ùê∑) = ùê∂.
Si ‚àÉùëê ‚àà ùê∂ tel que ‚àÉ(ùëñ, ùëó) ‚àà ùëê2, ùë§(ùëñ, ùëó) = 0, alors ùëñ et ùëó ne sont pas dans
le m√™me  cluster  dans ùê∂*. Donc, ùëê est d√©connect√©, ce qui implique que
sa compacit√© est nulle. Si ùëê est compos√©e de ùëò composantes connexes, on
cr√©e ùëò nouveaux  clusters  (ùëê1, ..., ùëêùëò) contenant chacun les noeuds d'une
composante connexe di√©rente. Remarquons que la compacit√© de chacun de
ces  clusters  est positive, et donc sup√©rieure ou √©gale √† la compacit√© de ùëê.
Soit ùê∂‚Ä≤ ‚àà ùíû(ùëâ ) telle que ùê∂‚Ä≤ = ùê∂ ‚àñ ùëê ‚à™ {ùëê1, ..., ùëêùëò}. Alors :

Comp(ùê∂‚Ä≤) = Comp(ùê∂ ‚àñ ùëê) + Comp({ùëê1, ..., ùëêùëò})

‚â• Comp(ùê∂ ‚àñ ùëê) + Comp(ùëê)

‚áî Comp(ùê∂‚Ä≤) ‚â• Comp(ùê∂)

Ces scores sont √©gaux si et seulement si tous les noeuds de ùëê ont un degr√©
nul. Nous pouvons donc conclure que ‚àÄùëê ‚àà ùê∂, ùëê est connexe ou compos√©e
uniquement de noeuds √† degr√© nul (condition de connexit√©).
Soient ùëê1, ùëê2 ‚àà ùê∂, ùëê1 Ã∏= ùëê2 tels que ‚àÉùëñ ‚àà ùëê1, ‚àÉùëó ‚àà ùëê2 avec ùë§(ùëñ, ùëó) = 1. Il y a
donc une ou plusieurs ar√™tes entre deux  clusters  dans ùê∂. Alors ùëñ et ùëó sont
dans le m√™me  cluster  dans ùê∂* et dans di√©rents  clusters  dans ùê∂. Les
noeuds ùëñ et ùëó ont un degr√© non nul, donc par la condition de connexit√© les
 clusters  ùëê1 et ùëê2 sont tous deux connexes, ce qui implique que ùëê1 ‚à™ ùëê2 est
connexe. Nous appelons ùê∂‚Ä≤ ‚àà ùíû(ùëâ ) la partition correspondant √† ùê∂ o√π ùëê1 et ùëê2
ont √©t√©s remplac√©s par leur fusion, formellement ùê∂‚Ä≤ = (ùê∂‚àñ{ùëê1, ùëê2})‚à™{ùëê1‚à™ùëê2}).

Comp(ùê∂‚Ä≤) = Comp(ùê∂ ‚àñ {ùëê1, ùëê2}) + Comp({ùëê1 ‚à™ ùëê2})

‚â• Comp(ùê∂ ‚àñ {ùëê1, ùëê2}) + Comp(ùëê1) + Comp(ùëê2) +
> Comp(ùê∂ ‚àñ {ùëê1, ùëê2}) + Comp(ùëê1) + Comp(ùëê2)

‚áî Comp(ùê∂‚Ä≤) > Comp(ùê∂)

ùë§(ùëñ,ùëó)

ùëëùëñùëéùëö({ùëê1 ‚à™ ùëê2})

Du fait que ùê∂ soit optimal par rapport √† Comp, il n'y a aucune ar√™te entre les
 clusters  de ùê∂, ce qui est √©quivalent √† ‚àÄùëê ‚àà ùê∂, ‚àÉùëê‚Ä≤ ‚àà ùê∂*, ùëê‚Ä≤ ‚äÜ ùëê (condition
de maximalit√©).

48

J. Creusefond

4.2. Respect des axiomes de Van Laarhoven et Marchiori

Les deux conditions r√©unies impliquent que tout  cluster  dans ùê∂ est
soit une composante connexe maximale de ùê∫ (et donc un  cluster  dans
ùê∂*) ou un ensemble de noeuds de degr√© nul. Comme tout ensemble contenant
un noeud de degr√© nul a la m√™me compacit√© (z√©ro), ùê∂* a la m√™me compacit√©
que toute autre partition optimale en compacit√©. Donc ùê∂* est une partition
de ùê∫ de compacit√© maximale. La compacit√© est donc riche.

Avant de d√©nir la monotonicit√©, j'ai besoin de d√©nir la notion d‚Äôam√©lio-

ration ùê∂-consistante d'un graphe par rapport √† une partition.

D√©finition 4.8 (Am√©lioration ùê∂-consistante). Soit ùê∫ = (ùëâ, ùë§) un graphe et
ùê∂ ‚àà ùíû(ùëâ ). Un graphe ùê∫‚Ä≤ = (ùëâ, ùë§‚Ä≤) est une am√©lioration ùê∂-consistante
de ùê∫ si pour tous les noeuds ùëñ et ùëó, ùë§‚Ä≤(ùëñ, ùëó) ‚â• ùë§(ùëñ, ùëó) quand ùëñ est dans la
m√™me communaut√© que ùëó et ùë§‚Ä≤(ùëñ, ùëó) ‚â§ ùë§(ùëñ, ùëó) quand ùëñ n‚Äôest pas dans la m√™me
communaut√© que ùëó.

D√©finition 4.9 (Monotonicit√©). Une fonction de qualit√© ùëÑ est monotone
si pour tous les graphes ùê∫, toutes les partitions ùê∂ ‚àà ùíû(ùëâ ) de ùê∫ et toutes les
am√©liorations ùê∂-consistantes ùê∫‚Ä≤ de ùê∫, ùëÑùê∫‚Ä≤(ùê∂) ‚â• ùëÑùê∫(ùê∂)

Intuition : La fonction de qualit√© ne peut pas contredire la supposition de
base de la structure communautaire : ce sont des zones denses du graphe.

Th√©or√®me 4.10. La compacit√© est monotone

D√©monstration. Du fait de l'ind√©pendance de la compacit√© au poids des
ar√™tes externes, elle n'est pas aect√©e par la diminution du poids des ar√™tes
externes d'une am√©lioration ùê∂-consistante. Nous n'analyserons donc que l'ef-
fet de l'augmentation du poids des ar√™tes √† l'int√©rieur des  clusters .
‚àÄùëê ‚àà ùê∂, ‚àÄùúã un chemin dans le sous-graphe de ùê∫ induit par ùëê, ùëôùëíùëõùê∫(ùúã) ‚â•
ùëôùëíùëõùê∫‚Ä≤(ùúã) (car tous les poids sont augment√©s ou identiques). Ainsi, ùëëùëñùëéùëöùê∫(ùëê) ‚â•
ùëëùëñùëéùëöùê∫‚Ä≤(ùëê). Donc

ùë§‚Ä≤(ùëñ, ùëó)
ùëëùëñùëéùëöùê∫‚Ä≤(ùëê)

= Compùê∫‚Ä≤(ùëê)

‚àëÔ∏Å

(ùëñ,ùëó)‚ààùëê2

‚â§ ‚àëÔ∏Å

(ùëñ,ùëó)‚ààùëê2

ùë§(ùëñ, ùëó)

ùëëùëñùëéùëöùê∫(ùëê)

Compùê∫(ùëê) =

.

Une am√©lioration ùê∂-consistante implique donc une compacit√© sup√©rieure

ou √©gale √† la compacit√© initiale. La compacit√© est monotone.

Avant de d√©nir la localit√©, j'ai besoin de d√©nir la notion d‚Äôentente sur un

voisinage pour les graphes.

J. Creusefond

49

Chapitre 4. Une nouvelle fonction de qualit√© : la compacit√©

D√©finition 4.11 (Entente sur un voisinage). Soient ùê∫1 = (ùëâ1, ùë§1) et ùê∫2 =
(ùëâ2, ùë§2) deux graphes et soit ùëâùëé ‚äÜ ùëâ1‚à©ùëâ2 un sous-ensemble des noeuds que ces
deux graphes ont en commun. Ces graphes s‚Äôentendent sur le voisinage
de ùëâùëé si ùë§1(ùëñ, ùëó) = ùë§2(ùëñ, ùëó) pour tout ùëñ, ùëó ‚àà ùëâùëé et
(i) ùë§1(ùëñ, ùëó) = ùë§2(ùëñ, ùëó) pour tout ùëñ ‚àà ùëâùëé et ùëó ‚àà ùëâ1 ‚à© ùëâ2,
(ii) ùë§1(ùëñ, ùëó) = 0 pour tout ùëñ ‚àà ùëâùëé et si ùëó ‚àà ùëâ1 ‚àñ ùëâ2,
(iii) ùë§2(ùëñ, ùëó) = 0 pour tout ùëñ ‚àà ùëâùëé et si ùëó ‚àà ùëâ2 ‚àñ ùëâ1.

Ceci signie que les noeuds appartenant √† ùëâùëé sont connect√©s exactement

aux m√™mes noeuds avec les m√™mes poids dans les deux graphes.

D√©finition 4.12 (Localit√©). Une fonction de qualit√© ùëÑ est locale si pour
tous les graphes ùê∫1 = (ùëâ1, ùë§1) et ùê∫2 = (ùëâ2, ùë§2), si ‚àÉùëâùëé ‚äÜ ùëâ1 ‚à© ùëâ2 tel que
ùê∫1 et ùê∫2 s‚Äôentendent sur le voisinage de ùëâùëé, et pour tout ùê∂ùëé, ùê∑ùëé ‚àà ùíû(ùëâùëé),
ùê∂1 ‚àà ùíû(ùëâ1 ‚àñ ùëâùëé) et ùê∂2 ‚àà ùíû(ùëâ2 ‚àñ ùëâùëé), si ùëÑùê∫1(ùê∂ùëé ‚à™ ùê∂1) ‚â• ùëÑùê∫1(ùê∑ùëé ‚à™ ùê∂1) alors
ùëÑùê∫2(ùê∂ùëé ‚à™ ùê∂2) ‚â• ùëÑùê∫2(ùê∑ùëé ‚à™ ùê∂2).

Intuition : Un changement local du r√©seau ne devrait pas avoir d'incidence
sur les pr√©f√©rences dans une partie √©loign√©e du r√©seau. Comme soulign√© par
les auteurs de ces axiomes [95], le probl√®me de la limite de r√©solution observ√©
par Fortunato et Barthelemy [37] est fortement li√© √† la satisfaction de la
localit√©. La limite de r√©solution est le fait que la partition optimale en la
fonction de qualit√© ne peut pas contenir des  clusters  de petite taille par
rapport √† la taille du graphe.

Th√©or√®me 4.13. La compacit√© est locale
D√©monstration. Soient ùê∫1 = (ùëâ1, ùë§1) et ùê∫2 = (ùëâ2, ùë§2) deux graphes et ùëâùëé ‚äÜ
ùëâ1 ‚à© ùëâ2 tel que ùê∫1 et ùê∫2 s'entendent sur le voisinage de ùëâùëé. Du fait de la
d√©nition 4.11, on a ‚àÄ(ùëñ, ùëó) ‚àà ùëâ 2
ùëé , ùë§1(ùëñ,ùëó) = ùë§2(ùëñ, ùëó). Donc ‚àÄùê∂ ‚àà ùíû(ùëâùëé),
Compùê∫1(ùê∂) = Compùê∫2(ùê∂).
On obtient donc ‚àÄùê∂ùëé, ùê∑ùëé ‚àà ùíû(ùëâùëé), ‚àÄùê∂1 ‚àà ùíû(ùëâ1 ‚àñ ùëâùëé) et ‚àÄùê∂2 ‚àà ùíû(ùëâ2 ‚àñ ùëâùëé)

Compùê∫1(ùê∂ùëé ‚à™ ùê∂1) ‚â• Compùê∫1(ùê∑ùëé ‚à™ ùê∂1)

‚áî Compùê∫1(ùê∂ùëé) + Compùê∫1(ùê∂1) ‚â• Compùê∫1(ùê∑ùëé) + Compùê∫1(ùê∂1)
‚áî Compùê∫1(ùê∂ùëé) ‚â• Compùê∫1(ùê∑ùëé)
‚áî Compùê∫2(ùê∂ùëé ‚à™ ùê∂2) ‚â• Compùê∫2(ùê∑ùëé ‚à™ ùê∂2)

La compacit√© est donc locale.

50

J. Creusefond

4.2. Respect des axiomes de Van Laarhoven et Marchiori

D√©finition 4.14 (Continuit√©). Une fonction de qualit√© ùëÑ est continue si
pour tout ùúñ > 0 et tout graphe ùê∫ = (ùëâ, ùë§), il existe un ùõø > 0 tel que pour tout
graphe ùê∫‚Ä≤ = (ùëâ, ùë§‚Ä≤), si ùë§(ùëñ, ùëó)‚àí ùõø < ùë§‚Ä≤(ùëñ, ùëó) < ùë§(ùëñ, ùëó) + ùõø pour tous les noeuds
ùëñ et ùëó, alors ùëÑùê∫‚Ä≤(ùê∂) ‚àí ùúñ < ùëÑùê∫(ùê∂) < ùëÑùê∫‚Ä≤(ùê∂) + ùúñ pour toutes les partitions
ùê∂ ‚àà ùíû(ùëâ ).
Intuition : Une fonction de qualit√© doit √™tre peu sensible au bruit.

Th√©or√®me 4.15. La compacit√© est continue

D√©monstration. Cette d√©nition de continuit√© correspond √† la continuit√©
standard d'une fonction √† variables multiples. La fonction de distance utilis√©e
est le maximum de la valeur absolue de la di√©rence entre les poids des ar√™tes
entre deux graphes partageant le m√™me ensemble de noeuds. Appelons cette
fonction de distance ùëë((ùëâ, ùë§ùê∫), (ùëâ, ùë§ùê∫‚Ä≤)) = max(ùëñ,ùëó)‚ààùëâ 2(|ùë§ùê∫(ùëñ, ùëó) ‚àí ùë§ùê∫‚Ä≤(ùëñ, ùëó)|).
Notons qu'il s'agit d'une distance au sens formel : les propri√©t√©s de positivit√©,
sym√©trie et d'identit√© sont imm√©diates. La preuve de l'in√©galit√© triangulaire
suit :

ùëë(ùê∫ùë•, ùê∫ùë¶) + ùëë(ùê∫ùë¶, ùê∫ùëß) = max
(ùëñ,ùëó)‚ààùëâ 2
+ max
(ùëñ,ùëó)‚ààùëâ 2

(|ùë§ùë•(ùëñ,ùëó) ‚àí ùë§ùë¶(ùëñ,ùëó)|)

(|ùë§ùë¶(ùëñ,ùëó) ‚àí ùë§ùëß(ùëñ,ùëó)|)

(|ùë§ùë•(ùëñ,ùëó) ‚àí ùë§ùë¶(ùëñ,ùëó)| + |ùë§ùë¶(ùëñ,ùëó) ‚àí ùë§ùëß(ùëñ,ùëó)|)
(|ùë§ùë•(ùëñ,ùëó) ‚àí ùë§ùë¶(ùëñ,ùëó) + ùë§ùë¶(ùëñ,ùëó) ‚àí ùë§ùëß(ùëñ,ùëó)|)

‚â• max
(ùëñ,ùëó)‚ààùëâ 2
‚â• max
(ùëñ,ùëó)‚ààùëâ 2
‚â• ùëë(ùê∫ùë•, ùê∫ùëß)

Comme nous consid√©rons une notion de continuit√© standard, nous pourrons
utiliser des propri√©t√©s connues, comme la continuit√© de la combinaison de
fonctions continues.
Lemme 4.16. Pour un graphe connexe ùê∫ = (ùëâ, ùë§), ‚àÄ(ùëé,ùëè) ‚àà ùëâ 2, ùëëùëñùë†ùë°ùê∫(ùëé, ùëè)
est continue

Preuve du lemme 4.16 : Soit ùê∫ùëõ = (ùëâ, ùë§ùëõ) une s√©quence de Cauchy de
graphes. Alors ‚àÄ(ùëñ,ùëó) ‚àà ùëâ 2, (ùë§ùëõ(ùëñ,ùëó))ùëõ‚ààN est aussi une s√©quence de Cauchy.
Par d√©nition, ‚àÉùë§ tel que ùë§ùëõ(ùëñ,ùëó) ‚Üí ùë§(ùëñ,ùëó) (dans ce contexte, ‚Üí signie
 converge vers quand ùëõ ‚Üí ‚àû ) et il existe un graphe ùê∫ = (ùëâ, ùë§) tel que
ùê∫ùëõ ‚Üí ùê∫. On suppose ùê∫ connexe.
‚àÄ(ùëé, ùëè) ‚àà ùëâ 2, soit ùúã = (ùëé0 = ùëé, ùëé1, ..., ùëéùëò‚àí1, ùëéùëò = ùëè) un chemin tel que
ùëëùëñùë†ùë°ùê∫(ùëé, ùëè) = ùëôùëíùëõùê∫(ùúã), c'est-√†-dire un chemin minimal dans ùê∫ entre ùëé et ùëè.

J. Creusefond

51

Chapitre 4. Une nouvelle fonction de qualit√© : la compacit√©

‚àëÔ∏Ä

Si ‚àÉùëñ ‚àà [0 : ùëò ‚àí 1] tel que ùë§(ùëéùëñ, ùëéùëñ+1) = 0, alors ùëôùëíùëõùê∫(ùúã) n'est pas d√©ni et
donc ce n'est pas un chemin minimal. Du fait de la d√©nition d'un graphe
connexe, un chemin entre ùëé et ùëè existe, donc ‚àÄùëñ ‚àà [0 : ùëò ‚àí 1], ùë§(ùëéùëñ, ùëéùëñ+1) > 0.
est continue en (ùë§(ùëé0, ùëé1), ..., ùë§(ùëéùëò‚àí1, ùëéùëò)). Donc ùëôùëíùëõùê∫ùëõ(ùúã) ‚Üí

Comme ‚àÄùëñ ‚àà [0 : ùëò‚àí1], ùë§ùëõ(ùëéùëñ, ùëéùëñ+1) ‚Üí ùë§(ùëéùëñ, ùëéùëñ+1) Ã∏= 0, alors ùëì (ùë•0, ..., ùë•ùëò‚àí1) =
ùëñ‚àà[0:ùëò‚àí1]
ùëôùëíùëõùê∫(ùúã).
Comme ùëëùëñùë†ùë°ùê∫ùëõ(ùëé, ùëè) ‚â§ ùëôùëíùëõùê∫ùëõ(ùúã),

1
ùë•ùëñ

ùëëùëñùë†ùë°ùê∫ùëõ(ùëé, ùëè) ‚â§ lim sup
ùëõ‚Üí+‚àû
ùëõ‚Üí+‚àû ùëôùëíùëõùê∫ùëõ(ùúã) = ùëôùëíùëõùê∫(ùúã) = ùëëùëñùë†ùë°ùê∫(ùëé, ùëè)

ùëôùëíùëõùê∫ùëõ(ùúã)

= lim

ùëëùëñùë†ùë°ùê∫ùëõ(ùëé, ùëè) ‚â§ ùëëùëñùë†ùë°ùê∫(ùëé, ùëè)

lim sup
ùëõ‚Üí+‚àû

lim sup
ùëõ‚Üí+‚àû

lim inf

ùëõ‚Üí+‚àû ùëëùëñùë†ùë°ùê∫ùëõ(ùëé, ùëè) ‚â§ lim sup
ùëõ‚Üí+‚àû

ùëëùëñùë†ùë°ùê∫ùëõ(ùëé, ùëè), donc

lim inf

ùëõ‚Üí+‚àû ùëëùëñùë†ùë°ùê∫ùëõ(ùëé, ùëè) ‚â§ lim sup
ùëõ‚Üí+‚àû

ùëëùëñùë†ùë°ùê∫ùëõ(ùëé, ùëè) ‚â§ ùëëùëñùë†ùë°ùê∫(ùëé, ùëè)

(4.2)
ùëëùëñùë†ùë°ùê∫ùëõ(ùëé, ùëè) ‚â§ ùëëùëñùë†ùë°ùê∫(ùëé, ùëè), donc ‚àÉùëõ0 ‚àà N tel que ‚àÄùëõ ‚â•

Soit ùúñ > 0. lim sup
ùëõ‚Üí+‚àû

ùëõ0, ùëëùëñùë†ùë°ùê∫ùëõ(ùëé, ùëè) ‚â§ (1 + ùúñ)ùëëùëñùë†ùë°ùê∫(ùëé, ùëè).

1

2 √ó ùëëùëñùë†ùë°ùê∫(ùëé, ùëè)

Soit ùëõ1 ‚àà N tel que ‚àÄùëõ ‚â• ùëõ1, ùëë(ùê∫, ùê∫‚Ä≤) ‚â§
Par d√©nition, ‚àÄ(ùëñ,ùëó) ‚àà ùëâ √ó ùëâ , |ùë§ùëõ(ùëñ, ùëó) ‚àí ùë§(ùëñ, ùëó)| ‚â§
Pour ùëõ ‚àà N, soit ùúãùëõ un chemin entre ùëé et ùëè tel que ùëëùëñùë†ùë°ùê∫ùëõ(ùëé, ùëè) =
ùëôùëíùëõùê∫ùëõ(ùúãùëõ). Si ùúãùëõ n'est pas un chemin dans ùê∫ pour ùëõ ‚â• max(ùëõ0, ùëõ1), alors
ùëñ+1) Ã∏= 0 et
, ùëé(ùëõ)
pour ùúãùëõ = (ùëé(ùëõ)
ùë§(ùëé(ùëõ)

), ‚àÉùëñ ‚àà [0 : ùëòùëõ ‚àí 1] tel que ùë§ùëõ(ùëé(ùëõ)

2 √ó ùëëùëñùë†ùë°ùê∫(ùëé, ùëè)

0 , ..., ùëé(ùëõ)
ùëòùëõ

, ùëé(ùëõ)

1

.

.

ùëñ

ùëñ

ùëñ+1) = 0. Dans ce cas,
ùëñ+1)| = |ùë§ùëõ(ùëé(ùëõ)
, ùëé(ùëõ)

|ùë§ùëõ(ùëé(ùëõ)

ùëñ

ùëñ

ùëñ+1) ‚àí ùë§(ùëé(ùëõ)
, ùëé(ùëõ)

ùëñ

ùëñ+1)| ‚â§
, ùëé(ùëõ)

1

2 √ó ùëëùëñùë†ùë°ùê∫(ùëé, ùëè)

‚áí ùëôùëíùëõùê∫ùëõ(ùúãùëõ) ‚â•

1
ùë§ùëõ(ùëé(ùëõ)

ùëñ

, ùëé(ùëõ)
ùëñ+1)

‚â• 2 √ó ùëëùëñùë†ùë°ùê∫(ùëé, ùëè)

Ceci est contradictoire car ùëôùëíùëõùê∫ùëõ(ùúãùëõ) = ùëëùëñùë†ùë°ùê∫ùëõ(ùëé, ùëè) ‚â§ (1 + ùúñ)ùëëùëñùë†ùë°ùê∫(ùëé, ùëè) pour
ùëõ ‚â• ùëõ0. Donc, pour ùëõ ‚â• max(ùëõ0, ùëõ1), ùúãùëõ est aussi un chemin dans ùê∫.

Soit ùëõ2 ‚àà N tel que ‚àÄùëõ ‚â• ùëõ2, ùëë(ùê∫, ùê∫ùëõ) ‚â§ ùúñùë§ùëöùëñùëõ avec ùë§ùëöùëñùëõ = ùëöùëñùëõùëí‚ààùëâ 2,ùë§(ùëí)Ã∏=0ùë§(ùëí).

D'abord, notons que

‚àÄùëí ‚àà ùëâ 2, ùë§ùëõ(ùëí) ‚â• ùë§(ùëí) ‚àí ùúñùë§ùëöùëñùëõ ‚â• (1 ‚àí ùúñ)ùë§ùëöùëñùëõ

52

J. Creusefond

4.2. Respect des axiomes de Van Laarhoven et Marchiori

Ensuite

|ùëôùëíùëõùê∫ùëõ(ùúãùëõ) ‚àí ùëôùëíùëõùê∫(ùúãùëõ)| = | ‚àëÔ∏Å
‚àëÔ∏Å
‚â§ ‚àëÔ∏Å
‚â§ ‚àëÔ∏Å

=

ùëñ‚àà[0:ùëòùëõ‚àí1]

ùëñ‚àà[0:ùëòùëõ‚àí1]

ùëñ‚àà[0:ùëòùëõ‚àí1]

ùëñ‚àà[0:ùëòùëõ‚àí1]
|ùëâ |ùúñ

ùëñ

1
ùë§ùëõ(ùëé(ùëõ)
|ùë§ùëõ(ùëé(ùëõ)
ùë§ùëõ(ùëé(ùëõ)

ùëñ

ùëñ

|

ùëñ

‚àí

1
, ùëé(ùëõ)
, ùëé(ùëõ)
ùë§(ùëé(ùëõ)
ùëñ+1)
ùëñ+1)
ùëñ+1)|
ùëñ+1) ‚àí ùë§(ùëé(ùëõ)
, ùëé(ùëõ)
, ùëé(ùëõ)
ùëñ+1) √ó ùë§(ùëé(ùëõ)
, ùëé(ùëõ)
, ùëé(ùëõ)
ùëñ+1)
ùúñùë§ùëöùëñùëõ
ùëñ+1) √ó ùë§(ùëé(ùëõ)
, ùëé(ùëõ)
ùúñùë§ùëöùëñùëõ

, ùëé(ùëõ)
ùëñ+1)

ùëñ

ùëñ

ùëñ

ùëñ

ùë§ùëõ(ùëé(ùëõ)
(1 ‚àí ùúñ)ùë§ùëöùëñùëõ √ó ùë§ùëöùëñùëõ

ùë§ùëöùëñùëõ(1 ‚àí ùúñ)

ùë§ùëöùëñùëõ(1 ‚àí ùúñ)

|ùëôùëíùëõùê∫ùëõ(ùúãùëõ) ‚àí ùëôùëíùëõùê∫(ùúãùëõ)| ‚â§
Du fait que ùëôùëíùëõùê∫(ùúãùëõ) ‚â• ùëëùëñùë†ùë°ùê∫(ùëé, ùëè), alors ùëôùëíùëõùê∫ùëõ(ùúãùëõ) ‚â• ùëëùëñùë†ùë°ùê∫(ùëé, ùëè) ‚àí
|ùëâ |ùúñ
ùëõ‚Üí+‚àû ùëôùëíùëõùê∫ùëõ(ùúãùëõ) ‚â• ùëëùëñùë†ùë°ùê∫(ùëé, ùëè). En combinant avec Eq. 4.2 :
ùëëùëñùë†ùë°ùê∫ùëõ(ùëé, ùëè) ‚â§ ùëëùëñùë†ùë°ùê∫(ùëé, ùëè) ‚â§ lim inf
‚áí lim

ùëõ‚Üí+‚àû ùëôùëíùëõùê∫ùëõ(ùúãùëõ)

. Donc lim inf

lim sup
ùëõ‚Üí+‚àû

ùëõ‚Üí+‚àû ùëëùëñùë†ùë°ùê∫ùëõ(ùëé, ùëè) = ùëëùëñùë†ùë°ùê∫(ùëé, ùëè)

Ce qui prouve que la distance entre deux noeuds d'un graphe connexe est

une fonction continue.
Fin de la preuve du lemme 4.16

Prouvons maintenant la continuit√© de la fonction sur des  clusters  non
connexes. An de simplier les notations, nous travaillons directement sur
les sous-graphes induits en √©tendant la compacit√© pour prendre un graphe en
entr√©e :

‚éß‚é®‚é© 0
‚àëÔ∏Ä

Comp(ùê∫) =

ùëí‚ààùëâ 2 ùë§(ùëí)
ùëëùëñùëéùëö(ùê∫)

si |ùëâ | = 1 ou ùê∫ non connexe
sinon

Du lemme 4.16, nous savons que ùëëùëñùë†ùë°(ùë¢, ùë£) est continue pour tous les graphes
connexes, et ùëëùëñùë†ùë°(ùë¢, ùë£) > 0. Le maximum d'un ensemble de fonctions conti-
nues est continu, ce qui signie que ùëëùëñùëéùëö(ùê∫) est continu pour tous les graphes
connexes et ùëëùëñùëéùëö(ùê∫) > 0. Une combinaison de fonction continues est conti-
nue, et 1/ùë• est continue en R+. Comp(ùê∫) est donc continue sur tous les graphes
connexes.

Prouvons maintenant que Comp(ùê∫) est continue sur des graphes non connexes.

De la m√™me mani√®re que dans la preuve du lemme 4.16, nous prenons une

J. Creusefond

53

Chapitre 4. Une nouvelle fonction de qualit√© : la compacit√©

s√©quence de Cauchy de graphes (ùê∫ùëõ)ùëõ‚ààN : ùê∫ùëõ = (ùëâ, ùë§ùëõ) ‚Üí ùê∫ = (ùëâ, ùë§),
mais ùê∫ est cette fois non connexe. Pour tout ùëõ ‚àà N, si ùê∫ùëõ est non connexe,
Comp(ùê∫ùëõ) = 0 = Comp(ùê∫).

Si ùê∫ùëõ est connexe, soient ùëé et ùëè des noeuds dans deux composantes
ùëò = ùëè) ‚àà

connexes di√©rentes de ùê∫ùëõ. Tout chemin ùúãùëõ = (ùëé(ùëõ)
Œ†ùê∫ùëõ(ùëé, ùëè) est tel que ‚àÉùëó, ùë§(ùëé(ùëõ)

0 = ùëé, ùëé(ùëõ)

1 , ..., ùëé(ùëõ)

, ùëé(ùëõ)

ùëó

‚àëÔ∏Å

ùëó+1) = 0. Par d√©nition,
‚â• 1
ùë§(ùëõ)
ùëöùëñùëõ

1
ùë§ùëõ(ùëé(ùëõ)

, ùëé(ùëõ)
ùëñ+1)

ùëñ

ùëñ‚àà[0:ùëò‚àí1]

ùëôùëíùëõ(ùúãùëõ) =

ùëöùëñùëõ = minùëñ‚àà[0:ùëò‚àí1](ùë§ùëõ(ùëé(ùëõ)

o√π ùë§(ùëõ)
et ùëè sont dans deux composantes connexes di√©rentes de ùê∫,
Donc

ùëñ+1)). Comme ùê∫ùëõ converge vers ùê∫, et que ùëé
ùëöùëñùëõ = 0+.

ùëõ‚Üí+‚àû ùë§(ùëõ)
lim

, ùëé(ùëõ)

ùëñ

ùëõ‚Üí+‚àû ùëëùëñùë†ùë°ùê∫ùëõ(ùë¢, ùë£) = lim
lim

ùëõ‚Üí+‚àû min
ùúã‚ààŒ†(ùë¢,ùë£)

ùëôùëíùëõùê∫ùëõ(ùúã) = +‚àû

.

‚àëÔ∏Ä
(ùëñ,ùëó)‚ààùëâ 2 ùë§ùëõ(ùëñ,ùëó) =‚àëÔ∏Ä
Comme le diam√®tre est la distance maximale entre toutes les paires de
ùëõ‚Üí+‚àû ùëëùëñùëéùëö(ùê∫ùëõ) = +‚àû. Par d√©nition d'une s√©quence de Cauchy,

(ùëñ,ùëó)‚ààùëâ 2 ùë§(ùëñ,ùëó). Donc,

lim

noeuds,
lim
ùëõ‚Üí+‚àû

ùëõ‚Üí+‚àû Comp(ùê∫ùëõ) = lim
lim
ùëõ‚Üí+‚àû

= 0 = Comp(ùê∫)

‚àëÔ∏Å

ùë§ùëõ(ùëí)

ùëëùëñùëéùëö(ùê∫ùëõ)

ùëí‚ààùëâ 2

Ce qui implique que, pour tout graphe non connexe ùê∫, Comp est continue en
ùê∫.

Comme la compacit√© est la somme des Comp(ùê∫) appliqu√©s aux sous-

graphes induits par la partition, la compacit√© est continue.

Dans ce chapitre, j'ai pr√©sent√© une nouvelle fonction de qualit√©, la com-
pacit√©. Celle-ci mesure la vitesse de propagation de la diusion de l'infor-
mation dans la communaut√© dans le pire des cas. Les di√©rents exemples
montrent que cette fonction privil√©gie des structures denses. J'ai aussi
prouv√© que la compacit√© satisfait les six axiomes de Van Laarhoven et
Marchiori. Ceci implique notamment qu'elle n'est pas aect√©e par une
limite de r√©solution.

Ce crit√®re de qualit√© peut √™tre utilis√© par un algorithme de d√©tection
de communaut√©s. En eet, en simulant des diusions, il est possible de
d√©tecter des communaut√©s. C'est le sujet du prochain chapitre.

54

J. Creusefond

Chapitre 5

Une m√©thode de d√©tection de
communaut√©s bas√©e sur
l‚Äôalgorithme du LexDFS

Les algorithmes de parcours de graphe peuvent amener des infor-
mations sur la structure du graphe. C‚Äôest le cas du LexDFS [23]
(¬´ Lexicographical Depth-First Search ¬ª), une variante du DFS.
Je l‚Äôutilise pour un algorithme de d√©tection de communaut√©s, et
√©tudie les communaut√©s ainsi cr√©√©es.

Les travaux pr√©sent√©s dans ce chapitre ont fait l‚Äôobjet de deux

publications [25, 26].

Weng et al. [100] ont observ√© des ph√©nom√®nes de diusions dans twitter.
Ils constatent que certaines diusions se limitent √† la communaut√© dont elles
sont originaires. Ces diusions intra-communautaires ont des caract√©ristiques
proches d'un mod√®le o√π, √† chaque pas de temps, l'individu ayant le plus de
voisins inform√©s devient lui-m√™me inform√©.

Dans ce mod√®le, prenons ùë¢ et ùë£ deux voisins tels que ùë¢ est inform√© et
ùë£ ne l'est pas. La probabilit√© que ùë¢ transmette l'information √† ùë£ augmente
avec le nombre de voisins de ùë£ d√©j√† inform√©s. Il s'agit de la caract√©ristique du
renforcement. J'utilise cette caract√©ristique comme base d'un algorithme an
de d√©tecter les communaut√©s dans lesquelles ces diusions se concentrent.

Dans ce chapitre, je pr√©sente cet algorithme, qui est de complexit√© log-
lin√©aire. Il est bas√© sur plusieurs it√©rations du LexDFS [23], un algorithme de
parcours de graphe visitant en priorit√© les noeuds dont les voisins ont d√©j√†
√©t√©s visit√©s. J'utilise les parcours produits pour g√©n√©rer des communaut√©s,
que j'√©tudie ensuite exp√©rimentalement.

J. Creusefond

55

Chapitre 5. Une m√©thode de d√©tection de communaut√©s bas√©e sur
l‚Äôalgorithme du LexDFS

Zhou et Lipowsky [107] ont montr√© qu'utiliser des marches al√©atoires biai-
s√©es pouvait √™tre utilis√© pour la d√©tection de communaut√©s. Yucel et al. [105]
ont r√©cemment propos√© d'utiliser des marches al√©atoires avec m√©moire emp√™-
chant le marcheur de revenir sur le dernier noeud visit√©. Leurs marches sont
aussi biais√©es de telle mani√®re √† augmenter la probabilit√© de retour sur un
noeud d√©j√† visit√© r√©cemment. Une adaptation de ces techniques permettrait
de biaiser des marches al√©atoires pour prendre en compte le renforcement. La
limite de ces algorithmes est leur complexit√©. Les auteurs ont montr√© qu'ils
n√©cessitaient au moins un temps quadratique en la taille du graphe. Mon
objectif est d'obtenir un algorithme de complexit√© raisonnable, utilisable en
pratique.

5.1 Un algorithme de partitionnement bas√© sur

le LexDFS

Cette section pr√©sente une m√©thode bas√©e sur l'algorithme de parcours de
graphe LexDFS introduit par Corneil et Krueger [23]. Il s'agit d'une variation
de l'algorithme DFS (cf Sec. 2.1).

Le LexDFS est de parcourir le graphe visitant en priorit√© les noeuds dont
les voisins ont √©t√©s r√©cemment visit√©s. Le LexDFS √©tiquette chaque noeud
avec une liste d'entiers, initialement vide. Lors de la ùëñ-√®me √©tape du LexDFS,
on r√©cup√®re tous les voisins non visit√©s du noeud courant. Pour chacun de ces
voisins, le nombre ùëñ est ajout√© au d√©but de son √©tiquette. Le noeud √† visiter √†
la prochaine √©tape est choisi uniform√©ment au hasard parmi les noeuds ayant
l'√©tiquette la plus grande dans l'ordre lexicographique.

Un exemple d'ex√©cution du LexDFS est pr√©sent√© Fig. 5.1. Dans cet ex-
emple, √† l'issue de la premi√®re √©tape, le LexDFS choisit entre les trois noeuds
ayant l'√©tiquette [1]. √Ä l'issue de la deuxi√®me √©tape, le LexDFS ignore le voisin
ayant l'√©tiquette [2] car il n'avait pas √©t√© d√©couvert √† l'it√©ration pr√©c√©dente.
Le pseudo-code de l'algorithme du LexDFS est pr√©sent√© Alg. 3. Celui-ci
utilise deux attributs des noeuds. L'attribut ùëôùëíùë• est l'√©tiquette, repr√©sent√©e
par un vecteur. L'attribut ùë£ùëñùë†ùëñùë°ùëí indique l'it√©ration √† laquelle un noeud a √©t√©
visit√©. S'il n'a pas √©t√© visit√©, cet attribut vaut z√©ro.

J'utilise le LexDFS comme base pour un algorithme de d√©tection de com-
munaut√©s. J'appelle informellement une zone dense un ensembles de noeuds
tels que chacun de ces noeuds a un nombre important de voisins √† l'int√©rieur
de cet ensemble. Un LexDFS parcourant une zone dense augmente la priorit√©
de visite des autres noeuds de cette zone. Une fois √† l'int√©rieur d'une zone
dense, le LexDFS a tendance √† en visiter tous les noeuds avant de la quitter.

56

J. Creusefond

5.1. Un algorithme de partitionnement bas√© sur le LexDFS

Figure 5.1  Premi√®res √©tapes d'ex√©cution du LexDFS sur un exemple. Les
it√©rations se lisent de gauche √† droite.

J'utilise cette caract√©ristique pour d√©tecter ces ensembles de noeuds. Nous
verrons que cette intuition est conrm√©e empiriquement.

Je d√©cris maintenant l'algorithme de d√©tection de communaut√©s, le Lex-

Clustering. Un score est attribu√© aux ar√™tes, pr√©sent√© Eq. 5.1.

‚àÄ(ùë¢, ùë£) ‚àà ùê∏, ùë†ùëêùëúùëüùëí(ùë¢, ùë£) = 1 ‚àí |ùë¢.ùë£ùëñùë†ùëñùë°ùëíùëë ‚àí ùë£.ùë£ùëñùë†ùëñùë°ùëíùëë|

ùëõ

(5.1)

Plus la visite des deux noeuds incidents √† une ar√™te est rapproch√©e, plus
son score est fort. Les ar√™tes de poids sont de bonnes candidates pour √™tre
des ar√™tes intra-communautaires.

L'algorithme calcule la moyenne de ce score sur un ensemble d'ex√©cutions
du LexDFS. Les exp√©riences montrent que 10 d'ex√©cutions susent pour s'as-
surer de la convergence des scores (voir Sec. 5.2). L'algorithme place ensuite
chaque noeud dans son propre  cluster . Enn, il fusionne successivement
les  clusters  reli√©s par des ar√™tes √† fort score. On peut voir sur l'exemple
Fig. 5.2 que des zones denses du graphes sont ainsi r√©v√©l√©es. Le pseudo-code
associ√© est pr√©sent√© Alg. 4

La Fig. 5.2 pr√©sente une ex√©cution de la m√©thode sur un r√©seau extrait
de Facebook, pr√©sent√© dans la Sec. 5.2. Les ar√™tes sont ach√©es si elles sont
√† l'int√©rieur d'un  cluster . Pour des raisons de lisibilit√©, les  clusters 
de taille 1 n'y sont pas repr√©sent√©s. On peut voir dans la Fig. 5.2b qu'une
structure dense appara√Æt. En comparant les Fig. 5.2b et 5.2c, on observe
que les  clusters  apparaissent et √©voluent s√©par√©ment avant de fusionner.

J. Creusefond

57

11/31/31/311/21/22[1][1][1][][2,1][2,1][2]112[3,2,1][2]3[3,2,1]21/3: √©tiquette: noeud visit√©: probabilit√©de transitionChapitre 5. Une m√©thode de d√©tection de communaut√©s bas√©e sur
l‚Äôalgorithme du LexDFS

Algorithme 3 : LexDFS(G,s)

Donn√©es : Un graphe ùê∫ et un noeud de d√©part ùë†

1 d√©but

// Initialisation des attributs pour tous les noeuds

pour ùë£ ‚àà ùëâ faire
ùë£.ùëôùëíùë• ‚Üê ()
ùë£.ùë£ùëñùë†ùëñùë°ùëí ‚Üê 0

ùëùùëñùëôùëí ‚Üê (ùë†)
ùëñ ‚Üê 1
tant que ùëùùëñùëôùëí Ã∏= () faire

ùë£ ‚Üê ùëë¬¥ùëíùëùùëñùëôùëí(ùëùùëñùëôùëí)
ùë£.ùë£ùëñùë†ùëñùë°ùëí ‚Üê ùëñ
ùë£ùëúùëñùë† ‚Üê [ ]
pour ùë¢ ‚àà ùë£ùëúùëñùë†ùëñùëõùë†(ùë£) faire

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

// Marque le noeud comme visit√©

si ùë¢.ùë£ùëñùë†ùëñùë°ùëí = 0 alors
ùë†ùë¢ùëùùëùùëüùëñùëöùëí(ùëùùëñùëôùëí, ùë¢)
ùë¢.ùëôùëíùë• ‚Üê (ùëñ, ùë¢.ùëôùëíùë•)
ùë£ùëúùëñùë† ‚Üê [ùë£ùëúùëñùë†, ùë¢]

// Ajoute ùëñ √† l‚Äô√©tiquette

// Trie par ordre lexicographique des √©tiquettes.

// L‚Äôordre des √©tiquettes √©gales est al√©atoire.
ùë°ùëüùëñùëí(ùë£ùëúùëñùë†)
// Place les voisins en haut de la pile
ùëíùëöùëùùëñùëôùëí(ùëùùëñùëôùëí, ùë£ùëúùëñùë†)
ùëñ ‚Üê ùëñ + 1

Notamment, en bas √† gauche de la Fig. 5.2c, deux communaut√©s ont fusionn√©
en une seule.

Je montre maintenant que la complexit√© en temps de la m√©thode est dans
ùí™(ùëö √ó ùëôùëúùëî(ùëö) + (ùëõ + ùëö log log(ùëõ)) √ó ùëô), o√π ùëô est le nombre d'ex√©cutions
du LexDFS, ùëö le nombre d'ar√™tes et ùëõ le nombre de noeuds. Il a d√©j√† √©t√©
montr√© que le LexDFS est dans ùí™(min(ùëõ2, ùëõ + ùëö log log(ùëõ)) [22]. Comme
je m'int√©resse √† des graphes dont le nombre d'ar√™tes est d'ordre inf√©rieur
au quadratique [62], la complexit√© se r√©duit pour mes applications √† ùí™(ùëõ +
ùëö log log(ùëõ)).
Je m'int√©resse √† la complexit√© de l'Alg. 4. Le calcul des scores des ar√™tes
est dans ùí™(ùëö), et le tri des ar√™tes suivant leur score est dans ùí™(ùëö√ó ùëôùëúùëî(ùëö)).
Les fusions successives de  clusters  est un cas d'union d'ensemble disjoints.

58

J. Creusefond

5.1. Un algorithme de partitionnement bas√© sur le LexDFS

(a) Graphe initial

(b) 1800√®me it√©ration

(c) 2700√®me it√©ration

Figure 5.2  Les  clusters  d'un extrait du r√©seau Facebook √† di√©rentes
√©tapes du Lex-Clustering

J. Creusefond

59

Chapitre 5. Une m√©thode de d√©tection de communaut√©s bas√©e sur
l‚Äôalgorithme du LexDFS

Algorithme 4 : Lex-Clustering(ùê∫, ùëô)

Donn√©es : Graphe ùê∫, nombre d'it√©rations ùëô

1 d√©but

pour ùëñ ‚Üê 1 √† ùëô faire

2

3

4

5

6

7

8

9

10

11

// Ex√©cute un LexDFS √† partir d‚Äôun noeud al√©atoire
LexDFS(ùê∫, randnode(ùëâ ))
pour (ùë¢,ùë£) ‚àà ùê∏ faire

ùë† ‚Üê 1 ‚àí |ùë¢.ùë£ùëñùë†ùëñùë°ùëí ‚àí ùë£.ùë£ùëñùë†ùëñùë°ùëí|
ùëí.ùë†ùëêùëúùëüùëí ‚Üê (ùëí.ùë†ùëêùëúùëüùëí √ó (ùëñ ‚àí 1) + ùë†)/ùëñ

ùëö

ùëúùëüùëëùëúùëõ ‚Üê ùë°ùëéùëèùëôùëíùëéùë¢(ùê∏)
ùë°ùëüùëñùëí(ùëúùëüùëëùëúùëõ)
ùê∂ ‚Üê {{ùë£} | ùë£ ‚àà ùëâ }
pour ùëñ ‚Üê 1 √† |ùëúùëüùëëùëúùëõ| faire
(ùë£,ùë¢) ‚Üê ùëúùëüùëëùëúùëõ[ùëñ]
ùëì ùë¢ùë†ùëñùëúùëõùëõùëí(ùê∂, ùëêùëôùë¢ùë†ùë°ùëíùëü(ùë£), ùëêùëôùë¢ùë†ùë°ùëíùëü(ùë¢))

// Stocke ùê∏ dans un tableau

// Trie les ar√™tes par score d√©croissant

// Cr√©e un cluster par noeud

Ce probl√®me est r√©solu par un algorithme quasi-lin√©aire de Tarjan [90], de
complexit√© ùí™(ùëö √ó ùõº(ùëö)) (on eectue au maximum ùëö fusions). La fonction
ùõº(ùëö) est l'inverse de la fonction d'Ackerman, qui a une croissance d'ordre
sup√©rieur √† l'exponentiel. ùõº(ùëö) cro√Æt donc plus lentement qu'une fonction
log. La complexit√© est domin√©e par le terme dans ùí™(ùëö log(ùëö)).

La complexit√© nale est dans ùí™(ùëö log(ùëö) + (ùëõ + ùëö log log(ùëõ)) √ó ùëô).

5.2 √âvaluation exp√©rimentale du Lex-Clusering

Cette section pr√©sente une √©tude exp√©rimentale ayant pour but d'analyser

les r√©sultats produits par le Lex-Clustering.

An de limiter le temps de calcul, j'utilise une heuristique pour approcher
le diam√®tre requis par la compacit√© (voir Chap. 4). Cette heuristique consiste
en deux BFS [67] et s'ex√©cute en temps lin√©aire. Le premier BFS commence
√† un noeud al√©atoire dans le  cluster . On calcule ensuite l'excentricit√© du
dernier noeud visit√© par le premier parcours, en utilisant un second BFS.
J'approche le diam√®tre par cette valeur. Cette heuristique ore une bonne
approximation en pratique.

An d'analyser le Lex-Clustering, j'utilise les r√©seaux suivants :

facebook [65] (ùëõ = 4039, ùëö = 88234) est un extrait du r√©seau social

60

J. Creusefond

5.2. √âvaluation exp√©rimentale du Lex-Clusering

√©ponyme. Certains utilisateurs ont install√© une application 1 ayant un
but explicite de collecte de donn√©es pour la recherche. Cette application
a collect√© la liste d'amis des utilisateurs qui forment ce r√©seau.

astro [62] (ùëõ = 17903, ùëö = 196972) est un r√©seau de co-publication scienti-
ques dans le domaine de l'astrophysique, extrait de la plate-forme de
publication en ligne arXiv 2. Les noeuds sont des auteurs, et il existe
une ar√™te entre deux auteurs s'ils ont publi√© un article ensemble.

enron [55] (ùëõ = 36692, ùëö = 183831) provient de l'entreprise √©ponyme qui
a √©t√© forc√©e par la justice am√©ricaine √† rendre public l'int√©gralit√© des
e-mails envoy√©s et re√ßus par ses employ√©s 3. Chaque noeud repr√©sente
un individu, et il existe une ar√™te entre deux individus si un e-mail a
transit√© de l'un √† l'autre.

5.2.1 Vitesse de convergence du Lex-Clustering

J'√©tudie tout d'abord la vitesse de convergence du Lex-Clustering vers une
solution stable. J'utilise la di√©rence de l'ordre des ar√™tes pour d√©cider de la
convergence. En eet, cet ordre d√©termine directement le comportement de
la m√©thode. Le coecient de rang de Spearman mesure la corr√©lation entre
deux ordres :

(5.2)

ùëÜ(x, y) = 1 ‚àí

6(ùë•ùëñ ‚àí ùë¶ùëñ)2
|x| ¬∑ (|x|2 ‚àí 1)

|x|‚àëÔ∏Å

ùëñ=1

O√π x et y sont les vecteurs contenant l'ordre des scores. J'observe l'√©volution
de cette valeur au fur et √† mesure des it√©rations du LexDFS.

Cette exp√©rience est importante pour d√©terminer la valeur de ùëô dans l'al-
gorithme pr√©sent√© Alg. 4. La Fig. 5.3 pr√©sente les r√©sultats. Les trois jeux de
donn√©es consid√©r√©s convergent de la m√™me mani√®re : commen√ßant √† 0,5, le co-
ecient de rang de Spearman d√©passe 0,95 apr√®s quatre it√©rations. Il continue
ensuite √† augmenter et est aux alentours de 0,99 apr√®s dix it√©rations. C'est
pour cette raison que j'utilise 10 it√©rations dans les autres exp√©riences.

1. http://snap.stanford.edu/socialcircles
2. www.arxiv.org
3. www.ferc.gov/industries/electric/indus-act/wec/enron/info-release.asp

J. Creusefond

61

Chapitre 5. Une m√©thode de d√©tection de communaut√©s bas√©e sur
l‚Äôalgorithme du LexDFS

Figure 5.3  Convergence du coecient de rang de Spearman du score des
ar√™tes sur plusieurs ex√©cutions du LexDFS

5.2.2 √âtude des ¬´ clusters ¬ª individuels

J'analyse maintenant les propri√©t√©s des  clusters  que le Lex-Clustering
forme au cours du partitionnement hi√©rarchique. Dans la continuit√© de la
comparaison avec la modularit√©, je compare les r√©sultats √† ceux de l'algo-
rithme de Clauset [20] (voir Sec. 2.4) qui optimise cette valeur de fa√ßon glou-
tonne. Comme il s'agit √©galement d'un algorithme hi√©rarchique, l'algorithme
de Clauset g√©n√®re donc le m√™me nombre de  clusters  que le Lex-Clustering
au cours du processus de fusion. Le nombre de  clusters  observ√©s n'inuen-
cera donc pas la comparaison entre les deux algorithmes.

Pour repr√©senter les r√©sultats, j'utilise le NCP plot ( Network Commu-
nity Prole plot ) introduit par Leskovec et al. [63]. Le NCP plot permet de
visualiser le r√©sultat d'une mesure par rapport √† la taille des  clusters .

Certaines fonctions de qualit√© d√©pendent de la taille de la communaut√©,
comme la modularit√© et la compacit√©. Comme les NCP plot repr√©sentent d√©j√†
la taille en tant que dimension, je pr√©f√®re utiliser des mesures ne d√©pendant
pas directement de la taille : le diam√®tre, la conductance et le coecient de
clustering. J'utilise ici la conductance non normalis√©e [51] d√©crite Eq. 5.3.

ùëûùëêùëúùëõùëë =

ùëö(ùëê, ùëâ ‚àñ ùëê)

ùëâ ùëúùëô(ùëê)

J. Creusefond

(5.3)

62

5.2. √âvaluation exp√©rimentale du Lex-Clusering

Figure 5.4  Cardinal de l'ensemble des  clusters  de chaque taille

Tout d'abord, je rel√®ve Fig. 5.4 la distribution du cardinal des  clusters .
On peut noter que, dans tous les graphes, Lex-Clustering produit beaucoup
de  clusters  de taille inf√©rieure √† 100. On peut aussi voir qu'il n'existe
g√©n√©ralement qu'un  cluster  pour les tailles sup√©rieures √† 300. L'algorithme
de Clauset, d'un autre c√¥t√©, produit relativement peu de petits  clusters 
et plusieurs grands  clusters . J'en d√©duis que le Lex-Clustering produit un
 cluster  de taille moyenne pour le fusionner ensuite avec tous les autres.
Les NCP plots sont repr√©sent√©s Fig. 5.5, Fig. 5.6 et Fig. 5.7. Sur chaque
graphe, les r√©sultats du Lex-Clustering sont repr√©sent√©s par des croix rouges
et ceux de l'algorithme de Clauset en vert. La colonne de gauche de ces gures
trace les croix vertes au-dessus des croix rouges, et inversement pour la co-
lonne de droite. Ainsi, la colonne de gauche met les r√©sultats de l'algorithme
de Clauset en valeur, tandis que la colonne de droite favorise la visualisa-
tion des r√©sultats du Lex-Clustering. Cette repr√©sentation est choisie car les
r√©sultats se superposent fr√©quemment.

Les r√©sultats de la conductance sont pr√©sent√©s Fig. 5.5. Les deux algo-
rithmes ont des r√©sultats similaires sur des petits  clusters  de taille in-
f√©rieure √† 80, except√© sur le jeu de donn√©es facebook, o√π le Lex-Clustering

J. Creusefond

63

Chapitre 5. Une m√©thode de d√©tection de communaut√©s bas√©e sur
l‚Äôalgorithme du LexDFS

produit √©galement des  clusters  de faible conductance. D'un autre c√¥t√©,
les grands  clusters  de taille sup√©rieure √† 300 produits par l'algorithme de
Clauset ont une conductance plus faible que ceux du Lex-Clustering.

Les NCP plot du coecient de clustering sont pr√©sent√©s Fig. 5.6. On peut
voir sur ces r√©sultats une grande variance du coecient de clustering pour les
deux algorithmes. Les deux algorithmes ne semblent pas optimiser le crit√®re
du coecient de clustering.

Le diam√®tre des  clusters  individuels est pr√©sent√© Fig. 5.7. Sur les r√©-
seaux astro et enron, les petits  clusters  du Lex-Clustering ont un diam√®tre
vari√©, tandis que ceux de Clauset ont un diam√®tre assez faible. Alors que les
grands  clusters  produits par l'algorithme de Clauset pr√©sentent un dia-
m√®tre vari√©, ceux du Lex-Clustering ont un diam√®tre relativement faible.

En r√©sum√© : on observe que le Lex-Clustering produit un unique  clus-
ter  de taille moyenne qui absorbe tous les autres. Il produit aussi un grand
nombre de petits  clusters . Ces exp√©riences montrent que toutes les fonc-
tions de qualit√© ne peuvent √™tre utilis√©es pour √©valuer des  clusters . La
multiplicit√© des d√©nitions des communaut√©s fait que les algorithmes de d√©-
tection de communaut√©s sont tr√®s di√©rents les uns des autres, et c'est aussi
le cas pour les m√©triques. Ces exp√©riences montrent qu'il est dicile pour
un algorithme dont la conception de prend pas en compte une m√©trique de
satisfaire celle-ci.

64

J. Creusefond

5.2. √âvaluation exp√©rimentale du Lex-Clusering

Figure 5.5  NCP plot de la conductance

J. Creusefond

65

Chapitre 5. Une m√©thode de d√©tection de communaut√©s bas√©e sur
l‚Äôalgorithme du LexDFS

Figure 5.6  NCP plot du coecient de clustering

66

J. Creusefond

5.2. √âvaluation exp√©rimentale du Lex-Clusering

Figure 5.7  NCP plot du diam√®tre

J. Creusefond

67

Chapitre 5. Une m√©thode de d√©tection de communaut√©s bas√©e sur
l‚Äôalgorithme du LexDFS
5.2.3 √âtude des partitions

J'analyse maintenant les partitions produites par le Lex-Clustering au

cours de son ex√©cution.

Parmi toutes les partitions r√©sultantes d'un algorithme hi√©rarchique, il
est n√©cessaire d'en s√©lectionner une. La meilleure partition est traditionnelle-
ment [78, 20] s√©lectionn√©e en identiant le maximum d'une fonction de qua-
lit√© lors du partitionnement hi√©rarchique. J'appelle s√©lecteur une fonction
de qualit√© dont le maximum global est utilis√© pour s√©lectionner une partition.
Dans cette exp√©rience, je compare l'√©volution de la modularit√©, du coecient
de clustering, de la conductance normalis√©e et de la compacit√© des partitions
produites au cours du partitionnement hi√©rarchique. L'objectif de cette ex-
p√©rience est donc de d√©terminer les fonctions qui peuvent √™tre utilis√©e en tant
que s√©lecteur du Lex-Clustering.

Comme on peut le voir Fig. 5.8 et Fig. 5.9, le coecient de clustering et
la conductance ne semblent pas adapt√©s pour √™tre des s√©lecteurs. En eet, on
remarque que ce sont des fonctions qui atteignent leur maximum √† la n des
fusions, ce que l'on sait √™tre un mauvais partitionnement. Le partitionnement
du Lex-Clustering √† la n des fusions de ses  clusters  correspond √† un
 cluster  g√©ant et √† des petits  clusters . On cherche des petits  clusters 
o√π l'information se diuse rapidement, ce partitionnement n'est donc pas
adapt√©. Comme vu pr√©c√©demment, les r√©sultats du Lex-Clustering ne sont
pas valoris√©s par le coecient de clustering et la conductance.

Comme on peut le voir Fig. 5.10 et Fig. 5.11, la modularit√© et la compa-
cit√© sont adapt√©s pour √™tre utilis√© en tant que s√©lecteurs du Lex-Clustering.
En eet, ces deux fonctions produisent un pic clair correspondant √† leur
maximum global. Ce pic est situ√© loin de la n de l'ex√©cution.

Je note aussi que le maximum global ne correspond pas √† la m√™me it√©-
ration suivant la fonction de qualit√© consid√©r√©e. Par exemple, la compacit√©
pr√©sente un maximum global apr√®s 14 000 fusions sur le r√©seau enron. D'un
autre c√¥t√©, la partition correspondant au maximum de conductance se situe
aux alentours de 33 000 it√©rations. Ainsi, le choix du s√©lecteur peut chan-
ger les r√©sultats de mani√®re radicale. J'√©tudie l'inuence du s√©lecteur dans
l'exp√©rience pr√©sent√©e Sec. 5.2.4.

En r√©sum√© : la modularit√© et la compacit√© sont √†-priori de bons s√©-
lecteurs. Le coecient de clustering retourne syst√©matiquement un r√©sultat
trivial. La conductance a un bon comportement sur facebook, mais ne corres-
pond pas aux attentes sur enron et astro. Enn, je remarque que le choix du
s√©lecteur peut avoir une incidence importante sur la partition s√©lectionn√©e.

68

J. Creusefond

5.2. √âvaluation exp√©rimentale du Lex-Clusering

Figure 5.8  √âvolution du coecient de clustering lors des partitionnements
hi√©rarchiques

Figure 5.9  √âvolution de la conductance lors des partitionnements hi√©rar-
chiques

J. Creusefond

69

Chapitre 5. Une m√©thode de d√©tection de communaut√©s bas√©e sur
l‚Äôalgorithme du LexDFS

Figure 5.10  √âvolution de la modularit√© lors des partitionnements hi√©rar-
chiques

Figure 5.11  √âvolution de la compacit√© lors des partitionnements hi√©rar-
chiques

70

J. Creusefond

5.2. √âvaluation exp√©rimentale du Lex-Clusering

5.2.4 Comparaison avec des v√©rit√©s de terrain

Je compare ensuite les partitions fournies par di√©rents s√©lecteurs et des
v√©rit√©s de terrain. Cette exp√©rience mesure si les partitions fournies par le
Lex-Clustering ressemblent √† celles extraites de l'environnement d'origine du
graphe. Les param√®tres exp√©rimentaux sont d√©taill√©s au Chap. 6, qui pr√©sente
une m√©thodologie incluant ces exp√©riences. Celles-ci correspondent √† l'√©tape 3
de la m√©thodologie pr√©sent√©e Sec. 6.1 de ce chapitre. J'ai exclu le coecient
de clustering en tant que s√©lecteur dans ces exp√©riences.

actors amazon cora CS dblp football ickr github lj youtube

ùëôùëíùë•ùëëùëì ùë†ùëêùëúùëöùëù
ùëôùëíùë•ùëëùëì ùë†ùëêùëúùëõùëë
ùëôùëíùë•ùëëùëì ùë†ùëöùëúùëë

6
2
1

2
3
4

6
3
6

9
2
6

2
4
3

5
8
6

6
9
4

4
2
1

7
5
4

7
8
6

Table 5.1  Les rangs fournis par comparaison avec la v√©rit√© de terrain
(NMI) des r√©sultats du Lex-Clustering avec di√©rents s√©lecteurs

actors amazon cora CS dblp football ickr github lj youtube

ùëôùëíùë•ùëëùëì ùë†ùëêùëúùëöùëù
ùëôùëíùë•ùëëùëì ùë†ùëêùëúùëõùëë
ùëôùëíùë•ùëëùëì ùë†ùëöùëúùëë

3
9
2

6
1
5

8 6,5 3
2
6
6 6,5 2

3

3
8
6

1
8
7

1
9
3

1
9
5

4
9
5

Table 5.2  Les rangs fournis par comparaison avec la v√©rit√© de terrain (fb3)
des r√©sultats du Lex-Clustering avec di√©rents s√©lecteurs

Pour chaque graphe, j'applique les algorithmes Louvain, Clauset, MCL,
Infomap, label propagation et 3-core (cf Sec. 2.4), en plus du Lex-Clustering
avec les trois s√©lecteurs. Le r√©sultat de chacun de ces algorithmes est en-
suite compar√© aux v√©rit√©s de terrain de chacun de ces r√©seaux en utilisant la
NMI [58] et la F-BCubed [5]. Les √©l√©ments des tables 5.1 et 5.2 pr√©sentent
les rangs du Lex-Clustering avec di√©rents s√©lecteurs parmi les algorithmes
√©tudi√©s. Les algorithmes sont class√©s en ordre d√©croissant. Les rangs vont de
1 √† 9.

Comme l'exp√©rience pr√©c√©dente le laissait supposer, l'utilisation de di√©-
rents s√©lecteurs peut changer radicalement le r√©sultat. Par exemple ùëôùëíùë•ùëëùëì ùë†ùëêùëúùëõùëë
est de rang 2 pour cora, F-BCubed tandis que ùëôùëíùë•ùëëùëì ùë†ùëêùëúùëöùëù est de rang 8. On
peut voir que la NMI et la F-BCubed fournissent des r√©sultats signicati-
vement di√©rents. Le coecient de rang de Spearman moyen entre les deux
classements est de 0,21, ce qui indique en g√©n√©ral une corr√©lation faible.

J. Creusefond

71

Chapitre 5. Une m√©thode de d√©tection de communaut√©s bas√©e sur
l‚Äôalgorithme du LexDFS

Chaque rang sera r√©f√©renc√© dans le paragraphe suivant sous la forme ùëüùëéùëõùëî-

ùëõùëöùëñ/ùëüùëéùëõùëî-ùëì ùëèùëêùë¢ùëèùëíùëë.

On remarque tout d'abord que la conductance fournissent des partitions
relativement proches de celles d'amazon par rapport aux autres algorithmes :
3/1. La conductance comme s√©lecteur du Lex-Clustering produit de tr√®s bons
scores sur ces graphes amazon (3/1), cora (3/2) et CS (4/2). Les partitions
s√©lectionn√©es par cette fonction de qualit√© ont cependant de tr√®s mauvais
r√©sultats sur le reste des jeux de donn√©es. La compacit√© et la modularit√©
ont des r√©sultats relativement similaires : de bons scores sur les donn√©es dblp
(2/3, 3/2), actors (6/3, 1/2) et github (4/1, 1/3).

En r√©sum√©, comparer de multiples fonctions de qualit√© en tant que s√©-
lecteurs du Lex-Clustering permet d'obtenir des r√©sultats signicativement
di√©rents. La conductance a de tr√®s bons r√©sultats sur les r√©seaux li√©s √† la
publication scientique (un contexte, comme d√©crit Chap. 6). L'utilisation
de la compacit√© et de la modularit√© donne de bons r√©sultats sur des r√©seaux
de collaboration : dblp, actors et github. La qualit√© d'un s√©lecteur est donc
d√©pendante de la v√©rit√© de terrain. On remarque que certains s√©lecteurs cor-
respondent √† plusieurs v√©rit√©s de terrain.

En m'inspirant d'√©tudes portant sur la diusion de l'information dans
les r√©seaux sociaux, j'ai propos√© d'utiliser le LexDFS pour d√©tecter des
communaut√©s. Cet algorithme de parcours de graphe visite les zones
denses du graphe en un nombre faible d'it√©rations. J'ai utilis√© cette pro-
pri√©t√© dans un algorithme hi√©rarchique de complexit√© log-lin√©aire, le Lex-
Clustering. Les exp√©riences ont montr√© que cet algorithme produit des
r√©sultats tr√®s proches de ce qui est observ√© dans di√©rents jeux de don-
n√©es, suivant la fonction de qualit√© utilis√©e comme s√©lecteur.

Nous avons vu que l'on pouvait √©valuer un algorithme de d√©tection
de communaut√©s de plusieurs fa√ßons. Des fonctions de qualit√© et des
jeux de donn√©es peuvent √™tre utilis√©s pour cette √©valuation. D'un c√¥t√©,
les propri√©t√©s mesur√©es par les fonctions de qualit√© sont bien identi√©es.
D'un autre c√¥t√©, les implications de la proximit√© des r√©sultats avec les
v√©rit√©s de terrain sont moins claires. Dans le prochain chapitre, j'√©tudie
la relation entre les deux m√©thodes d'√©valuation.

72

J. Creusefond

Chapitre 6

L‚Äô√©valuation de structures
communautaires

On peut √©valuer les partitions d‚Äôun graphe en appliquant des fonc-
tions de qualit√© et en les comparant √† des v√©rit√©s de terrain. Dans
ce chapitre, je fais le lien entre les deux m√©thodes en analysant
la corr√©lation entre les classements des partitions selon chaque
√©valuation.

Les travaux pr√©sent√©s dans ce chapitre ont fait l‚Äôobjet de la

publication [27].

Yang et Leskovec [103] distinguent communaut√©s structurelles et fonc-
tionnelles. Les communaut√©s structurelles sont d√©nies par les propri√©t√©s du
graphe, tandis que les communaut√©s fonctionnelles sont caract√©ris√©es par un
pass√© ou un int√©r√™t commun de leurs membres.

Ces communaut√©s fonctionnelles apparaissent notamment dans les m√©ta-
donn√©es associ√©es aux r√©seaux. Par exemple, on trouve l'appartenance expli-
cite √† des groupes dans les m√©tadonn√©es des sites web de r√©seaux sociaux.

Une motivation de la d√©tection de communaut√©s peut √™tre la recherche de
communaut√©s fonctionnelles. Dans ce but, les algorithmes sont compar√©s aux
m√©tadonn√©es, utilis√©es alors comme v√©rit√© de terrain (par exemple [52, 79]).
Un algorithme est consid√©r√© comme performant dans ce cas si les partitions
qu'il produit sont similaires aux m√©tadonn√©es.

Je d√©nis la coh√©rence entre fonctions de qualit√© et v√©rit√©s de terrain. Soit
une fonction de qualit√© ùëÑ. Soit une v√©rit√© de terrain ùëÄ d'un graphe ùê∫. Soit
un ensemble ùê¥ de partitions de ùê∫. En utilisant ùëÑ pour √©valuer les partitions
de ùê¥, on obtient un classement ùê∂ùëÑ(ùê¥) des partitions. De la m√™me mani√®re,
on obtient un classement ùê∂ùëÄ (ùê¥) en comparant avec la v√©rit√© de terrain. Je
qualie la fonction de qualit√© ùëÑ et la v√©rit√© de terrain ùëÄ de coh√©rentes si

J. Creusefond

73

Chapitre 6. L‚Äô√©valuation de structures communautaires

ùê∂ùëÑ(ùê¥) et ùê∂ùëÄ (ùê¥) ont un coecient de rang de Spearman important (Eq. 5.2).
Dans ce chapitre, j'analyse la coh√©rence entre fonctions de qualit√© et v√©ri-
t√©s de terrain. J'identie des v√©rit√©s de terrain ayant une coh√©rence similaire
avec les fonctions de qualit√©, et j'appelle ces ensembles des contextes. Je
d√©termine aussi les fonctions de qualit√© correspondant le mieux √† chaque
contexte.

Utiliser ces v√©rit√©s de terrain a r√©cemment √©t√© critiqu√© par Peel et al. [77].
Ils pr√©sentent quatre raisons pour que le r√©sultat d'un algorithme de d√©tection
de communaut√©s ne soit pas similaire √† la v√©rit√© de terrain :

1. la structure de la v√©rit√© de terrain n'est pas li√©e √† la structure du r√©seau,
2. la structure de la v√©rit√© de terrain et l'algorithme de d√©tection de com-

munaut√©s capturent des aspects di√©rents du r√©seau,

3. le r√©seau ne pr√©sente pas de structure communautaire,
4. l'algorithme de d√©tection de communaut√©s n'est pas adapt√© √† la d√©tec-

tion des communaut√©s fonctionnelles.

Pour les auteurs, utiliser les m√©tadonn√©es comme v√©rit√© de terrain √©quivaut
√† supposer que seul le cas 4 est possible.

Tout d'abord, il n'est pas clair que les cas 2 et 4 sont di√©rents. En
eet, chaque algorithme capture un aspect di√©rent du r√©seau, et c'est la
pertinence de cet aspect qui fait la pertinence de l'algorithme. Ensuite, les
cas 1 et 3 impliquent que le r√©seau et les m√©tadonn√©es ne correspondent
pas aux suppositions que je fais sur les propri√©t√©s des r√©seaux sociaux. Je
consid√®re donc la comparaison des partitions avec les v√©rit√©s de terrain comme
pertinente pour la recherche de communaut√©s fonctionnelles.

Le lien entre les communaut√©s fonctionnelles et structurelles est aussi
√©tudi√© par Hric et al. [49]. Ils montrent que les algorithmes de d√©tection de
communaut√©s actuels produisent des partitions assez √©loign√©es des v√©rit√©s de
terrain et soulignent la n√©cessit√© d'algorithmes plus adapt√©s.

Les fonctions de qualit√© ont √©t√©s √©tudi√©es par d'autres auteurs.
Yang et Leskovec [103] ont analys√© 12 fonctions de qualit√© pouvant √™tre
appliqu√©es au niveau de la communaut√©. Leurs exp√©riences identient les
propri√©t√©s que mesurent ces fonctions de qualit√©.

Almeida et al. [2] ont compar√© le r√©sultat de quatre algorithmes en utili-
sant cinq fonctions de qualit√© sur cinq jeux de donn√©es. Ils ont notamment
observ√© que certaines fonctions de qualit√© ont tendance √† favoriser des  clus-
ters  de plus grande taille, et inversement.

74

J. Creusefond

6.1. M√©thodologie exp√©rimentale

Chakraborty et al. [18] ont utilis√© une m√©thodologie similaire √† celle que
je mets en place dans le but de mesurer la performance de leur fonction de
qualit√© sur quelques jeux de donn√©es. Les approches di√®rent donc par le
but, mais aussi par l'√©chelle : les exp√©riences que je mets en place incluent
un nombre bien plus important de jeux de donn√©es, fonctions de qualit√© et
d'algorithmes.

6.1 M√©thodologie exp√©rimentale

Mes exp√©riences ont deux objectifs. Tout d'abord, j'identie des contextes.
Ensuite, je rep√®re les fonctions de qualit√© coh√©rentes avec chaque contexte.
Pour chaque graphe ayant une v√©rit√© de terrain, j'ex√©cute les √©tapes sui-

vantes :

1. L'application d'algorithmes de d√©tection de communaut√©s sur le graphe.
2. Le calcul de fonctions de qualit√© sur les partitions r√©sultantes.
3. La comparaison des partitions de l'√©tape 1 avec la v√©rit√© de terrain,

cr√©ant un score de r√©f√©rence pour chaque partition.

4. La mesure de la coh√©rence entre chaque v√©rit√© de terrain et chaque

fonction de qualit√©.

Les √©tapes de cette m√©thodologie sont repr√©sent√©es Fig. 6.1.
Apr√®s l'ex√©cution de ces √©tapes pour chaque jeu de donn√©es, j'applique
le coecient de rang de Spearman entre les r√©sultats de coh√©rence des dif-
f√©rentes fonctions de qualit√© pour chaque paire de graphes. Cette derni√®re
√©tape permet l'identication de contextes. Je peux ensuite, par l'analyse des
mesures produite par l'√©tape 4, reconna√Ætre les fonctions de qualit√© coh√©rentes
avec des contextes.

J. Creusefond

75

Chapitre 6. L‚Äô√©valuation de structures communautaires

Figure 6.1  √âtapes de la m√©thodologie exp√©rimentale

6.2 Param√®tres exp√©rimentaux

Les algorithmes de d√©tection de communaut√© utilis√©s sont Louvain, Clau-
set, MCL, Infomap, Label propagation et 3-core (voir Sec. 2.4) ainsi que
LexDFS (voir Chap. 5). Les fonctions de qualit√© utilis√©es sont Coecient de
clustering, Permanence, 1-Flake-ODF, FOMD, 1-Cut-ratio, 1-Conductance,
Modularit√©, Surprise et Signiance (voir Sec. 2.3) ainsi que la Compacit√©
(voir Chap. 4) Les m√©thodes de comparaison utilis√©es sont la NMI et la fb3.
Elles sont d√©crites Sec. 2.5.

J'applique la m√©thodologie sur 10 r√©seaux. Les noeuds qui n'appartiennent
√† aucun  cluster  dans les v√©rit√©s de terrain sont supprim√©s et seule la
composante connexe la plus grande est utilis√©e. Je note ‚Üí pour les r√©seaux
orient√©s, et

pour les communaut√©s chevauchantes.

R√©seaux de collaboration (voir Tab. 6.1). Ces r√©seaux repr√©sentent des
individus travaillant ensemble.

Le r√©seau  Computer Science  (CS) provient de la m√™me source que
le r√©seau  DBLP . CS est cependant compos√© uniquement de scientiques
travaillant en informatique. De plus, les v√©rit√©s de terrain sont di√©rentes. Les
r√©seaux  actors  et  github  sont construit √† partir de graphes bipartis,
et sont compos√©s de cliques √† l'int√©rieur des communaut√©s.

1. http://snap.stanford.edu/data/
2. http://konect.uni-koblenz.de
3. https://github.com/blog/466-the-2009-github-contest

76

J. Creusefond

SpearmanV√©rit√©sde terrainGraphesPartitionnementM√©thodes decomparaisonFonctionsde qualit√©PartitionsScores de r√©f√©renceScores12346.2. Param√®tres exp√©rimentaux

Nom

ùëö
DBLP1 [103] 130k 333k

ùëõ

noeuds
auteurs

ar√™tes

co-auteur

CS [16][17]

401k 1428k

auteurs

co-auteur

communaut√©s
publi√© dans le
m√™me ouvrage

domaine de
publication

Actors

(imdb)2 [8]
Github23

124k 20490k

acteurs

lm commun

lms

40k 22278k d√©veloppeurs co-contributions

projets

Table 6.1  R√©seaux de collaboration

Nom

ùëõ

ùëö

noeuds

communaut√©s
LiveJournal1 [103] 1143k 16881k bloggeurs  follow  ‚Üí groupes explicites
317k youtubeurs  follow  ‚Üí groupes explicites
51k
368k 11916k utilisateurs  follow  ‚Üí groupes explicites

Youtube1 [103]

Flickr [71]

ar√™tes

Table 6.2  Sites web de r√©seaux sociaux

Sites web de r√©seaux sociaux (¬´ Online Social Networks ¬ª, OSN)
(voir Tab. 6.2). Ces r√©seaux repr√©sentent des relations explicites entre indi-
vidus sur des sites web.

Le site web  LiveJournal  permet de poster des blogs en ligne.  You-
tube  est une plate-forme de partage de vid√©os. L'activit√© principale sur
 Flickr  est le partage de photographies. Ces sites incluent la possibilit√© de
se connecter entre utilisateurs. Ils permettent aux utilisateurs de rejoindre
librement des groupes explicites.

Sur ces sites, les liens sont orient√©s. Les auteurs originaux ont cependant
consid√©r√© que les traiter comme des r√©seaux non dirig√©s √©tait raisonnable du
fait que la plupart des liens existaient dans les deux sens.

R√©seaux proches des r√©seaux sociaux (voir Tab. 6.3). Les noeuds de
ces r√©seaux ne repr√©sentent pas des individus, mais les r√©seaux en eux-m√™mes
d√©crivent une forme d'interaction sociale.

1. http://snap.stanford.edu/data/

J. Creusefond

77

Chapitre 6. L‚Äô√©valuation de structures communautaires

Nom

ùëõ ùëö
Amazon1 [103] 148k 267k

noeuds
produits

ar√™tes

communaut√©s

achat commun

cat√©gories

Football [39]

115 613

√©quipes de

1 match ou plus

divisions

Cora2 [88]

23k 89k

football
articles

scientiques

citations ‚Üí

cat√©gories

fr√©quent

Table 6.3  R√©seaux semi-sociaux

 Amazon  renseigne les produits fr√©quemment achet√©s avec ceux que
l'on consulte. Les cat√©gories de produits forment la v√©rit√© de terrain. Le
r√©seau  Football  correspond aux matchs d'√©quipes de football universitaires
am√©ricaines en automne 2000, et les m√©tadonn√©es sont les divisions. Le r√©seau
 Cora  est form√© d'un ensemble de publications scientiques provenant d'un
d√©p√¥t en ligne. Les publications sont li√©es par une ar√™te si l'une cite l'autre,
et les m√©tadonn√©es sont les domaines scientiques des papiers.

R√©seaux artificiels J'utilise le benchmark de Lancichinetti-Fortunato-Radicchi
(LFR) [59] comme outil d'√©tude de la m√©thodologie. Il s'agit d'un mod√®le de
g√©n√©ration de graphes et de structures communautaires.

Plusieurs param√®tres permettent de modier le comportement de ce mo-

d√®le :

 ùëõ : le nombre de noeuds,
 ÀÜùëò : le degr√© moyen,
 ùëòùëöùëéùë• : le degr√© maximum,
 ùúá : le ratio degr√© externe/degr√© interne des noeuds,
 ùë°1 : le coecient de la loi de puissance de la distribution des degr√©s
 ùë°2 : le coecient de la loi de puissance de la distribution des tailles des

communaut√©s,

 ÀÜùëêùëê : coecient de clustering moyen,
 ùëúùëõ : le nombre de noeuds appartenant √† plusieurs communaut√©s,
 ùëúùëö : le nombre de communaut√©s auxquels ceux-ci appartiennent.

1. http://snap.stanford.edu/data/
2. http://konect.uni-koblenz.de

78

J. Creusefond

6.3. Optimisations

ùëõ

nom
LFRa 10 000
LFRb 100 000
LFRc 10 000
LFRd 10 000
LFRe 10 000

ÀÜùëò
50
50
100
50
100

ùëòùëöùëéùë•
1k
2,5k
500
1k
500

ùúá
0.1
0.1
0.4
0.1
0.4

ùë°1
2.5
2.5
2.1
2.5
2.1

ùë°2
2.5
2.5
2.0
2.5
2.0

ÀÜùëêùëê
0.2
0.2
0.1
0.2
0.1

ùëúùëõ
8k
80k
8k
0
0

ùëúùëö
4
4
5
0
0

Table 6.4  Les param√®tres des cinq classes de r√©seaux articiels LFR

Comme pr√©sent√© √† la Tab. 6.4, je compose 5 classes de r√©seaux. Celles-ci
sont di√©renci√©es par les param√®tres du LFR qui les g√©n√®rent. Je les cr√©e
de telle mani√®re que les classes a, b et d ont beaucoup de param√®tres du
LFR en commun, et les classes c et e sont di√©rentes. Les r√©seaux de la
classe a pr√©sentent des communaut√©s s√©par√©es (ùúá faible) et chevauchantes.
La classe b a les m√™mes param√®tres que la classe a, mais avec 10 fois plus de
noeuds. Notons que le degr√© maximal n'√©volue pas de mani√®re lin√©aire avec
l'augmentation de taille, mais par la loi de puissance de param√®tre 2,5. Ainsi
une multiplication par 10 entra√Æne une augmentation par 101/2,5 ‚àº 2,5.

La classe c a des param√®tres tr√®s di√©rents de la classe a, sauf en ce qui
concerne la taille. Les classes d et e sont respectivement similaires aux classes
a et c, mais les communaut√©s n'y sont pas chevauchantes.

6.3 Optimisations

Trois mesures prennent beaucoup de ressources dans ces exp√©riences : le
calcul du diam√®tre, le comptage des triangles et la fb3. Pour le calcul du
diam√®tre, j'utilise la m√™me approche que celle d√©velopp√©e Sec. 5.2. ùëìùëêùëôùë¢ùë† et
ùëìùëùùëíùëüùëö n√©cessitent le calcul du nombre de triangles internes qui peut √™tre tr√®s
grand pour des graphes ayant des zones tr√®s denses. La fb3 est en ùí™(|ùëê|2) en
temps pour le calcul des valeurs de la communaut√© ùëê, ce qui pose probl√®me
pour les communaut√©s de taille importante.

J'√©chantillonne ces valeurs. La borne de Hoeding [46] permet de borner
l'erreur ainsi faite, les √©chantillons √©tant i.i.d et dans l'intervalle [0,1]. Cette
borne donne une indication du nombre d'√©chantillons ùë° n√©cessaires pour ob-
tenir une pr√©cision satisfaisante. Soit ùëù la probabilit√© que l'erreur r√©sultant
de l'√©chantillonnage d√©passe ùúñ. La borne est alors :

ùëÉ (|ùëã ‚àí ùê∏[ùëã]| ‚â• ùúñ) = ùëù ‚â§ 2ùëí‚àí2ùëõùúñ2 ‚áî ùëõ ‚â• ùëôùëõ(ùëù/2)
‚àí2ùúñ2

(6.1)
J'utilise 5000 √©chantillons, ce que signie que ùëù ‚â§ 5% et ùúñ ‚â§ 0.02. En pra-

J. Creusefond

79

Chapitre 6. L‚Äô√©valuation de structures communautaires

tique, on observe des erreurs d'environ 10‚àí4, ce qui est trop faible pour per-
turber les r√©sultats.

Du fait que je prenne en compte le classement des mesures, des erreurs
born√©es peuvent avoir des eets non born√©s si des mesures ont des r√©sultats
tr√®s proches. De plus, quelques algorithmes de d√©tection de communaut√©
sont al√©atoires, ce qui implique une potentielle di√©rence incontr√¥lable dans
les r√©sultats. An d'observer l'inuence de ces eets, les calculs ont √©t√©s
eectu√©s enti√®rement plusieurs fois. Il n'a √©t√© observ√© que des di√©rences
minimes entre les r√©sultats.

6.4 R√©sultats

J'applique la m√©thodologie sur les graphes g√©n√©r√©s par le LFR. Pour
chaque classe, je g√©n√®re al√©atoirement trois r√©seaux avec les param√®tres d√©-
crits Sec. 6.2. Ainsi, je peux observer l'eet de l'al√©atoire dans le processus de
g√©n√©ration du LFR sur la stabilit√© de la m√©thode. Les r√©sultats sont report√©s
Tab. 6.5 et Tab. 6.6 pour la NMI et la fb3 respectivement.

c2

c3

d1 d2 d3

e1

e2

a1 a2 a3 b1 b2 b3 c1

e3
a1 - 1.00 1.00 0.98 0.99 0.45 0.40 -0.23 -0.09 0.53 0.53 0.53 0.69 0.31 0.95
- 1.00 0.98 0.99 0.45 0.40 -0.23 -0.09 0.53 0.53 0.53 0.69 0.31 0.95
a2 -
a3 -
- 0.98 0.99 0.45 0.43 -0.22 -0.07 0.53 0.53 0.53 0.69 0.31 0.94
-
- 0.99 0.48 0.35 -0.15 0.01 0.53 0.53 0.53 0.69 0.31 0.92
-
-
b1 -
b2 -
-
-
-
- 0.46 0.34 -0.21 -0.07 0.53 0.53 0.53 0.69 0.31 0.94
b3 -
- 0.29 0.03 0.21 0.15 0.15 0.15 0.67 0.56 0.42
-
-
-
-
0.07 0.15 0.27 0.27 0.27 0.30 0.25 0.41
-
-
-
-
-
c1 -
0.90 0.34 0.34 0.34 -0.12 0.05 -0.32
-
-
-
-
-
c2 -
c3 -
-
-
-
-
-
0.22 0.22 0.22 -0.03 0.20 -0.16
d1 -
- 1.00 1.00 0.47 0.12 0.47
-
-
-
-
-
- 1.00 0.47 0.12 0.47
-
-
-
-
-
-
d2 -
d3 -
-
-
-
-
-
-
-
0.47 0.12 0.47
0.76 0.70
-
-
-
-
-
-
-
e1 -
-
-
-
-
-
-
-
e2 -
0.35
e3 -
-
-
-
-
-
-
-

-
-
-
-
-
-
-
-
-

-
-
-
-
-
-
-
-

-
-
-
-
-
-
-

-
-
-
-

-
-
-

-
-

-

Table 6.5  La corr√©lation entre le classement des fonctions de qualit√© four-
nies par la NMI pour les graphes synth√©tiques du LFR

Dans la Tab. 6.5, on peut voir que les scores intra-classes sont particu-
li√®rement √©lev√©s. Les fonctions de qualit√© ont donc des classements similaires
pour les graphes des m√™mes classes. Il y a cependant quelques exceptions.

80

J. Creusefond

6.4. R√©sultats

Par exemple, le classement des fonctions de qualit√© sur c1 semble √™tre plus
proche de celui des graphes de la classe a que de sa propre classe. L'exis-
tence de ces variations est due √† la nature al√©atoire du mod√®le g√©n√©rateur.
La m√©thodologie utilisant la NMI est donc sensible √† des variations dues aux
param√®tres non contr√¥l√©s par le mod√®le LFR.

Les similarit√©s attendues sont observ√©es : les graphes de la classe a ont
des scores globalement proches de ceux des classes b et d. Cependant, les
graphes de la classe e sont proches de ceux de la classe a, une observation
qui est aussi vraie pour la fb3 (cf Tab. 6.6). Le fait que les communaut√©s de
la classe e ne soient pas chevauchantes semble donc diminuer l'impact de la
di√©rence des autres param√®tres sur la proximit√© entre les classes a et e.

Ainsi, l'application de la m√©thodologie avec la NMI comme m√©thode de
comparaison a globalement le comportement attendu. La proc√©dure est par-
fois inuenc√©e par des caract√©ristiques al√©atoires dans le mod√®le LFR.

c1

c2

c3

d1

d2

d3

e1

e2

a1 a2 a3 b1 b2 b3

e3
a1 - 0.99 1.00 0.95 0.94 0.96 -0.23 -0.50 -0.44 0.72 0.72 0.72 0.89 0.89 0.88
a2 -
- 0.99 0.94 0.93 0.94 -0.26 -0.48 -0.42 0.70 0.70 0.70 0.89 0.87 0.88
- 0.95 0.94 0.96 -0.23 -0.50 -0.44 0.72 0.72 0.72 0.89 0.89 0.88
-
a3 -
- 1.00 1.00 -0.26 -0.49 -0.44 0.80 0.80 0.80 0.90 0.92 0.93
-
-
b1 -
b2 -
-
-
-
- 1.00 -0.27 -0.48 -0.43 0.80 0.80 0.80 0.90 0.92 0.93
-0.25 -0.49 -0.43 0.80 0.80 0.80 0.90 0.91 0.92
-
-
-
-
b3 -
0.62 0.76 -0.27 -0.27 -0.27 -0.42 -0.38 -0.37
-
-
-
-
c1 -
c2 -
-
-
-
-
0.90 -0.26 -0.26 -0.26 -0.49 -0.51 -0.37
c3 -
-0.31 -0.31 -0.31 -0.47 -0.47 -0.39
-
-
-
-
1.00 1.00 0.75 0.78 0.79
-
-
-
-
d1 -
d2 -
1.00 0.75 0.78 0.79
-
-
-
-
d3 -
-
-
-
-
0.75 0.78 0.79
e1 -
0.98 0.96
-
-
-
-
-
-
-
-
e2 -
0.96
e3 -
-
-
-
-

-
-
-
-
-
-
-
-
-
-

-
-
-
-
-
-
-
-
-

-
-
-
-
-
-
-
-

-
-
-
-
-
-
-

-
-
-
-
-
-

-
-
-
-
-

-
-
-
-

-
-
-

-
-

-

Table 6.6  La corr√©lation entre le classement des fonctions de qualit√© four-
nies par la NMI pour les graphes synth√©tiques du LFR

Dans la Tab. 6.6, on observe que les corr√©lations en utilisant la fb3 ne
pr√©sente aucune valeur entre -0.2 et 0.6. Il n'y a donc pas de corr√©lation faible.
La classe c est consid√©r√©e comme tr√®s di√©rente des autres car ses r√©sultats
sont tous anticorr√©l√©s avec ceux des autres classes. La corr√©lation intra-classes
est particuli√®rement forte, sup√©rieure √† 0.95 pour toutes les classes sauf la c
o√π l'al√©atoire semble avoir un l√©ger r√¥le, avec une corr√©lation c1/c2 √† 0.62.

J. Creusefond

81

Chapitre 6. L‚Äô√©valuation de structures communautaires

Comme indiqu√© pr√©c√©demment, les r√©sultats de la fb3 ne semblent pas prendre
en compte la di√©rence de param√®tres de la classe e.

En conclusion, les r√©sultats de la fb3 sont moins sensibles √† la g√©n√©ration
al√©atoire du LFR que ceux de la NMI. Cependant, la di√©rence de recouvre-
ment fait que la classe e est consid√©r√©e comme ressemblante aux autres.

J'applique la m√™me m√©thodologie sur l'ensemble des donn√©es rassembl√©es.
L'objectif est alors d'identier les contextes. Contrairement au LFR, il n'y a
pas de contr√¥le pr√©cis des propri√©t√©s des r√©seaux en question, simplement la
connaissance de l'environnement d'origine des r√©seaux.

Les r√©sultats des jeux de donn√©es r√©els sont bien moins extr√™mes que ceux
des graphes g√©n√©r√©s. N√©anmoins, on peut voir Tab. 6.7 et 6.8 que les tuples de
jeux de donn√©es (cora, CS) et (flickr, lj, youtube) ont un score important
par les deux m√©thodes de comparaison.

Cette observation est explicable par la similarit√© de l'origine de ces r√©-
seaux. M√™me si ce que repr√©sentent les noeuds est di√©rent, Cora et CS
correspondent tous deux √† des publications scientiques et leurs v√©rit√©s de
terrain √† des domaines de publication. Youtube, ickr et lj ont aussi des
m√©caniques similaires : la cr√©ation de lien est due √† un individu suivant les
publications d'un autre, et les structures communautaires sont des groupes
explicites. Les autres corr√©lations observ√©es di√®rent suivant la m√©thode de
comparaison utilis√©e.

CS actors amazon cora dblp ickr football github
youtube
- 0.923 0.281 0.972 0.302 0.103 0.245 0.014 0.253 -0.187
0.264 0.899 0.276 0.168 0.318 0.105 0.262 -0.077
-
actors
amazon -
0.280 0.965 -0.231 0.523 -0.033 -0.269 -0.336
cora
0.327 0.115 0.213 0.052 0.334 -0.191
-
-0.238 0.453 0.031 -0.241 -0.357
-
dblp
0.180 0.367 0.808 0.759
ickr
-
football
-
0.350 -0.191 0.117
0.329 0.549
github -
-
0.587
youtube -

-
-
-
-
-
-
-
-
-

-
-
-
-
-
-
-
-

lj

-
-

CS

lj

-
-
-
-

-
-
-

-

-
-
-
-
-
-
-

-
-
-
-
-
-

-
-
-
-
-

Table 6.7  Le coecient de Spearman des lignes de Tab.6.9 (NMI)

Tab. 6.7, NMI : Je note tout d'abord que le tuple (cora, CS) est √©tendu
par un autre r√©seau de collaboration √† (cora, CS, actors). J'observe de plus

82

J. Creusefond

6.4. R√©sultats

une corr√©lation inattendue : (dblp, amazon). Comme observ√© Tab. 6.9, ces
r√©sultats sont dus √† de multiples valeurs de coh√©rence proches de z√©ro. Les
autres corr√©lations observ√©es avec la NMI sont √©galement observ√©es avec la
fb3.

CS actors amazon cora dblp ickr football github
-
actors
-
amazon -
-
cora
-
dblp
-
ickr
football
-
github -
-
youtube -

youtube
-0.070 0.920 0.970 0.502 0.224 -0.434 -0.344 -0.351 -0.035
-0.052 -0.157 0.472 -0.091 0.776 0.774 0.434 0.227
0.935 0.411 0.189 -0.455 -0.378 -0.316 -0.105
0.409 0.358 -0.456 -0.381 -0.266 0.040
0.250 0.163 0.187 0.143 0.456
0.154 0.156 0.533 0.790
0.911 0.719 0.497
0.654 0.414
0.760

-
-
-
-
-
-
-
-
-

lj

-
-

CS

lj

-
-
-
-

-
-
-

-
-
-
-
-
-
-
-

-
-
-
-
-
-
-

-
-
-
-
-
-

-
-
-
-
-

-

Table 6.8  Le coecient de Spearman des lignes de Tab. 6.10 (fb3)

Tab. 6.8, fb3 : On note une autre corr√©lation surprenante Tab. 6.8 entre
le r√©seau de co-achats et les r√©seaux de publication (amazon, cora, CS).
Ces corr√©lations proviennent encore une fois des valeurs de coh√©rence faibles
observ√©es Tab. 6.10.

Les r√©seaux avec une forte densit√© interne, (actor, football, github),
ont une forte corr√©lation interne en observant les classements des fonctions
de qualit√© avec la fb3. Le point commun de ces r√©seaux est une densit√© √©lev√©e
√† l'int√©rieur des communaut√©s.

J'analyse maintenant les corr√©lations entre les fonctions de qualit√© et les
m√©thodes de comparaison. Je cherche principalement les fonctions coh√©rentes
avec les jeux de donn√©es des contextes.

En utilisant la fb3 (Tab. 6.10), on voit qu'aucune fonction de qualit√©
n'a de coh√©rence haute et consistante dans le contexte des OSN (ickr, lj,
youtube). Cependant, les r√©sultats de la NMI et de la fb3 sont anti-corr√©l√©s
dans ce contexte, avec des coecients de Spearman allant de -0.71 √† -0.89.
Ainsi, Tab. 6.9 montre que la modularit√© a de fortes valeurs de coh√©-
rence avec les r√©sultats de la NMI dans ce contexte. La propri√©t√© du rapport

J. Creusefond

83

Chapitre 6. L‚Äô√©valuation de structures communautaires

ickr

cc
0.00 -0.71 0.75 1.00 0.61 0.07 0.61
-0.21 -0.86 0.43 1.00 0.21 -0.18 0.50
youtube 0.36 -0.89 0.96 1.00 0.79 0.39 0.68
0.06 0.69 -0.06 1.00 0.06 -0.06 0.19
0.00 0.82 -0.25 1.00 0.00 -0.14 0.14

cora
CS

lj

0.14
0.07
0.32
0.25
0.11
0.07
0.69
0.06
0.61 -0.04
actors -0.54 0.46 -0.89 1.00 -0.21 -0.50 -0.21 -0.21 -0.39
football 0.38 0.38 0.10 1.00 0.88 0.38 -0.37 0.56
0.38
github -0.29 -0.36 -0.11 1.00 -0.07 0.11 -0.11 -0.04 -0.43
amazon -0.30 0.03 -0.97 1.00 -0.97 -0.12 -0.97 -0.87 0.03
dblp -0.43 0.89 -0.96 1.00 -0.96 -0.32 -0.89 -0.57 0.18

fb3 mod nmi perm sign cond FOMD comp cut_ratio f-odf sur
0.61 -0.75
0.50 -0.32
0.68 0.61
0.19 -0.06
0.00 -0.46
-0.32 -0.57
-0.33 0.38
0.07 -0.04
-0.97 -0.44
-0.86 -0.46

-0.01
0.35
0.31
0.44
0.32
-0.21
-0.87
-0.14
-0.96
-0.88

Table 6.9  Le coecient de Spearman de la NMI(v√©rit√© de terrain, algo-
rithmes) compar√© aux r√©sultats de la fonction de qualit√©

densit√© interne/externe √©voqu√©e Chap. 4 semble pr√©valoir pour ce contexte
en utilisant la NMI. En eet, les fonctions de qualit√© ayant un score √©lev√©
prennent toutes cette propri√©t√© en compte (modularit√©, permanence, f-odf et
conductance).

Les r√©sultats des deux m√©thodes de comparaison sur les r√©seaux du contexte
de la collaboration scientique (cora, CS) sont corr√©l√©s avec la FOMD. Une
FOMD √©lev√©e implique qu'un grand nombre d'individus a un degr√© interne
√©lev√©, elle mesure donc la propri√©t√© de densit√© interne. On note le score as-
sez √©lev√© de certaines fonctions mesurant le ratio interne/externe (cut-ratio,
conductance, f-odf).

On n'observe aucune fonction de qualit√© coh√©rente avec les r√©seaux pr√©-
sentant une densit√© interne importante (football, github, actors) avec la NMI.
Cependant, la comparaison avec la fb3 est coh√©rente avec la signature et de
la surprise, les deux fonctions de qualit√© globales. Elles ont toutes deux la
caract√©ristique de comparer la densit√© interne √† un mod√®le nul.

Les deux r√©seaux n'appartenant pas √† un contexte, amazon et dblp, ne
pr√©sentent aucune corr√©lation satisfaisante avec les fonctions de qualit√© uti-
lis√©es. Il est possible que les caract√©ristiques de ces communaut√©s soient tr√®s
√©loign√©es de ce que l'on conna√Æt.

J'observe aussi que la compacit√© est coh√©rente avec les r√©sultats de la fb3
sur les r√©seaux √† densit√© interne importante (football, github, actors). En plus
d'un int√©r√™t th√©orique, la compacit√© est donc exp√©rimentalement coh√©rente
avec un contexte.

84

J. Creusefond

6.4. R√©sultats

youtube 0.04 1.00 -0.86 -0.89 -0.61 -0.07 -0.54 0.04

0.46

ickr

lj

cora
CS

-0.64 1.00 0.04 0.69 0.29 -0.75 0.50
-0.50 1.00 -0.14 0.82 0.14 -0.75 0.39

cc
0.18 1.00 -0.21 -0.71 0.07 0.04 0.07
0.39
0.29 1.00 -0.54 -0.86 -0.14 0.39 -0.46 -0.36 -0.11
0.14
0.89 -0.75
0.75 -0.61
actors 0.29 1.00 -0.07 0.46 -0.79 0.43 -0.79 -0.79 0.18
football 1.00 1.00 0.68 0.38 0.25 1.00 -0.96 -0.05 1.00
github -0.29 1.00 0.39 -0.36 -0.57 0.71 -0.61 -0.79 0.71
amazon -0.86 1.00 -0.04 0.03 -0.04 -0.89 0.00
0.25 -0.93
dblp -0.68 1.00 -0.79 0.89 -0.79 -0.57 -0.64 -0.32 -0.07

fb3 mod nmi perm sign cond FOMD comp cut_ratio f-odf sur
0.07 0.29
-0.46 0.32
-0.54 -0.32
0.50 -0.75
0.18 -0.93
-0.64 0.36
-0.93 1.00
-0.93 0.71
0.00 -0.79
-0.61 -0.71

0.60
-0.38
-0.19
0.79
0.59
-0.79
-0.21
-0.57
-0.01
-0.67

Table 6.10  Le coecient de Spearman de la fb3(v√©rit√© de terrain, algo-
rithmes) compar√© aux r√©sultats de la fonction de qualit√©

Dans ce chapitre, j'ai pr√©sent√© une m√©thodologie permettant d'√©tudier
la relation entre l'√©valuation par les fonctions de qualit√© et l'√©valuation
par les v√©rit√©s de terrain. Ces travaux ont abouti √† l'identication de
trois contextes qui correspondent aux sites web de r√©seaux sociaux, aux
r√©seaux de collaboration scientiques et aux r√©seaux √† densit√© interne
importante. Pour chacun de ces contextes, les deux m√©thodes de compa-
raison ont permis de trouver des fonctions de qualit√© coh√©rentes avec les
v√©rit√©s de terrain de ces contextes.

Ces travaux conrment l'hypoth√®se de base : les v√©rit√©s de terrain
peuvent √™tre regroup√©es en di√©rents contextes. Identier ces contextes
permet de cat√©goriser les jeux de donn√©es et de mieux comprendre leur
utilisation. Cette identication ne peut se g√©n√©raliser que si les chercheurs
peuvent facilement analyser ces larges volumes de donn√©es. Dans le cadre
de cette th√®se, j'ai d√©velopp√© un logiciel facilitant cette d√©marche, le
 Community Detection Algorithm Comparator  (CoDACom), pr√©sent√©
au prochain chapitre.

J. Creusefond

85

Chapitre 6. L‚Äô√©valuation de structures communautaires

86

J. Creusefond

Chapitre 7

CoDACom : une bo√Æte √† outils
pour la d√©tection de
communaut√©s

CoDACom est un logiciel permettant d‚Äôappliquer une cha√Æne de
traitements li√©s √† la d√©tection de communaut√©s : algorithmes de
d√©tection de communaut√©s, fonctions de qualit√©, m√©thodes de com-
paraison. Cet outil permet d‚Äôanalyser s√©par√©ment chaque √©tape du
processus. Ce logiciel est facilement extensible et permet notam-
ment la comparaison d‚Äôune nouvelle m√©thode avec celles d√©j√† im-
pl√©ment√©es.

Dans ce chapitre, je pr√©sente le logiciel CoDACom ( Community Detec-
tion Algorithm Comparator ). Il regroupe une large collection d'outils pour
la d√©tection de communaut√©s. Il peut notamment √™tre utilis√© pour :

 appliquer di√©rents algorithmes de d√©tection de communaut√©s sur des

graphes,

 appliquer di√©rentes fonctions de qualit√© sur des partitions,
 appliquer di√©rentes m√©thodes de comparaison entre les v√©rit√©s de ter-

rain et des partitions,

 √©valuer la performance des algorithmes et des fonctions de qualit√©,
 identier des contextes.

CoDACom est facilement extensible, un utilisateur peut donc ajouter ses
propres algorithmes/fonctions/m√©thodes et les comparer √† celles d√©j√† im-
pl√©ment√©es. Ce logiciel a d'ailleurs √©volu√© depuis sa conception, et certains

J. Creusefond

87

Chapitre 7. CoDACom : une bo√Æte √† outils pour la d√©tection de
communaut√©s

Figure 7.1  L'interface web de CoDACom, en mode d√©monstration. Le
chargement de chiers sur le serveur est d√©sactiv√© dans ce mode.

traitements ont √©t√© impl√©ment√©s depuis la r√©alisation des exp√©riences du cha-
pitre pr√©c√©dent.

CoDACom a √©t√© √©crit en Bourne Shell, C++ (utilisant la biblioth√®que
igraph [28]) et Python. Ce logiciel utilise les autotools 1 pour la compilation
et la gestion des d√©pendances. Il est disponible, librement et gratuitement,
sur http://codacom.greyc.fr. Ce site web d√©crit aussi son installation et
son utilisation. CoDACom est utilisable via une interface web (Fig. 7.1) ou
en ligne de commande. Je vais d√©tailler les fonctionnalit√©s de CoDACom en
m'appuyant sur l'interface web.

7.1 Utilisation et fonctionnalit√©s

Dans cette section je pr√©sente l'utilisation de l'interface graphique de

CoDACom. Je d√©cris ensuite comment √©tendre le logiciel.

Je pr√©sente les commandes g√©n√©rales ainsi que la partie pr√©traitement de
CoDACom Fig. 7.2. Les deux premiers boutons de commande g√©n√©rales ( 1a

et 1b ) permettent respectivement de d√©s√©lectionner et s√©lectionner toutes
les options de l'interface, c'est-√†-dire :

1. https://www.gnu.org/software/automake/manual/html_node/Autotools-

Introduction.html

88

J. Creusefond

7.1. Utilisation et fonctionnalit√©s

Figure 7.2  Les commandes g√©n√©rales et la partie pr√©traitement de l'inter-
face web de CoDACom

 les graphes √† convertir 5 (Fig. 7.2),

 les algorithmes de d√©tection de communaut√©s √† ex√©cuter 10 (Fig. 7.10),

 les fonctions de qualit√© √† appliquer 12 (Fig. 7.11),

 les methodes de comparaison √† utiliser 15 (Fig. 7.11).

Le bouton 2 s√©lectionne uniquement les algorithmes de d√©tection de com-
munaut√©s lin√©aires, ce qui peut √™tre utile dans le cas d'un traitement sur des
grands graphes. La liste des algorithmes lin√©aires est cr√©√©e manuellement et
maintenue par le gestionnaire du serveur. Le bouton 3 permet d'obtenir le
chier de log de la derni√®re ex√©cution de CoDACom.

Un exemple de chier de log est pr√©sent√© Fig. 7.3. Pour des raisons de
pr√©sentation, la premi√®re colonne contenant le  timestamp  de chaque √©v√®-
nement a √©t√© supprim√©e.

La partie pr√©traitement pr√©sent√©e Fig. 7.2 r√©cup√®re et normalise les entr√©es
√† traiter. Cette partie peut √™tre d√©sactiv√©e comme pr√©sent√© Fig. 7.1 an de
ne pas surcharger le serveur. La zone 4 permet de charger sur le serveur les
chiers de graphe et les v√©rit√©s de terrain qui leur sont associ√©es. Les formats

J. Creusefond

89

1a23456781bChapitre 7. CoDACom : une bo√Æte √† outils pour la d√©tection de
communaut√©s

Figure 7.3  Le chier de log d'une ex√©cution de CoDACom. Les algorithmes
SCD, LexDFS, label propagation et Clauset sont appliqu√©s √† deux entr√©es,
football et karate.

accept√©s sont : graphml 2, gml 3, lgl 4 et ncol 5, et sont reconnus par l'extension
du chier. Un chier ayant une autre extension est lu comme un chier ncol.
Tous ces formats ont une structure de donn√©es en liste d'adjacences. Pour
chaque format, je fournis un exemple de deux noeuds reli√©s par une ar√™te
Fig. 7.4, 7.5, 7.6 et 7.7. Le format ncol √©tant tr√®s compact, je l'utilise comme
format interne √† CoDACom.

Les chiers de v√©rit√©s de terrain contiennent, pour chaque ligne, un noeud
suivi des identiants des communaut√©s auxquelles il appartient. Un exemple
de deux noeuds dont le premier appartient √† deux  clusters  et qui ont un
 cluster  en commun (illustr√© Fig. 7.8) est fourni Fig. 7.9. J'utilise aussi
ce format pour repr√©senter les partitions produites par les algorithmes de

2. http://graphml.graphdrawing.org/
3. http://www.fim.uni-passau.de/index.php?id=17297&L=1
4. http://lgl.sourceforge.net/
5. http://lgl.sourceforge.net/

90

J. Creusefond

7.1. Utilisation et fonctionnalit√©s

<?xml version=" 1 . 0 " encoding="UTF‚àí8"?>
<graphml xmlns=" h t t p : // graphml . graphdrawing . org /xmlns"
x m l n s : x s i=" h t t p : //www. w3 . org /2001/XMLSchema‚àíi n s t a n c e "
x s i : s c h e m a L o c a t i o n=" h t t p : // graphml . graphdrawing . org /xmlns

   h t t p : // graphml . graphdrawing . org /xmlns /1.0/ graphml . xsd ">

<graph i d="G" e d g e d e f a u l t=" u n d i r e c t e d ">

<node i d="0"/>
<node i d="1"/>
<edge s o u r c e="0" t a r g e t="1"/>

</graph>
</graphml>

Figure 7.4  Deux noeuds li√©s par une ar√™te dans le format Graphml

graph
[

node
[

i d 0

]
node
[

i d 1

]

[

]

edge

source 0
target 1

]

#0
1

Figure 7.5  Deux noeuds li√©s par une ar√™te dans le format GML

Figure 7.6  Deux noeuds li√©s par une ar√™te dans le format LGL

J. Creusefond

91

Chapitre 7. CoDACom : une bo√Æte √† outils pour la d√©tection de
communaut√©s

0 1

Figure 7.7  Deux noeuds li√©s par une ar√™te dans le format ncol

d√©tection de communaut√©s.

Figure 7.8  Deux noeuds, n0 et n1, appartiennent respectivement aux
 clusters  (c1, c2) et (c1)

0 1 2
1 1

Figure 7.9  Le chier de v√©rit√© de terrain illustr√© Fig. 7.8

Une fois charg√©s sur le serveur, les graphes apparaissent dans la zone 5 .
Ceux pour lesquels une v√©rit√© de terrain a √©t√© fournie sont ach√©s en bleu. Le
bouton de rafraichissement 6 met √† jour la liste dans le cas o√π des graphes
seraient ajout√©s/supprim√©s sans passer par l'interface. Un bouton ayant cette
fonction est situ√© sous chacune des listes similaires de l'interface.

Le pr√©traitement (bouton 7 ) supprime les boucles (ar√™tes incidentes
√† un seul noeud) et ne conserve que la composante connexe la plus grande.
L'identiant des noeuds est modi√© pour correspondre √† l'ordre de visite d'un
BFS √† partir d'un noeud choisi uniform√©ment al√©atoirement. Ainsi, les indices
des noeuds sont cons√©cutifs, ce qui est n√©cessaire pour certains traitements
de CoDACom. Le pr√©traitement est appliqu√© sur les chiers s√©lectionn√©s dans
la zone 5 . Un chier de correspondance faisant le lien entre les noeuds du
chier de base et le chier pr√©trait√© est disponible via le bouton 8 en plus
des chiers pr√©trait√©s eux-m√™mes.

92

J. Creusefond

n0n1c2c17.1. Utilisation et fonctionnalit√©s

Figure 7.10  La partie traitement de l'interface web de CoDACom

La partie traitement (Fig. 7.10) permet d'appliquer des algorithmes de d√©-
tection de communaut√©s aux graphes pr√©trait√©s. La zone 9 liste les graphes
disponibles. La zone 10 permet la s√©lection des algorithmes de d√©tection
de communaut√©s √† utiliser pour le traitement. CoDACom inclut les douze
algorithmes de d√©tection de communaut√©s pr√©sent√©s Sec. 2.4. Le bouton 11
ex√©cute le traitement, qui consiste √† appliquer les algorithmes s√©lectionn√©s
zone 10 sur les graphes s√©lectionn√©s zone 9 . L'application de chaque algo-
rithme sur chaque graphe peut √™tre faite en parall√®le, le nombre maximal de
processus est congur√© au niveau du serveur. Le bouton 12 permet d'obte-
nir les chiers de r√©sultat. Le format des r√©sultat est le m√™me que les v√©rit√©s
de terrain fournies en zone 4 .

Les parties analyse et conversion de CoDACom sont pr√©sent√©es Fig. 7.11.
La partie analyse √©value les partitions obtenues √† l'√©tape pr√©c√©dente en leur
appliquant des fonctions de qualit√© et par comparaison avec les v√©rit√©s de
terrain. La zone 13 ache les trois m√©thodes de comparaison disponibles :

NMI, F-BCubed et Omega-Index (voir Sec. 2.5). Les boutons 14 permettent
de comparer les partitions fournies par les algorithmes entre elles en utilisant
les m√©thodes s√©lectionn√©es en zone 13 et de t√©l√©charger les chiers de r√©sul-
tat (un par graphe). Un exemple de chier de r√©sultat est fourni Fig. 7.12.

J. Creusefond

93

9101112Chapitre 7. CoDACom : une bo√Æte √† outils pour la d√©tection de
communaut√©s

Figure 7.11  Les parties analyse et conversion de l'interface web de Co-
DACom

Figure 7.12  Un exemple de r√©sultat du module de comparaison sur le
r√©seau football. Chaque ligne et chaque colonne correspond √† un algorithme
de d√©tection de communaut√©s. Pour chaque paire d'algorithmes, la valeur de
la m√©thode de comparaison est fournie (ici, la F-BCubed).

La zone 15 permet de s√©lectionner les fonctions de qualit√© √† appliquer sur
les partitions. CoDACom inclut les fonctions de qualit√© pr√©sent√©es Sec. 2.3.
Les boutons 16 permettent :

1. d'appliquer les fonctions de qualit√© s√©lectionn√©es zone 15 aux parti-

tions produites par les algorithmes,

2. de comparer les partitions aux v√©rit√©s de terrain en utilisant les m√©-

thodes de comparaison s√©lectionn√©es en zone 13 ,

3. d'obtenir un chier par graphe contenant les r√©sultats des fonctions de
qualit√© et de la comparaison avec les v√©rit√©s de terrain (par exemple
Fig. 7.13),

94

J. Creusefond

131415161718197.1. Utilisation et fonctionnalit√©s

4. de comparer la coh√©rence entre fonctions de qualit√© et v√©rit√©s de terrain,
5. d'obtenir un chier de r√©sultat par m√©thode de comparaison pr√©sentant

cette coh√©rence (par exemple Fig. 7.14),

6. de mesurer la corr√©lation entre les r√©sultats des di√©rents graphes √†

l'√©tape pr√©c√©dente,

7. d'obtenir un chier de r√©sultat par m√©thode de comparaison pr√©sentant

cette corr√©lation (par exemple Fig. 7.15).

Figure 7.13  Un exemple de r√©sultat du module de qualit√© sur le r√©seau
football. Les lignes correspondent √† des algorithmes de d√©tection de commu-
naut√©s, et les colonnes correspondent √† des m√©thodes de comparaison ainsi
qu'√† des fonctions de qualit√©. Pour les fonctions de qualit√©, les valeurs sont
le r√©sultat de la fonction sur la partition g√©n√©r√©e par l'algorithme. Pour les
m√©thodes de comparaison, les valeurs sont le r√©sultat de la comparaison entre
cette partition et la v√©rit√© de terrain.

Figure 7.14  Un exemple de r√©sultat de coh√©rence entre fonctions de qua-
lit√© et v√©rit√©s de terrain utilisant la F-BCubed. Les lignes correspondent √†
des graphes et les colonnes sont les m√™mes que en Fig. 7.13. Les valeurs
correspondent √† la coh√©rence entre la v√©rit√© de terrain et les fonctions (voir
Chap. 6).

Je d√©cris maintenant la partie conversion. Les boutons 17 g√©n√®rent et
permettent de t√©l√©charger un chier de graphe au format graphml permettant
de visualiser les r√©sultats des algorithmes. Ce chier contient, en plus du
graphe, les communaut√©s en tant qu'√©tiquettes des noeuds. Les ar√™tes sont
aussi √©tiquet√©es selon qu'elles soient internes ou externes aux communaut√©s.
Un exemple de visualisation d'un chier de sortie de ce module est pr√©sent√©

J. Creusefond

95

Chapitre 7. CoDACom : une bo√Æte √† outils pour la d√©tection de
communaut√©s

Figure 7.15  Corr√©lation entre les coh√©rences pr√©sent√©es Fig. 7.14. Les
lignes et les colonnes correspondent √† des graphes. Les valeurs sont le coe-
cient de rang de Spearman appliqu√© aux lignes du chier de coh√©rence.

Figure 7.16  Visualisations avec le logiciel Gephi(https://gephi.org/)
d'un chier de r√©sultat. Il s'agit de l'algorithme de Louvain [9] (√† gauche) et
de MCL [94] (√† droite) appliqu√© √† un jeu de donn√©es extrait de Facebook [65].

Fig. 7.16. Le module tex 18 transforme les chiers de r√©sultat des analyses
en tableaux LATEXpour une int√©gration dans un document de ce type. Le
module quotient 19 cr√©e, pour chaque partition, le graphe quotient associ√©
au format graphml.

CoDACom peut facilement int√©grer de nouvelles impl√©mentations d'algo-
rithmes de d√©tection de communaut√©s. L'int√©gration d'une impl√©mentation
est r√©alis√©e gr√¢ce √† un script qui a un r√¥le d'interm√©diaire. Ce script a pour
r√¥le d'ex√©cuter le programme en normalisant les entr√©es/sorties. Ce script
doit √™tre fourni par l'utilisateur souhaitant int√©grer un nouvel algorithme. Si
ce script est plac√© dans le dossier ad√©quat, il est appel√© au cours de l'ex√©cution
de CoDACom.

96

J. Creusefond

7.2. Travaux connexes

L'int√©gration de nouvelles fonctions de qualit√© et m√©thodes de compa-
raison se fait en C++. Il s'agit d'√©tendre la classe abstraite ad√©quate et
de r√©f√©rencer la nouvelle classe dans une classe de  supervision . Pour
les m√©thodes de comparaison, la classe abstraite est AbstractCM, pr√©sen-
t√©e Fig. 7.17. Pour les fonctions de qualit√©, il existe trois classes abstraites
repr√©sentant les di√©rents niveaux de localit√© (voir Sec. 2.3). Ces classes sont
AbstractQF ( Quality Function ), AbstractSCQF ( Single Cluster Qua-
lity Function ) et AbstractSVQF ( Single Vertex Quality Function ). Ces
classes peuvent √™tre √©tendues de la m√™me mani√®re que AbstractCM.

class Ab s t r a c t C M {
public :

virtual ~ A b s t r a c t CM () = 0;
virtual double apply ( std :: vector < std :: list < long > >& memb1 ,
std :: vector < std :: list < long > >& memb2 )

std :: string g e t D e s c r i p t i o n ();
std :: string getName ();

= 0;

protected :

std :: string name ;
std :: string d e s c r i p t i o n ;

};

Figure 7.17  L'en-t√™te de AbstractCM. Une classe lle devra red√©nir le
destructur et la m√©thode abstraite apply.

7.2 Travaux connexes

Cette section pr√©sente di√©rents outils pour la d√©tection de communaut√©s.
Plusieurs biblioth√®ques de graphes impl√©mentent des solutions pour la

d√©tection de communaut√©s :

 igraph [28] impl√©mente sept algorithmes de d√©tection de communaut√©s,
une fonction de qualit√© et cinq m√©thodes de comparaison non chevau-
chantes

 SNAP 6 inclut six algorithmes de d√©tection de communaut√©s

L'inconv√©nient principal de ces biblioth√®ques est l'utilisation du langage de
programmation associ√© et la faible quantit√© de tests impl√©ment√©s. Tous les

6. http://snap.stanford.edu/snap/doc.html

J. Creusefond

97

Chapitre 7. CoDACom : une bo√Æte √† outils pour la d√©tection de
communaut√©s

algorithmes impl√©ment√©s dans ces biblioth√®ques produisant des  clusters 
non chevauchants sont int√©gr√©s dans CoDACom.

Un logiciel similaire √† CoDACom est Circulo 7, qui fournit quinze algo-
rithmes de d√©tection de communaut√©s, une trentaine de fonctions de qualit√©
et impl√©mente l'Omega-Index [102] comme m√©thode de comparaison. Il n'in-
clut pas d'interface graphique.

Je note tout d'abord que les fonctions de qualit√© de Circulo elles pro-
viennent toutes de l'article [103] de Yang et Leskovec. Parmi ces fonctions de
qualit√©, la moiti√© de ces fonctions sont des mesures statistiques telles que la
moyenne et le maximum du degr√© des noeuds et du coecient de clustering
local. Circulo n'inclut que des fonctions de qualit√© au niveau communaut√©.
Les algorithmes de Circulo sont impl√©ment√©s et appel√©s en python, ce qui
est une forte restriction sur le langage de programmation de tout chercheur
souhaitant ajouter son impl√©mentation au syst√®me. Par cons√©quent, des al-
gorithmes connus avec des impl√©mentations tr√®s ecaces ne sont pas inclus,
comme l'impl√©mentation de l'algorithme de Louvain 8. Enn, le GraphML a
√©t√© choisi comme format de graphe interne alors qu'il est tr√®s redondant, ce
qui entra√Æne des chiers volumineux pour des graphes de grande taille.

J'en conclue que Circulo et CoDACom r√©pondent √† deux besoins di√©-
rents. Circulo est utile pour obtenir un ensemble de statistiques sur divers
algorithmes de d√©tection de communaut√©s, sur des graphes de taille restreinte
(les exemples donn√©s vont jusqu'au million d'ar√™tes). Il n'eectue aucun des
traitements permettant d'√©tablir la coh√©rence des fonctions de qualit√© avec
les v√©rit√©s de terrain. Il ne permet donc pas d'identier des contextes. Co-
DACom permet de plus d'√©valuer facilement un nouvel algorithme avec des
fonctions de qualit√© provenant de travaux divers. Certaines des impl√©men-
tations inclues peuvent √™tre ex√©cut√©es sur des graphes de tr√®s grande taille,
comme SCD [79] qui peut traiter un r√©seau incluant plus d'un milliard et
demi d'ar√™tes sur un ordinateur de bureau.

Dans ce chapitre, j'ai pr√©sent√© un logiciel nomm√© CoDACom. Celui-ci
permet d'appliquer une cha√Æne de traitements li√©s √† la d√©tection de com-
munaut√©s, de la normalisation des entr√©es √† l'analyse des r√©sultats. Il
inclut douze algorithmes de d√©tection de communaut√©s, douze fonctions
de qualit√© et trois m√©thodes de comparaison. L'interface web permet de
g√©rer facilement des calculs distants. CoDACom est disponible, librement
et gratuitement, sur http://codacom.greyc.fr.

7. http://lab41.org/circulo-a-community-detection-evaluation-framework/
8. https://sourceforge.net/projects/louvain/

98

J. Creusefond

Chapitre 8

Conclusion

Nous avons vu que pour d√©tecter les communaut√©s dans un r√©seau social,

il faut :

 identier les propri√©t√©s structurelles que l'on estime importantes pour

l'application ;

 construire un cadre d'√©valuation, ce qui peut se faire de l'une ou des

deux mani√®res suivantes :

 choisir une ou plusieurs fonctions de qualit√© √©valuant ces propri√©t√©s

structurelles ;

 choisir les v√©rit√©s de terrain qui d√©nissent les communaut√©s r√©elles ;
 s√©lectionner l'algorithme de d√©tection correspondant le mieux aux be-

soins.

Dans cette th√®se, j'ai propos√© une m√©thodologie compl√®te qui adresse
chacun des points √©voqu√©s ci-dessus. Ma contribution √† l'identication des
propri√©t√©s structurelles est la d√©nition des a-motifs. Un a-motif permet de
caract√©riser di√©remment les communications internes √† une communaut√©
des communications externes. J'ai identi√© que les a-motifs de type va-et-
vient, spam et triangle sont caract√©ristiques de l'int√©rieur des communaut√©s,
tandis que le a-motif de cha√Æne est caract√©ristique de l'ext√©rieur des commu-
naut√©s (voir Chap 3). En ce qui concerne le cadre d'√©valuation, j'ai d√©ni
une nouvelle fonction de qualit√© : la compacit√©. La compacit√© permet d'iden-
tier des groupes d'individus entre lesquels la diusion d'une information est
rapide (voir Chap. 4). La dicult√© lors de l'√©valuation par les fonctions de
qualit√© est de d√©terminer si elles favorisent des communaut√©s r√©elles. Dans
ce but, √©tablir la coh√©rence entre fonctions de qualit√© et v√©rit√©s de terrain
est crucial. J'ai propos√© une m√©thodologie permettant de quantier l'ad√©qua-
tion entre fonctions de qualit√© et v√©rit√©s de terrain (voir Chap 6). Le logiciel

J. Creusefond

99

Chapitre 8. Conclusion

CoDACom, que j'ai √©crit, assiste les praticiens dans l'application de cette m√©-
thodologie (voir Chap 7). Ce logiciel est disponible sous la licence Cecill-B √†
l'adresse suivante : http://codacom.greyc.fr. Enn, j'ai con√ßu un nouvel
algorithme de d√©tection de communaut√©s : le Lex-Clustering. Cet algorithme
utilise l'algorithme de parcours de graphe LexDFS pour d√©tecter des commu-
naut√©s. Le principe du LexDFS est de parcourir le graphe en favorisant les
voisins des noeuds d√©j√† visit√©s. Le Lex-Clustering trouve des communaut√©s
qui favorisent la compacit√© (voir Chap. 5.

Je vais maintenant d√©tailler chacune de ces contributions.

8.1 A-motifs

Le chapitre 3 pr√©sente de nouveaux crit√®res pour la d√©tection de com-
munaut√©s dans les r√©seaux temporels. Il y est montr√© que la fa√ßon dont les
communications s'enchainent (d√©crite par les a-motifs) a un lien avec la struc-
ture communautaire. En eet, certains a-motifs apparaissent plus √† l'int√©rieur
qu'√† l'ext√©rieur des communaut√©s.

J'ai montr√©, par l'utilisation de mod√®les nuls, que la causalit√© a une in-
uence sur les a-motifs et leur densit√© interne/externe aux communaut√©s. Or,
l'agr√©gation des r√©seaux sur des fen√™tres temporelles est fr√©quemment utili-
s√©e pour d√©tecter les communaut√©s sur les r√©seaux de communication. Cette
op√©ration d√©truit la causalit√© des communications sur ces fen√™tres. L'agr√©ga-
tion du r√©seau met de c√¥t√© une information qui pourrait aider √† la d√©tection
de communaut√©s. La prochaine √©tape de ce travail est de savoir si la causa-
lit√© des communications est une information indispensable √† la d√©tection de
communaut√©s sur les r√©seaux de communication.

8.2 Lex-Clustering et compacit√©

Le chapitre 4 pr√©sente la d√©nition d'une nouvelle fonction de qualit√© :
la compacit√©. Celle-ci se fonde sur un mod√®le de diusion simple de l'infor-
mation dans un groupe, l' Independant Cascade Model  [40, 53] avec une
probabilit√© de transmission de 1. La compacit√© mesure la vitesse de propaga-
tion de cette diusion. Dans le chapitre 4, je compare la compacit√© √† d'autres
fonctions de qualit√©. J'y montre que la compacit√© p√©nalise les structures o√π
des individus sont peu connect√©s au reste du groupe. Je montre aussi que la
compacit√© satisfait les axiomes de Van Laarhoven et Marchiori [95].

L'inconv√©nient de cette fonction de qualit√© est son temps de calcul. Il est
donc d√©raisonnable de cr√©er un algorithme de d√©tection de communaut√©s bas√©

100

J. Creusefond

sur le calcul explicite de la compacit√©. En pratique, j'utilise une approxima-
tion du diam√®tre pour pouvoir calculer la compacit√©. J'ai con√ßu la compacit√©
en tant que fonction de qualit√© car, selon moi, la vitesse de la diusion d'in-
formation dans une communaut√© est sa caract√©ristique principale.

Le chapitre 5 pr√©sente un nouvel algorithme hi√©rarchique de d√©tection
de communaut√©s bas√© sur l'algorithme du LexDFS : le Lex-Clustering. Il se
base sur un algorithme de parcours de graphe visitant en priorit√© les noeuds
voisins des noeuds visit√©s r√©cemment. C'est par l'ex√©cution r√©p√©t√©e de ce
parcours que les ar√™tes intra-communautaires sont d√©tect√©es. J'utilise ensuite
un algorithme hi√©rarchique pour d√©tecter les communaut√©s √† partir de ces
ar√™tes. Le Lex-Clustering produit des  clusters  denses, comme montr√©
par la comparaison avec des v√©rit√©s de terrain.Cet algorithme produit des
 clusters  favoris√©s par la compacit√©.

8.3 Fonctions de qualit√© et v√©rit√©s de terrain

Le chapitre 6 pr√©sente une m√©thodologie pour √©tablir la coh√©rence entre

les fonctions de qualit√© et les v√©rit√©s de terrain.

J'observe que certaines fonctions de qualit√© √©valuent les partitions de
mani√®re coh√©rente avec certaines v√©rit√©s de terrain. De plus, il existe des
ensembles de v√©rit√©s de terrain qui pr√©sentent des r√©sultats semblables quand
on compare entre elles leur coh√©rence avec les fonctions de qualit√©. J'appelle
ces ensembles de v√©rit√©s de terrain des contextes. Une fonction de qualit√©
peut √™tre coh√©rente avec les v√©rit√©s de terrain d'un contexte, mais incoh√©rente
avec ceux d'un autre. Identier le contexte d'un r√©seau sans v√©rit√© de terrain
permet de conna√Ætre la fonction de qualit√© √† utiliser pour √©valuer les di√©rents
algorithmes de d√©tection de communaut√©s.

Notons que, m√™me si l'ensemble des donn√©es utilis√©es par ces exp√©riences
est de taille importante, il est impossible de savoir si d'autres contextes
existent dans d'autres v√©rit√©s de terrain sans les avoir analys√©s. Il serait
donc int√©ressant d'enrichir ces r√©sultats par l'analyse de v√©rit√©s de terrain
suppl√©mentaires.

Il s'agit de l'un des objectifs du logiciel CoDACom, pr√©sent√© au chapitre 7.
Ce logiciel est aussi adapt√© √† divers besoins en d√©tection de communaut√©s
gr√¢ce √† la biblioth√®que d'outils qu'il contient. Il inclut notamment une suite
de tests permettant l'analyse d'algorithmes de d√©tection de communaut√©s,
de fonctions de qualit√© et de v√©rit√©s de terrain. Il est de plus facilement
extensible gr√¢ce √† sa conception modulaire. Il contient aussi une interface
web permettant de le manipuler. CoDACom est disponible √† l'adresse http:
//codacom.greyc.fr/.

J. Creusefond

101

102

J. Creusefond

Annexe A

D√©marches et description du
r√©seau d‚Äôe-mails de l‚Äôuniversit√© de
Caen

La premi√®re d√©marche fut une √©tude de faisabilit√©, √©paul√©e par la Direc-
tion des Syst√®mes d'Information (DSI). Il s'est av√©r√© que les m√©tadonn√©es des
e-mails √©mis et re√ßus par des adresses g√©r√©es par l'universit√© √©taient facile-
ment r√©cup√©rables par le biais de logs. De plus, un service d'adresses LDAP
( Lightweight Directory Access Protocol ) contient des m√©tadonn√©es sur les
individus utilisant les adresses en question.

La question l√©gale s'est alors pos√©e, la protection des donn√©es priv√©es
informatiques √©tant g√©r√©e par la Commission Nationale de l'Informatique et
des Libert√©s (CNIL). J'ai donc identi√© les m√©tadonn√©es int√©ressantes pour
l'√©tude, et ai contact√© l'interlocuteur privil√©gi√© pour les questions relatives √†
la CNIL, le Correspondant Informatique et Libert√©es (CIL).

Le principe de base est de rendre la lev√©e de l'anonymat extr√™mement
dicile par un individu isol√©. Il a donc fallu revoir certaines m√©ta-donn√©es
pour qu'elles ne permettent pas une identication trop ais√©e des individus im-
pliqu√©s. Par exemple, certains laboratoires sont de petite taille (inf√©rieure √†
cinq). La liste des membres de ce laboratoire est, le plus souvent, disponible
facilement en ligne. Si l'√¢ge ou le sexe est une m√©ta-donn√©e fournie, il de-
vient ais√© d'obtenir les m√©ta-donn√©es des communications d'un membre du
laboratoire en particulier. C'est pourquoi nous avons, par exemple, d√©cid√©
d'exclure l'√¢ge des m√©ta-donn√©es extraites pour le personnel, et ne fournir
que des tranches d'√¢ges de deux ans pour les √©tudiants, avec deux tranches
extr√™males (moins de 18 ans et plus de 30 ans).

Ensuite, un membre de la DSI a eectu√© les traitements d'extraction,
de normalisation et d'anonymisation des donn√©es. Ceux-ci ont √©t√©s eectu√©s

J. Creusefond

103

sur des serveurs s√©curis√©s et les clefs de correspondance entre les donn√©es non
anonymis√©es et anonymis√©es ont √©t√©s d√©truites apr√®s traitement. La proc√©dure
enti√®re a √©t√© pr√©sent√©e au CIL, qui a valid√© le traitement d'anonymisation et
la mise √† disposition du jeu de donn√©es √† la communaut√© scientique.

An d'avoir au mieux possible une bijection entre les utilisateurs et les
adresses, les traitements eectu√©s √† partir du r√©seau brut sont les suivants :
 suppression des adresses invalides (fautes de frappe dans le destinataire,

. . .)

 r√©union des alias internes
Les donn√©es s'√©talent sur une p√©riode de trois mois durant l'ann√©e scolaire
2015-2016. Les m√©tadonn√©es collect√©es sur les e-mails sont les champs FROM,
TO et DATE, c'est-√†-dire les informations n√©cessaires pour le ux de liens.
Pour les utilisateurs actifs durant cette p√©riode, les m√©tadonn√©es suivantes
sont rassembl√©es :

 type : si l'utilisateur est une personne ou une liste de diusion
 cat√©gorie : la cat√©gorie socioprofessionnelle (employ√© ou √©tudiant)
 sexe
 √¢ge : seulement pour les √©tudiants, par tranche de deux ans entre 18 et

30 ans

 l'entit√© administrative de rattachement, comme l'Unit√© de Formation et
de Recherche (UFR) ou un Institut Universitaire Technologique (IUT)

 laboratoire
 section du Conseil National des Universit√©s (CNU) : la discipline que

pratique l'individu (informatique, biologie, etc.)

104

J. Creusefond

Bibliographie

[1] Rodrigo Aldecoa and Ignacio Mar√≠n. Surprise maximization reveals
the community structure of complex networks. Scientific Reports, 3,
January 2013.

[2] H√©lio Almeida, Dorgival Guedes, Wagner Meira Jr, and Mohammed J.
Zaki. Is there a best quality metric for graph clusters ? In Machine
Learning and Knowledge Discovery in Databases, pages 4459. Sprin-
ger, 2011.

[3] Enrique Amig√≥, Julio Gonzalo, Javier Artiles, and Felisa Verdejo. A
comparison of extrinsic clustering evaluation metrics based on formal
constraints. Information retrieval, 12(4) :461486, 2009.

[4] Alex Arenas, Albert D√≠az-Guilera, and Conrad J. P√©rez-Vicente. Syn-
chronization reveals topological scales in complex networks. Physical
review letters, 96(11) :114102, 2006.

[5] Amit Bagga and Breck Baldwin. Entity-based cross-document corefe-
rencing using the vector space model. In Proceedings of the 17th In-
ternational Conference on Computational Linguistics-Volume 1, pages
7985. Association for Computational Linguistics, 1998.

[6] Eytan Bakshy, Jake M. Hofman, Winter A. Mason, and Duncan J.
Watts. Everyone's an inuencer : quantifying inuence on twitter. In
Proceedings of the fourth ACM international conference on Web search
and data mining, pages 6574. ACM, 2011.

[7] Eytan Bakshy, Itamar Rosenn, Cameron Marlow, and Lada Adamic.
The role of social networks in information diusion. In Proceedings of
the 21st international conference on World Wide Web, pages 519528.
ACM, 2012.

[8] Albert-L√°szl√≥ Barab√°si and R√©ka Albert. Emergence of scaling in ran-

dom networks. Science, 286(5439) :509512, 1999.

[9] Vincent D. Blondel, Jean-Loup Guillaume, Renaud Lambiotte, and
Fast unfolding of communities in large net-

Etienne Lefebvre.

J. Creusefond

105

works. Journal of Statistical Mechanics : Theory and Experiment,
2008(10) :P10008, 2008.

[10] Ulrik Brandes, Daniel Delling, Marco Gaertler, Robert G√∂rke, Martin
Hoefer, Zoran Nikoloski, and Dorothea Wagner. On modularity ‚Äì NP-
Completeness and beyond. Citeseer, 2006.

[11] Juli√°n Candia, Marta C. Gonz√°lez, Pu Wang, Timothy Schoenharl,
Greg Madey, and Albert-L√°szl√≥ Barab√°si. Uncovering individual and
collective human dynamics from mobile phone records. Journal of Phy-
sics A : Mathematical and Theoretical, 41(22) :224015, 2008.

[12] Qiang Cao, Michael Sirivianos, Xiaowei Yang, and Tiago Pregueiro. Ai-
ding the detection of fake accounts in large scale social online services.
In Presented as part of the 9th USENIX Symposium on Networked Sys-
tems Design and Implementation (NSDI 12), pages 197210, 2012.

[13] Ciro Cattuto, Wouter Van den Broeck, Alain Barrat, Vittoria Colizza,
Jean-Fran√ßois Pinton, and Alessandro Vespignani. Dynamics of Person-
to-Person Interactions from Distributed RFID Sensor Networks. PLoS
ONE, 5(7) :e11596, July 2010.

[14] Remy Cazabet, Frederic Amblard, and Chihab Hanachi. Detection
In Social
of overlapping communities in dynamical social networks.
Computing (SocialCom), 2010 IEEE Second International Conference
on, pages 309314. IEEE, 2010.

[15] D. Centola. The Spread of Behavior in an Online Social Network Ex-

periment. Science, 329(5996) :11941197, September 2010.

[16] Tamal Chakraborty, Sujit Sikdar, Vihar Tammana, Niloy Ganguly, and
Arjun Mukherjee. Computer science elds as ground-truth communi-
ties : Their impact, rise and fall. In Proceedings of Advances in So-
cial Networks Analysis and Mining (ASONAM), 2013, pages 426433.
IEEE, 2013.

[17] Tanmoy Chakraborty, Sandipan Sikdar, Niloy Ganguly, and Animesh
Mukherjee. Citation interactions among computer science elds : a
quantitative route to the rise and fall of scientic research. Social
Network Analysis and Mining, 4(1) :118, 2014.

[18] Tanmoy Chakraborty, Sriram Srinivasan, Niloy Ganguly, Animesh Mu-
kherjee, and Sanjukta Bhowmick. On the permanence of vertices in
network communities. In Proceedings of the 20th ACM SIGKDD Inter-
national Conference on Knowledge Discovery and Data Mining, KDD
2014, pages 13961405, New York, NY, USA, 2014. ACM.

106

J. Creusefond

[19] Mingming Chen, Tommy Nguyen, and Boleslaw K. Szymanski. A new
metric for quality of network community structure. arXiv preprint
arXiv :1507.04308, 2015.

[20] Aaron Clauset, M. Newman, and Cristopher Moore. Finding com-
munity structure in very large networks. Physical Review E, 70(6),
December 2004.

[21] Linda M. Collins and Clyde W. Dent. Omega : A General Formulation
of the Rand Index of Cluster Recovery Suitable for Non-disjoint Solu-
tions. Multivariate Behavioral Research, 23(2) :231242, April 1988.

[22] Derek G. Corneil, Barnaby Dalton, and Michel Habib. LDFS-Based
Certifying Algorithm for the Minimum Path Cover Problem on Co-
comparability Graphs. SIAM Journal on Computing, 42(3) :792807,
January 2013.

[23] Derek G. Corneil and Richard M. Krueger. A unied view of graph
searching. SIAM Journal on Discrete Mathematics, 22(4) :12591276,
January 2008.

[24] Robin Cowan and Nicolas Jonard. Network structure and the dif-
fusion of knowledge. Journal of Economic Dynamics and Control,
28(8) :15571575, June 2004.

[25] Jean Creusefond, Thomas Largillier, and Sylvain Peyronnet. Finding
compact communities in large graphs. In Proceedings of Advances in
Social Networks Analysis and Mining (ASONAM), 2015, pages 1457
1464. ACM, 2015.

[26] Jean Creusefond, Thomas Largillier, and Sylvain Peyronnet. A lexdfs-
based approach on nding compact communities. In From Social Data
Mining and Analysis to Prediction and Community Detection. Springer,
2016.

[27] Jean Creusefond, Thomas Largillier, and Sylvain Peyronnet. On the

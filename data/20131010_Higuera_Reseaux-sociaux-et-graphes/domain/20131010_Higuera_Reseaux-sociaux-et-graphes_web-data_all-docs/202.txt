https://docplayer.fr/83750297-Graphe-et-langage-mathieu-sablik.html





GRAPHE ET LANGAGE. Mathieu SABLIK - PDF

















            google_ad_client: "ca-pub-6133583279631137",
            enable_page_level_ads: true
        });
    












 Entrer
Enregistrement







Chercher

















GRAPHE ET LANGAGE. Mathieu SABLIK


                                                || document.documentElement.clientWidth
                                                || document.body.clientWidth;
                                            document.write('<sc'+'ript async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></sc'+'ript> \
                       <ins class="adsbygoogle" \
                             style="display:block" \
                             data-ad-client="ca-pub-6133583279631137" \
                             data-ad-slot="5061836408" \
                             data-ad-format="auto"></ins> \
                        <sc'+'ript> \
                        </'+'scr'+'ipt>');
                                        











                                                            if (width < 612) {
                                                                document.getElementById('left_banner_td').style.display= "none";
                                                            } else {
                                                                document.write('<scr'+'ipt async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></scri'+'pt>\
                            <ins class="adsbygoogle"\
                                 style="display:inline-block;width:160px;height:600px"\
                                 data-ad-client="ca-pub-6133583279631137"\
                                 data-ad-slot="6538569603"></ins>\
                            <sc'+'ript>\
                            </'+'scr'+'ipt>');
                                                            }
                                                        





                                                            var k_dim = 70;
                                                            var doc_pages_count = 66;
                                                        
 


                                                            if (Math.random() > 0.5) {
                                                                document.write(
                                                                    '<sc' + 'ript async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></s' + 'cript>' +
                                                                    '<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-6133583279631137" data-ad-slot="9492036005" data-ad-format="auto"></ins>'
                                                                );
                                                            } else {
                                                                document.write('<div id="angrmnt_b0"></div>');
                                                            }          
                                                        











                                                        SHARE 




                                                        HTML 




                                                        DOWNLOAD 





Save this PDF as:
 WORD
 PNG
 TXT
 JPG

































                                                            Dimension: px
                                                        

                                                            Commencer à balayer dès la page:
                                                        










Download "GRAPHE ET LANGAGE. Mathieu SABLIK"




                                                                Erreur: 




 Download Document









  Lucienne Lapierre
 il y a 2 mois                                                                                            
 Total affichages :  











Transcription




                                                

1 GRAPHE ET LANGAGE Mathieu SABLIK2 3 Table des matières I Différentes notions de graphes 5 I.1 Différents problèmes à modéliser I.2 Différentes notions de graphes I.2.1 Graphe orienté ou non I.2.2 Isomorphisme de graphe I.2.3 Degré I.2.4 Construction de graphes à partir d un autre I.3 Différents modes de représentation d un graphe I.3.1 Représentation sagittale I.3.2 Définition par propriété caractéristique I.3.3 Listes d adjacence I.3.4 Matrices d adjacence I.3.5 Matrice d incidence I.3.6 Comparaison des différentes méthodes I.4 Quelques classes de graphe importantes I.4.1 Graphes isolés I.4.2 Graphes cycliques I.4.3 Graphes complets I.4.4 Graphe biparti I.4.5 Graphes planaires I.4.6 Arbres II Problèmes de chemins dans un graphe 15 II.1 Notion de chemin II.1.1 Définitions II.1.2 Longueur d un chemin II.1.3 Longueur d un chemin et matrice d adjacence II.2 Connexité II.3 Chemin Eulérien et Hamiltoniens II.3.1 Chemin Eulérien II.3.2 Chemins hamiltonien II.4 Deux mots sur le Page-rank4 TABLE DES MATIÈRES 2 III Graphes acycliques ou sans-circuits 21 III.1 Notion d arbres III.1.1 Nombre d arêtes d un graphe acyclique III.1.2 Arbres et forêts III.1.3 Arbres orientés III.1.4 Notion de rang dans un graphe orienté sans circuit III.2 Initiation à la théorie des jeux III.2.1 Jeux combinatoires III.2.2 Modélisation III.2.3 Noyau d un graphe III.2.4 Exemples de jeux III.3 Parcours dans un graphe III.3.1 Notion générale III.3.2 Parcours en largeur III.3.3 Parcours en profondeur IV Problèmes de coloriages 33 IV.1 Coloriage de sommets IV.1.1 Position du problème IV.1.2 Exemples d applications IV.1.3 Nombre chromatique de graphes classiques IV.1.4 Comment calculer un nombre chromatique? IV.2 Résolution algorithmique IV.2.1 Algorithme glouton IV.2.2 Algorithme de Welsh-Powell IV.2.3 Existe t il un algorithme pour trouver le nombre chromatique d un graphe? IV.3 Cas des graphes planaires V Problèmes d optimisation pour des graphes valués 39 V.1 Recherche d arbre couvrant de poids maximal/minimal V.1.1 Problème V.1.2 Algorithme de Prim V.1.3 Algorithme de Kruskal V.2 Problème de plus court chemin V.2.1 Position du problème V.2.2 Principe des algorithmes étudiés V.2.3 Algorithme de Bellman-Ford-Kalaba V.2.4 Algorithme de Bellman V.2.5 Algorithme de Dijkstra-Moore V.2.6 Remarques V.2.7 Ordonnancement et gestion de projet V.3 Flots dans les transports V.3.1 Position du problème V.3.2 Lemme de la coupe V.3.3 Algorithme de Ford-Fulkerson5 3 Table des Matières VI Notion de théorie des langages 53 VI.1 Notion de langage VI.1.1 Exemples de problèmes VI.1.2 Mots sur un alphabet fini VI.1.3 Langage VI.2 Langage rationnel VI.3 Automates fini VI.3.1 Définitions VI.3.2 Stabilité aux opérations usuelles VI.3.3 Théorème de Kleene VI.4 Comment montrer qu un langage n est pas rationnel? VI.5 Déterminisation, minimisation, epsilon transition VI.5.1 D autres modèles de calcul pour défini les langages rationels VI.5.2 Déterminisation VI.5.3 Automate minimal VI.6 Applications VI.7 D autres types de langages VI.7.1 Langage décidable/indécidable VI.7.2 Grammaires VIINotes 656 TABLE DES MATIÈRES 47 ChapitreI Différentes notions de graphes I.1 Différents problèmes à modéliser On peut considérer que l article fondateur de la théorie des graphe fut publié par le mathématicien suisse Leonhard Euler en Il traitait du problème des sept ponts de Königsberg : est il possible de réaliser une promenade dans la ville de Königsberg partant d un point donné et revenant à ce point en passant une et une seule fois par chacun des sept ponts de la ville? Cette théorie va connaitre un essor au cours du XIX ème par l intermédiaire du problème suivant : quel est le nombre minimal de couleurs nécessaires pour colorier une carte géographique de telle sorte que deux régions limitrophe n ont pas la même couleur? Le théorème des quatre couleurs affirme que seulement quatre sont nécessaires. Le résultat fut conjecturé en 1852 par Francis Guthrie, intéressé par la coloration de la carte des régions d Angleterre, mais ne fût démontré qu en 1976 par deux Américains Kenneth Appel et Wolfgang Haken. Ce fut la première fois que l utilisation d un ordinateur a permis de conclure leur démonstration en étudiant les 1478 cas particulier auxquels ils ont ramené le problème. Au XX ème siècle, la théorie des graphes va connaître un essor croissant avec le développement des réseaux dont il faut optimiser l utilisation. On peut citer quelques exemples de manière non exhaustive : réseaux de transports routier, d eau, d électricité : les sommets représentent les carrefours et les arêtes les rues ; réseaux informatiques : les sommets représentent les ordinateurs et les arêtes les connexions physiques ; réseaux sociaux : les sommets représentent les membres du groupe, deux personnes sont reliées par une arête si elles se connaissent (Facebook : graphe non orienté, twiter : graphe orienté, combien de poignées de main on est du président?... ) ; graphe du web : les sommets représentent les pages web et chaque arc correspond a un hyperliens d une page vers une autre ; réseau de transports de données (téléphonie, wifi, réseaux informatique... ) ; représentation d un algorithme, du déroulement d un jeu ; réseaux de régulation génétique ;8 Chapitre I. DIFFÉRENTES NOTIONS DE GRAPHES 6 organisation logistique : les sommets représentent des évènements, deux évènements sont reliées par une arête s ils ne peuvent pas avoir lieu en même temps ; ordonnancement de projet : les sommets représentent les différentes tâches composant un projet, deux tâches sont reliés par une flèche si la deuxième ne peut pas commencer avant que la première soit terminée ; et beaucoup d autres encore... L étude des graphes se réalise sous deux point de vues complémentaire. L étude de propriétés structurelles de graphes ou de familles de graphes et l étude algorithmique de certaines propriétés. I.2 Différentes notions de graphes I.2.1 Graphe orienté ou non Dans les exemples que l on a vus, un graphe est un ensemble fini de sommets reliés par des arêtes. Ces arêtes peuvent être orientées ou non, de plus une valeur peut être associée à chaque arête ou aux sommets. Définition I.1. Un graphe orienté G = (S, A) est la donnée : d un ensemble S dont les éléments sont des sommets ; d un ensemble A S S dont les éléments sont les arcs. Un arc a = (s, s ) est aussi noté s s, s est l origine de a et s l extrémité. On dit aussi que s est le successeur de s et s le prédécesseur de s. On peut souhaiter qu il y ait plusieurs arcs entre deux mêmes sommets. On parle alors de graphe orienté multi-arcs. Formellement, G = (S, A, i, f) c est la donnée : d un ensemble S dont les éléments sont des sommets ; d un ensemble A dont les éléments sont les arcs ; de deux fonctions i : A S et f : A S qui à chaque arcs a A associe son prédécesseur i(a) et son successeur f(a). Exemple I.1. Exemple de graphe orienté : 1 2 G = (S, A) où S = {1, 2, 3, 4}, A = {(1, 2), (2, 1), (2, 4), (3, 4), (3, 3)}. 4 3 Exemple de graphe orienté multi-arcs : 1 a b 2 c d f 4 e 3 g G = (S, A, i, f) où S = {1, 2, 3, 4}, A = {a, b, c, d, e, f, g, h}, i : a 1 b 2 c 2 d 2 e 3 f 3 g 3 et f : a 2 b 1 c 4 d 4 e 4 f 3 g 3. Définition I.2. Un graphe non orienté G = (S, A) est la donnée :9 7 I.2. Différentes notions de graphes d un ensemble S dont les éléments sont les sommets du graphe, d un ensemble A dont les éléments, les arêtes du graphe, sont des parties à un ou deux éléments de S. Le ou les sommets d une arête sont appelés extrémités de l arête. Les arêtes n ayant qu une seule extrémité sont des boucles. On peut de la même façon un graphe non-orienté multi-arêtes. Formellement, G = (S, A, α) est la donnée : d un ensemble S dont les éléments sont des sommets ; d un ensemble A dont les éléments sont les arêtes ; d une fonction α de A dans les parties à un ou deux éléments de S. Exemple I.2. Exemple de graphe non-orienté : 1 2 G = (S, A) où S = {1, 2, 3, 4}, A = {{1, 2}, {2, 4}, {3, 4}, {3}}. 4 3 Exemple de graphe orienté multi-arêtes : 1 a b 2 c d f 4 e 3 g G = (S, A, α) où S = {1, 2, 3, 4}, A = {a, b, c, d, e, f, g, h}, α : a {1, 2} b {1, 2} c {2, 4} d {2, 4} e {3, 4} f {3} g {3}. Si un arc ou une arête à ses deux extrémités constituées du même sommet, on dit que c est une boucle. Un graphe est simple s il est non-orienté, s il a au plus une arête entre deux sommets et s il n a pas de boucle. L ordre d un graphe est le nombre de sommets S et la taille d un graphe est le nombre d arêtes ou d arcs. On appèle valuation sur les sommets (resp. sur les arcs ou arêtes) toutes fonctions prenant en argument les sommets (resp. sur les arcs ou arêtes) et renvoyant un réels ou élément dans un ensemble donné. Soit G = (S, A) un graphe orienté, on associe le graphe non orienté G = (S, A ) ayant le même ensemble de sommets S et dont l ensemble d arêtes A vérifie {x, y} A (x, y) A ou (y, x) A. Exemple I.3. Les trois graphes suivants sont associés au graphe non orienté suivant10 Chapitre I. DIFFÉRENTES NOTIONS DE GRAPHES 8 I.2.2 Isomorphisme de graphe Deux graphes orientés G = (S, A) et G = (S, A ) sont isomorphes s il existe une application bijective ϕ : S S telle que pour tout s, s S on (s, s ) A (ϕ(s), ϕ(s )) A. L application ϕ est alors un isomorphisme de graphes orientés. Exemple I.4. Les deux graphes suivants sont isomorphes par l isomorphisme ϕ : 1 A, 2 B, 3 C, 4 D, 5 E. 3 2 B D 1 A 4 5 E C De même, deux graphes non-orientés G = (S, A) et G = (S, A ) sont isomorphes s il existe une application bijective ϕ : S S telle que pour tout s, s S on {s, s } A {ϕ(s), ϕ(s )} A. L application ϕ est alors un isomorphisme de graphes non-orientés. I.2.3 Degré Pour un graphe orienté, on appèle degré entrant d un sommet s, noté d (s) (resp. degré sortant d un sommet s, noté d + (s)) le nombre d arcs dont le sommet est prédécesseur (resp. successeur). Pour un graphe non-orienté, on appelle degré d un sommet s, noté d(s) le nombre d arêtes dont le sommet est une extrémité. Théorème I.1 Lemme de la poignée de main Soit G = (S, A) un graphe orienté. On alors les égalités suivantes : s S d + (s) = s S d (s) = A. Soit G = (S, A) un graphe non-orienté. On a alors l égalité suivante : d(s) = 2 A. s S Démonstration : Pour un graphe orienté G = (S, A), chaque arc a un successeur et un prédécesseur d ou la première égalité. Pour obtenir la deuxième égalité, il suffit d orienté le graphe non-orienté et remarquer que pour chaque sommet d(s) = d + (s) + d (s). Une conséquence directe de ce théorème est que dans un graphe, le nombre de sommets dont le degré est impair est toujours pair. Corollaire I.2 Dans un graphe, le nombre de sommets dont le degré est impair est toujours pair.11 9 I.3. Différents modes de représentation d un graphe I.2.4 Construction de graphes à partir d un autre Soit G = (S, A) un graphe (orienté ou non). Un sous-graphe de G est un graphe G = (S, A ) tel que S S et A A. Un sous-graphe G = (S, A ) d un graphe G = (S, A) est un sous-graphe induit si A est formé de tous les arcs (ou arêtes) de G ayant leurs extrémités dans S (c est à dire s, s S, (s, s ) A si et seulement si (s, s ) A). Un sous-graphe G = (S, A ) d un graphe G = (S, A) est couvrant s il contient tous les sommets de G (c est à dire S = S). Exemple I.5. On considère un graphe G, un sous-graphe quelconque G 1, un sous-graphe induit G 2 et un sous-graphe couvrant G G G 1 G 2 G 3 I.3 Différents modes de représentation d un graphe Compte tenu de l essor des graphes en informatique, il est naturel de s intéresser aux différentes manières de les représenter. Différents modes de représentation peuvent être envisagées suivant la nature des traitements que l on souhaite appliquer aux graphes considérés. I.3.1 Représentation sagittale La représentation sagittale est la représentation sous forme d un dessin. Un même graphe peut avoir des représentations sagittales en apparence très différentes. I.3.2 Définition par propriété caractéristique Une même propriété caractérise les relation entre les différents sommets. Exemple I.6. On considère le graphe G = (S, A) avec S = {1, 2, 3, 4, 5, 6} et pour tout s, s S on a (s, s ) A s divise strictement s. Sa représentation sagittale est : I.3.3 Listes d adjacence Un graphe peut être représenté à l aide d un dictionnaire : il s agit d une table à simple entrée où chaque ligne correspond à un sommet et comporte la liste des successeurs (ou des prédécesseurs) de ce sommet.12 Chapitre I. DIFFÉRENTES NOTIONS DE GRAPHES 10 En pratique pour stocker un graphe orienté G = (S, A), on ordonne les sommets s 1,..., s n et le graphe G est représenté par deux listes d adjacences (LS, TS) définies par : LS : liste de longueur A appelé liste des successeurs, elle contient les successeurs du sommets s 1, puis ceux de s 2 jusqu à ceux de s n, si un sommet n a pas de successeur, on passe au sommet suivant. TS : liste de longueur S + 1 appelé liste des têtes successeurs qui indique la position du premier successeur de chaque sommet dans LS. La liste TS est définit comme suit : TS(1) = 1 ; pour s i S, si s i a un successeur alors TS(s i ) est le numéro de la case de LS du premier successeur de s i, sinon TS(s i ) = TS(s i+1 ) ; TS(n + 1) = A + 1 Exemple I.7. Pour décrire un graphe, il suffit de donner le dictionnaire des successeurs ou bien le dictionnaire des prédécesseurs La représentation sous forme de liste est : LS = (2, 1, 4, 3, 4) TS = (1, 2, 4, 6, 6) Sommets Successeurs ,4 3 3,4 4 Sommets Prédecesseurs ,3 I.3.4 Matrices d adjacence Soit G = (S, A) un graphe dont les sommets sont numérotés de 1 à n. La matrice d adjacence de G est la matrice carrée (m i,j ) (i,j) [1,n] 2 définie par m i,j = { k s il y a k arêtes allant de i à j 0 sinon Si le graphe n est pas orienté, la matrice est symétrique. Exemple I.8. Exemples de matrices d adjacence de graphes orientés : 1 2 M = Ö è 1 2 M = Ö è et de graphes non orientés associés : M = Ö è M = Ö è13 11 I.4. Quelques classes de graphe importantes I.3.5 Matrice d incidence La matrice d incidence d un graphe orienté G = (S, A) est une matrice à coefficients dans { 1, 0, 1} indicée par l ensemble S A tel que pour (i, j) S A on a m i,j = 1 si le sommet i est l extrémité de l arête j, m i,j = 1 si i est l origine de j, et 0 sinon. On remarque que, puisque chaque colonne correspond à une arête, il doit y avoir exactement un 1 et un 1 sur chaque colonne. I.3.6 Comparaison des différentes méthodes On s intéresse ici à l espace nécessaire pour stocker un graphe G = (S, A), les différentes méthodes ont leurs avantages et inconvénients. En voici un aperçu : Méthode de représentation Espace de stockage Autre avantage Liste des arcs 2 A Liste d adjacence S + A efficace pour stocker des graphes creux - efficace pour implémenter des algorithmes de parcours (section III.3) Matrice d adjacence S 2 - efficace pour stocker des graphes denses - donne des informations sur la longueur d un chemin (section II.1.2) Matrice d incidence S A - utiliser pour le calcule de circuit électique I.4 Quelques classes de graphe importantes On s intéresse ici à définir quelques classes de graphes non-orientés dont la plupart sont simple (non multi-arête et sans boucle). I.4.1 Graphes isolés Le graphe isolé d ordre n est un graphe à n sommets sans arête, on le note I n. I 3 I 4 I 5 I 6 I 7 I.4.2 Graphes cycliques Le graphe cyclique d ordre n est le graphe à n sommets S = {s 1,..., s n } tels que les arêtes sont A = {{s i, s i+1 } : i [1, n]} {{s n, s 1 }}, on le note C n.14 Chapitre I. DIFFÉRENTES NOTIONS DE GRAPHES 12 C 3 C 4 C 5 C 6 C 7 I.4.3 Graphes complets Le graphe complet d ordre n est le graphe simple à n sommets dont tous les sommets sont reliés deux à deux, on le note K n. K 3 K 4 K 5 K 6 K 7 I.4.4 Graphe biparti Un graphe est biparti s il existe une partition de son ensemble de sommets en deux sous-ensembles X et Y telle que chaque arête ait une extrémité dans X et l autre dans Y. On définit le graphe biparti complet entre un ensemble de n sommets et un ensemble à m sommets comme le graphe simple tel que chaque sommet du premier ensemble est relié à chaque sommet su deuxième ensemble. On le note K n,m. A B C K 3,3 I.4.5 Graphes planaires Un graphe non-orienté (pas forcément simple) est planaire s il admet une représentation sagittale dans un plan sans que les arêtes se croisent. Exemple I.9. K 4 est planaire puisque on peut le représenter de la façon suivante : K 4 Est ce que K 5 et K 3,3 sont planaires?15 13 I.4. Quelques classes de graphe importantes I.4.6 Arbres Définition I.3. Un arbre se définit de manière inductive par : le graphe formé par un sommet est un arbre ; si G = (S, A) est un arbre, alors pour s S et x un élément quelconque n appartenant pas à S, le graphe G = (S {x}, A {{x, s}}) est un arbre. Un exemple d arbre : Remarque I.1. A la section III on verra une définition équivalente liée à la connexité.16 Chapitre I. DIFFÉRENTES NOTIONS DE GRAPHES 1417 ChapitreII Problèmes de chemins dans un graphe II.1 II.1.1 Notion de chemin Définitions Définition II.1. Soit G = (S, A) un graphe orienté (resp. non-orienté). Un chemin (resp. une chaîne) dans G est une suite de sommets C = (s 0, s 1, s 2,..., s k ) telle qu il existe un arc (resp. une arête) entre chaque couple de sommets successifs de C. Ce qui s écrit : si G = (S, A) est orienté alors pour tout i [0, k 1] on a (s i, s i+1 ) A, si G = (S, A) est non-orienté alors pour tout i [0, k 1] on a {s i, s i+1 } A, On appellera : Chemin (resp. chaîne) simple : un chemin (resp. chaîne) dont tous les arcs (resp. arêtes) sont différents. Chemin (resp. chaîne) élémentaire : un chemin (resp. chaîne) dont tous les sommets sont différents sauf peut être le départ et l arrivée (pour autoriser les circuits ou cycles). Circuit dans un graphe orienté : un chemin simple finissant à son point de départ. Cycle dans un graphe non-orienté : une chaîne simple finissant à son point de départ. II.1.2 Longueur d un chemin Longueur du chemin (de la chaîne) : nombre d arcs (ou arêtes) du chemin. Distance entre deux sommets : longueur du plus petit chemin (chaîne) entre ces deux sommets. Diamètre d un graphe : plus grande distance entre deux sommets de ce graphe. Remarque II.1. Dans le cas d un graphe valué où l on associe un réel à chaque arcs (ou arêtes), la longueur d un chemin correspond à la somme des valeur de chaque arcs (ou arêtes) du chemin. Exemple II.1. On peut calculer le diamètre des graphes classiques : diamètre de K n : 1 ; diamètre de K n,m : 2 ; diamètre de C n : n 2.18 Chapitre II. PROBLÈMES DE CHEMINS DANS UN GRAPHE 16 II.1.3 Longueur d un chemin et matrice d adjacence On cherche a déterminer le nombre de chemins (resp. chaînes) de longueur n reliant deux sommets d un graphe G. On note M la matrice d adjacence de G. Proposition II.1 Soit G = (S, A) un graphe de matrice d adjacence M, le nombre de chemins (resp. chaînes) de longueur n reliant le sommets i au sommet j correspond au coefficient d indice (i, j) de la matrice M n. Démonstration : Initialisation : Les chemins (resp. chaînes) de longueur 1 qui joignent i à j correspondent au coefficient d indice (i, j) de la matrice d adjacence M. Induction : On suppose que le nombre de chemins (resp. chaînes) de longueur n qui joignent deux sommets quelconques i à j correspond au coefficient M(i,j) n. Soit i, j, k trois sommets, le nombre de chemins (resp. chaînes) de longueur n + 1 allant de i à j tels que le premier arc (resp. arête) soit (i, k) (resp. {i, k}) correspond au nombre de chemins (resp. chaînes) de longueur 1 allant de i à k fois le nombre de chemins (resp. chaînes) de longueur n allant de k à j, c est à dire M (i,k) Mk,j n. Ainsi le nombre de chemins (resp. chaînes) de longueur n + 1 qui joignent deux sommets i à j est : k S M (i,k) M n (k,j) = Mn+1 (i,j). On en déduit une méthode pour calculer la distance entre deux sommets ainsi que le diamètre d un graphe. Proposition II.2 Soit G = (S, A) un graphe de matrice d adjacence M. La distance entre deux sommets i et j est le plus petit n N tel que le coefficient d indice (i, j) de M n soit non nul. Le diamêtre de G est le plus petit n N tel que tous les coefficients de (M + Id) n soient non nul. Démonstration : Seul le deuxième point est non trivial. Cela vient du fait que n (M + Id) n = CnA r r. Exemple II.2. On cherche à compter le nombre de cycles de longueur k dans K n,n. Par exemple, pour n = 3 on a le graphe suivant : á ë A = Ç å Ç å n Si k est pair : A k k n = 0 n k 1 et si k est impair : A k k 1 = n k 1 0 Comme A k (i,j) correspond au nombre de chemin de i à j de longueur k, le nombre de cycles de longueur k est donc : { 2n 2n n Ai,i k = 2n k si k est pair = i=1 0 sinon. r=019 17 II.2. Connexité II.2 Connexité Définition II.2 (Connexité et forte connexité). Un graphe non-orienté est connexe si pour tout couple de sommets s et s, il existe une chaîne reliant s à s. Un graphe orienté est connexe si le graphe non orienté associé est connexe. Un graphe orienté est fortement connexe si pour tout couple de sommets s et s, il existe une chemin reliant s à s. Exemple II.3 (Graphe connexe et fortement connexe). G 1 est fortement connexe tandis que G 2 est connexe mais non fortement connexe. A B A B C C G 1 G 1 Définition II.3 (Composantes connexes et fortement connexes). Une composante connexe (resp. fortement connexe) C d un graphe G = (S, A) est un sous-ensemble maximal de sommets tels que deux quelconques d entre eux soient reliés par une chaîne (resp. un chemin). Formellement, si s C alors on a : pour tout s C il existe une chaîne (resp. un chemin) reliant s à s, pour tout s S \ C, il n existe pas de chaîne (resp. chemin) reliant s à s. Quelques propriétés : Les composantes connexes (resp. fortement connexe) d un graphe G = (S, A) forment une partition de S. Un graphe est connexe (resp. fortement connexe) si et seulement s il a une seule composante connexe (resp. fortement connexe). Le sous-graphe induit par une composante connexe (resp. fortement connexe) est connexe (resp. fortement connexe). La composante connexe C qui contient un sommet s S est C = {s Sil existe une chaîne reliant s à s } La composante fortement connexe C qui contient un sommet s S est C = {s Sil existe un chemin reliant s à s et un chemin reliant s à s} Exemple II.4 (Composantes connexes). Les composantes connexes de G 1 sont {A, C, E} et {B, D, F} tandis que celles de G 4 sont {1}, {2, 6}, {3, 5, 7} et {4}. C B D A 1 5 E F 6 7 G 1 G 2 20 Chapitre II. PROBLÈMES DE CHEMINS DANS UN GRAPHE 18 Exemple II.5 (Composantes fortement connexes). Les composantes fortement connexes de G 1 sont {A, B} et {C} tandis que celles de G 2 sont {1, 7}, {2, 3, 5, 6} et {4}. A B C G 1 G 2 II.3 II.3.1 Chemin Eulérien et Hamiltoniens Chemin Eulérien Problématique Au XVIII ème siècle un casse-tête est populaire chez les habitants de Königsberg : est-il possible de se promener dans la ville en ne passant qu une seule fois par chacun des sept ponts de Königsberg? C est le célèbre mathématicien Euler qui montre le premier que ce problème n a pas de solution, en utilisant pour la première fois la notion de graphe. Le problème se reformule ainsi en terme de graphes : existe-t-il un cycle qui passe exactement une fois par toutes les arêtes dans le graphe (multi-arête) ci-dessous? Ville de Königsberg G Définition II.4. Soit G un graphe non orienté. Une chaîne (resp. un cycle) eulérienne est une chaîne (resp. un cycle) qui passe une et une seule fois par toutes les arêtes de G. On définit les mêmes notions pour un graphe orienté G : un chemin (resp. un circuit eulérien) est un chemin (resp. un circuit) passant une et une seule fois par tous les arcs de G. Exemple II.6. Le graphe G 1 admet un cycle eulérien. Le graphe G 2 admet un chemin eulérien mais pas un circuit. G 1 G 221 19 II.3. Chemin Eulérien et Hamiltoniens Caractérisation des chemins eulériens Avant de prouver la caractérisation des chemin eulériens, on a besoin du résultat suivant. Proposition II.3 Un graphe dont tous les sommets sont de degré supérieur ou égal à 2 possède au moins un cycle. Démonstration : La preuve utilise un algorithme de marquage. Initialement tous les sommets sont non marqués. Un sommet s 1 est marqué arbitrairement. L algorithme construit alors une séquence s 1,..., s k de sommets marqués en choisissant arbitrairement pour s i+1 un sommet non marqué adjacent à s i. L algorithme s arrête lorsque s k ne possède plus de voisin non marqué. Puisque ce sommet est de degré au moins 2, il possède un voisin s j = s k 1 dans la séquence, j < k 1. On en déduit que (s k, s j, s j+1,..., s k 1, s k ) est un cycle. Théorème II.4 Soit G = (S, A) un graphe non orienté connexe. Il admet un cycle eulérien si et seulement si d(s) est pair pour tout s S. Si seulement deux sommets ne vérifient pas les conditions précédentes alors G admet une chaîne Eulériene. Démonstration : Soit G = (S, A) un graphe connexe. Pour qu il admette un cycle Eulérien il faut qu en chaque sommet lorsqu on arrive par une arête on puisse repartir par un autre arête. On obtient donc que d(s) est pair si le graphe est orienté pour chaque sommet s S. Réciproquement, on démontre par récurrence sur le nombre d arcs que pour un graphe connexe G, si chaque sommet s S est de degré pair alors G admet un cycle eulérien. Initialisation : Si A = 0, on a un graphe connexe sans arêtes, c est à dire un seul sommet isolé qui admet un cycle eulérien. Induction : On suppose que le théorème est vrai pour tout graphe ayant un nombre d arêtes inférieur ou égal à n (hypothèse de récurrence forte). Soit G = (S, A) un graphe connexe tel que A = n + 1 et pour chaque sommet s S est de degré pair. Comme le graphe est connexe et que le degré de chaque sommet est pair, on en déduit que G admet un cycle élémentaire C = (s 1, s 2,..., s k, s 1 ). Soit G le sous-graphe de G auquel on a supprimé les arêtes de C. Le graphe G n est pas forcément connexe mais vérifie d(s) pairs pour chacun de ses sommet s. On applique l hypothèse de récurrence sur chacune de ses composantes qui admettent donc des cycles eulériens. On combine alors ces différents cycles eulériens avec le cycle C, pour former un cycle eulérien sur G de la façon suivante : on parcourt C depuis un sommet initial arbitraire et, à chaque fois que l on rencontre une des composantes connexes de G pour la première fois, on insère le cycle eulérien considéré sur cette composante. S agissant d un cycle, on est assuré de pouvoir poursuivre le parcours de C après ce détour. Il est facile de vérifier qu on a ainsi bien construit un cycle eulérien sur G. Si G admet une chaîne Eulérienne et admet un sommet de degré impair, soit c est le point de départ de la chaîne, soit il arrive un moment où l on ne pourra plus repartir ce qui constitue le sommet terminal de la chaîne. Ainsi, si seulement deux sommets sont de degré impair il peuvent servir de point de départ et d arrivé d un chemin passant par tous les arêtes du graphe, le graphe peut donc admettre une chaîne Eulérienne. Dans le cas orienté on montre de manière similaire le résultat suivant. Théorème II.5 Soit G = (S, A) un graphe orienté fortement connexe. Il admet un circuit eulérien si et seulement si d + (s) = d (s) pour tout s S.22 Chapitre II. PROBLÈMES DE CHEMINS DANS UN GRAPHE 20 Si seulement deux sommets vérifient d + (s) d (s) = 1 alors G admet un chemin Eulérien. II.3.2 Chemins hamiltonien Définition II.5. Soit G un graphe non orienté. Un cycle (respectivement une chaîne) hamiltonien est un cycle (resp. une chaîne) qui passe une et une seule fois par tous les sommets de G. On définit les mêmes notions pour un graphe orienté G : un circuit ou un chemin hamiltonien est un circuit ou un chemin passant une et une seule fois par tous les sommets de G Exemple II.7. G 1 admet un circuit hamiltonien, G 2 n admet ni chaîne ni cycle hamiltoniens, G 3 admet une chaîne hamiltonienne mais pas de cycles hamiltoniens et G 4 admet un cycle hamiltonien. G 1 G 2 G 3 G 4 On ne connaît pas de condition nécessaire et suffisante exploitable dans la pratique pour décider si un graphe est hamiltonien ou non. De manière générale, la recherche de cycle, chaîne, circuit ou chemin Hamiltonien est un problème algorithmiquement difficile. En fait, on peut montrer que c est un problème NP-complet. II.4 Deux mots sur le Page-rank To do:23 ChapitreIII Graphes acycliques ou sans-circuits III.1 III.1.1 Notion d arbres Nombre d arêtes d un graphe acyclique Proposition III.1 Un graphe connexe d ordre n comporte au moins n 1 arêtes. Démonstration : On montre le résultat récurrence sur l ordre du graphe n. Initialisation : Le résultat est évident pour n = 1 et n = 2. Induction : Supposons la propriété prouvée sur les graphes connexes d ordre n. Soit G = (S, A) un graphe connexe à n + 1 sommets. La connexité assure que chaque sommet est de degré au moins 1. On a alors deux cas : si chaque sommet est de degré au moins 2, alors le lemme de la poignée de main conduit à 2 A = s S d(s) 2n donc A n ; s il existe un sommet s de degré 1 alors, le graphe induit G obtenu en éliminant s et l arête dont il est l extrémité, est un graphe connexe de n sommets qui possède exactement une arête de moins que G. D après l hypothèse de récurrence, G possède donc au moins n 1 arêtes, d où G en possède au moins n. Proposition III.2 Un graphe dont tous les sommets sont de degré supérieur ou égal à 2 possède un cycle. En particulier, un graphe acyclique admet un sommet de degré 0 ou 1. Démonstration : La preuve utilise un algorithme de marquage. Initialement tous les sommets sont non marqués. Un sommet s 1 est marqué arbitrairement. L algorithme construit alors une séquence s 1,..., s k de sommets marqués en choisissant arbitrairement pour s i+1 un sommet non marqué adjacent à s i. L algorithme s arrête lorsque s k ne possède plus de voisin non marqué. Puisque ce sommet est de degré au moins 2, il possède un voisin s j = s k 1 dans la séquence, j < k 1. On en déduit que (s k, s j, s j+1,..., s k 1, s k ) est un cycle. Nous pouvons lier cette fois l absence de cycle dans un graphe avec le nombre d arêtes. Proposition III.3 Un graphe acyclique à n sommets possède au plus n 1 arêtes.24 Chapitre III. GRAPHES ACYCLIQUES OU SANS-CIRCUITS 22 Démonstration : On va montrer cette propriété par récurrence sur le nombre de sommets du graphe G = (S, A). Initialisation : Si G est d ordre 1, comme G est acyclique il n y a pas de boucle, il ne possède donc aucune arête et la propriété est vérifiée. Induction : Supposons la propriété vrai au rang n et montrons la au rang n + 1. Comme G est acyclique, par la propriété III.2, il existe un sommet s de degré 0 ou 1. Considérons le graphe induit G par les sommets S \ {s}. Ce graphe est acyclique et possède n sommets, par hypothèse d induction G a au plus n 1 arêtes. On en déduit que G a au plus n arêtes car d(s) 1. III.1.2 Arbres et forêts Définition III.1. Un arbre est un graphe non orienté, connexe, sans cycle. Une forêt est un graphe non orienté sans cycle (chacune de ses composantes connexes est un arbre). Les sommets de degré 1 ou 0 sont appelés feuilles, les autres sommets sont appelés noeuds. Théorème III.4 Soit G un graphe non orienté à n sommets. Les propositions suivantes sont équivalentes : G est connexe sans cycle ; G est connexe et a n 1 arêtes ; G est connexe et la suppression de n importe quelle arête le déconnecte ; G est sans cycle et a n 1 arêtes ; G est sans cycle et l ajout de n importe quel arête crée un cycle ; entre toute paire de sommets de G il existe une unique chaîne élémentaire ; G est défini de manière inductive comme à la définition I.3. Théorème III.5 Tout graphe connexe peut s obtenir par ajout d un certain nombre d arêtes à un arbre ayant le même nombre de sommets. Démonstration : On raisonne par récurrence sur le nombre n de cycles élémentaires du graphe. Initialisation : Si n = 0, le graphe est connexe et sans cycle, c est donc un sommet isolé, il s agit donc d un arbre. Induction : Supposons que le résultat soit établi pour tout graphe connexe n ayant pas plus de n cycles élémentaires. Soit G un graphe connexe avec n + 1 cycles élémentaires. On considère alors le sous-graphe G obtenu en enlevant uniquement une arête (s 1, s 2 ) qui appartient à un cycle (s 1, s 2,..., s k ). Il est clair qu ainsi on brise au moins un cycle élémentaire parmi ceux de G. De plus, tous les cycles de G sont des cycles de G, donc G possède au plus n cycles élémentaires (peut-être en a-t-on brisé plus d un). De plus, le graphe G est encore connexe, puisque si l on veut passer de s 1 à s 2, il suffit de faire le tour via le chemin (s 2, s 3,..., s k, s 1 ). D après l hypothèse de récurrence, on sait que G peut-être obtenu à partir d un arbre T par ajout d un certain nombre d arêtes. Il suffit alors d ajouter l arête (s 1, s 2 ) pour retrouver G, ce qui achève la démonstration.25 23 III.1. Notion d arbres III.1.3 Arbres orientés Les arbres utilisés en algorithmique ont le plus souvent une orientation et un sommet qui joue un rôle particulier, la racine : c est ce type d arbre que l on va voir maintenant. Définition III.2. Un graphe non orienté est un arbre enraciné s il est connexe sans cycle et si un sommet particulier a été distingué, on l appellera la racine. Un arbre enraciné est souvent muni d une orientation naturelle : on oriente chaque arête de telle sorte qu il existe un chemin de la racine à tout autre sommet. Le graphe orienté résultant est aussi appelé arbre orienté. Proposition III.6 Un graphe orienté est un arbre enraciné si et seulement si il est connexe, il a un unique sommet sans prédécesseur (la racine), et tous ses autres sommets ont exactement un prédécesseur. Remarque III.1. Un graphe orienté sans circuit n est pas forcément un arbre orienté. On appellera : racine de l arbre : le sommet qui n a pas de prédécesseur feuilles de l arbre : les sommets qui n ont pas de successeur ; nœuds de l arbre : tous les autres sommets ; branche de l arbre : tout chemin de la racine vers une feuille, descendant de s : les successeurs de s, ascendant de s : le prédécesseur de s. Lorsque chaque sommet a au plus 2 successeurs on parle aussi d arbre binaire. Proposition III.7 Un arbre à n sommets peut être défini par une liste de n éléments, appelé liste des prédécesseurs, qui contient le prédécesseur de chaque sommet (ou pour la racine de l arbre) : pour tout s S on pose Pred(s) = { si s est la racine de l arbre s si (s, s) Ainsi stocker un arbre n est pas trop gourmand d un point de vu informatique. Exemple III.1. La liste Pred = [, 1, 1, 2, 3, 2, 3, 5, 3, 6, 4, 4, 7, 8, 14, 10] représente l arbre suivant : r(s)26 Chapitre III. GRAPHES ACYCLIQUES OU SANS-CIRCUITS 24 Le sommet 1 est la racine, les sommets 9, 11, 12, 13, 15 et 16 sont les feuilles, une branche de l arbre est (1, 3, 5, 8, 14, 15). III.1.4 Notion de rang dans un graphe orienté sans circuit Théorème III.8 Un graphe orienté G est sans circuit si et seulement si on peut attribuer à chaque sommet s un nombre r(s), appelé le rang de s, tel que pour tout arc (s, t) de G on ait r(s) < r(t). Démonstration : Si G = (S, A) comporte un circuit C, il n est pas possible de trouver une telle fonction r : S R. Sinon, il existe t S tel que r(t) = max{r(s) : s C} et en considérant l arc (t, u) C, on aurait r(t) r(u) ce qui est en contradiction avec la définition du rang. Réciproquement, si G n a pas de circuit, il existe au moins un sommet sans prédécesseur dans G (sans cela, en remontant successivement d un sommet à un prédécesseur, on finirait par fermer un circuit). Ainsi, on peut attribuer séquentiellement des valeurs aux sommets du graphe à l aide de l algorithme 1, ce qui conclura la démonstration. Algorithm 1: Algorithme de calcul du rang Data: Un graphe orienté sans circuit G = (S, A) Result: Une fonction rang r : S N de G rang 0; X S; R ensemble des sommets de X sans prédécesseur dans X ; while X = do r(v) rang pour tout sommet v R; X X \ R; R les sommets sans prédécesseur du graphe induit par les sommets X ; r r + 1; III.2 III.2.1 Initiation à la théorie des jeux Jeux combinatoires Voici un jeu simple qui se joue à deux, sur un graphe orienté : On place un pion sur un sommet du graphe. A tour de rôle, chaque joueur doit déplacer le pion en suivant un arc du graphe. Le premier joueur qui ne peut pas déplacer le pion a perdu. On cherche à savoir s il existe une stratégie gagnante pour l un des joueurs, c est à dire s il existe une méthode qui permet de le faire gagner quel que soit les coups réalisé par l adversaire. Ce jeu simple permet en fait de modéliser toute une classe de jeux : les jeux combinatoires à deux joueurs et à information complète. Par combinatoire on entend de réflexion, c est-à-dire que ce n est pas un jeu d habileté (type fléchettes) et sans hasard (ce qui exclut27 25 III.2. Initiation à la théorie des jeux quasiment tous les jeux de cartes ou de dés). A deux joueurs signifie que les deux joueurs jouent à tour de rôle (ce qui exclut des jeux type pierre-feuille-ciseau). A information complète signifie que à tous moments les joueurs ont accès à l état exact du jeu, il n y a pas d éléments cachés. Cette classe de jeux comprend par exemple les échecs, les dames, le jeu de go, othello, puissance 4, morpion, tic-tac-toe, jeu de petits carreaux... III.2.2 Modélisation Etant donné un jeu combinatoire à information parfaite à deux joueurs, on lui associe un graphe orienté de la façon suivante (on laisse de côté la possibilité de parties nulles) : l ensemble des sommets est l ensemble des états possibles du jeu, deux sommets sont reliés par un arc s il existe un coup amenant de la première position à la deuxième. Il existe des parties qui ne se termine jamais si et seulement si le graphe admet un cycle. C est pour cela que certain jeux comme le go ou les échecs interdisent de se retrouver plusieurs fois dans la même situation. Si le jeu admet des parties nulles, on peut modifier le problème en considérant que le joueur ne doit pas perdre. Remarque III.2. Si on joue à qui perd gagne à un jeu combinatoire à information parfaite à deux joueurs, alors on peut se ramener à un jeu combinatoire à information parfaite. III.2.3 Noyau d un graphe On cherche un ensemble N tel que quel que soit le coup de l adversaire, on peut toujours se ramener à un sommet de N. Définition III.3. Soit G = (S, A) un graphe orienté, on dit que N S est un noyau de G s il vérifie : pour tout s N les successeurs de s ne sont pas dans N (on dit que N est stable), pour tout s S \ N alors s admet un successeur dans N (on dit que N est absorbant). Exemple III.2. On a les exemples suivants de noyaux : A A A B C B C B C D B A D D E F D E C E Noyau : {B, D, E} Noyau : {A, D, E, F} Noyau : {A, C} et aussi {B, D} Pas de noyau Un graphe ne possède pas nécessairement de noyau. En général c est un problème difficile (NP-complet) de décider si un graphe donné admet un noyau. Par contre dans le cas des graphes sans circuits, on a le résultat suivant : Théorème III.9 Tout joueur dont la position initiale n est pas dans le noyau a une stratégie non perdante.28 Chapitre III. GRAPHES ACYCLIQUES OU SANS-CIRCUITS 26 Démonstration : On montre qu un joueur qui peut choisir s dans le noyau ne peut pas perdre. Si s n a pas de successeur, l adversaire ne peut plus jouer, il a perdu. Sinon, l adversaire va choisir un sommet s dans les successeurs de s. On a s S \ N donc s admet au moins un successeur dans N. Théorème III.10 Un graphe orienté sans circuit possède un unique noyau. Démonstration : On remarque que tout graphe sans circuit admet un puits et que tous les puits doivent appartenir au noyau. On va raisonner par récurrence sur le nombre n de sommets. Initialisation : Si n = 1, l unique sommet est un puits et donc le seul élément du noyau. Induction : Soit s un puits du graphe G sans circuit. Notons P(s) l ensemble des prédecesseurs de s. Par hypothèse de récurrence, le graphe G privé du sommet s et de ceux de P(s) a un noyau unique N. On en déduit que N {s} est l unique noyau de G. Remarque III.3. Il est facile d adapter l énoncé pour prendre en compte les nulles : un des deux joueurs a une stratégie non-perdante. Remarque III.4. Le graphe d un jeu est en général tellement énorme qu il est impossible de déterminer une stratégie gagnante (et heureusement). Un jeu est résolu quand une stratégie gagnante a été déterminée (exemple de jeu résolu : puissance 4). III.2.4 Exemples de jeux Chomp Principe du jeu Chomp est joué avec une tablette de chocolat, c est-à-dire un rectangle composé de blocs carrés. Les joueurs choisissent un carré à tour de rôle, et le mange, ainsi que tous les carrés situés à sa droite ou plus bas. Le carré en haut à gauche est empoisonné et celui qui le mange perd la partie. Voici un exemple de partie à partir d une tablette de taille 3x5 : Initialement A joue B joue A joue B joue A a perdu Stratégie gagnante Comme le graphe associé est sans cycle, on sait qu un des deux joueurs a une stratégie gagnante. Par un argument de vol de stratégie, on peut montrer que le joueur 1 a une stratégie gagnante. En effet, supposons que le joueur 2 possède une stratégie gagnante contre tous les premiers coups possibles du premier joueur. Supposons ensuite que le joueur 1 effectue son premier coup en mangeant le carré en bas à droite. Le joueur 2 répond avec sa stratégie gagnante en mangeant un certain carré (n, m). Mais dans ce cas, le joueur 1 aurait pu lui-même jouer le coup (n, m) dès le début, et appliquer ensuite lui-même la stratégie gagnante. Ceci prouve que le deuxième joueur ne peut pas posséder de stratégie gagnante. On parle de preuve par vol de stratégie parce que le deuxième joueur se fait voler toute stratégie potentielle possible par le premier. Cependant à part une exploration informatique, on ne connait pas la stratégie gagnante.29 27 III.2. Initiation à la théorie des jeux Jeux de Nim Les jeux de Nim sont des jeux très courants. Chaque jeu se joue à deux au tour par tour. Il s agit en général de déplacer ou de prendre des objets selon des règles qui indiquent comment passer d une position du jeu à une autre, en empêchant la répétition cyclique des mêmes positions. Le nombre de positions est fini et la partie se termine nécessairement, le joueur ne pouvant plus jouer étant le perdant (ou selon certaines variantes, le gagnant). Le jeu de Nim trivial ou (jeu de Nim à un seul tas) Ce est constitué d un seul tas de n allumettes, chaque joueur prenant le nombre d allumettes qu il veut. Celui qui ne peut plus prendre à perdu. La stratégie gagnante consiste évidemment à prendre toutes les allumettes. Le graphe associé est S = {0,..., n} et A = {(x, y) S 2 : y < x} le noyau est réduit à {0}. Le jeu de Nim un peu moins trivial (Fort Boyaux) Il consiste à prendre entre 1 et m allumette dans un tas de n allumettes. Celui qui ne peut plus prendre d allumette a perdu. Le deuxième joueur gagne si et seulement si m + 1 divise n. Le graphe associé est S = {0,..., n} et A = {(x, y) S 2 : x m y < x} le noyau est réduit à (m + 1)N S. On en déduit que le joueur 1 a une stratégie gagnante si n / (m + 1)N. Le jeu de Nim un peu moins trivial inversé C est le qui perd gagne du jeu précédent. Ainsi celui qui prend la dernière allumette a perdu. Le graphe associé est S = {1,..., n} et A = {(x, y) S 2 : x m y < x} le noyau est réduit à (m + 1)N + 1 S. On en déduit que le joueur 1 a une stratégie gagnante si n 1 / (m + 1)N. Jeu de Nim classique ou jeu de Marienbad C est les mêmes règles que précédemment mais avec plusieurs tas et à chaque coup, on ne peut prendre des allumette que dans un seul tas. Jeu de Grundy Le jeu de Grundy se joue en séparant l un des tas en deux tas de taille distincte, jusqu à ce qu il ne reste que des tas à un objet. Jeu de Wythoff Le jeu de Wythoff se joue à deux tas. Chaque joueur réduit d un même nombre d objets les deux tas à la fois, ou bien réduit un seul tas du nombre d objets qu il veut. Sprouts Principe du jeu Sprouts (germe en anglais) se joue à deux joueurs avec un stylo et une feuille de papier. Au départ, il y a n points sur la feuille. Chaque joueur, à tour de rôle, relie deux points existants par une ligne et ajoute un nouveau point sur cette ligne de telle sorte que : les lignes ne peuvent se croiser (le graphe doit rester planaire), un point ne peut pas être relié à plus de trois lignes (le degré maximal des sommets est 3).30 Chapitre III. GRAPHES ACYCLIQUES OU SANS-CIRCUITS 28 Celui qui ne peut plus jouer sans enfreindre les deux contraintes a perdu. Il existe également une version misère, où celui qui ne peut plus jouer est cette fois le gagnant. Le nombre de points tracés sur la feuille augmente à chaque coup, on peut donc se demander si la partie se termine en un nombre fini de coups. Proposition III.11 Toute partie de Sprout à partir de n sommets se termine en au plus 3n 1 coups. Démonstration : On appelle liberté d un sommet s le nombre 3 d(s). Etant donné une configuration de Sprout, lorsqu on on relie deux sommet on perd deux libertés correspondant aux sommets reliés et on rajoute une liberté correspondant au nouveau sommet. Ainsi, après avoir joué le nombre total de liberté a baissé de un. Le jeu s arrête nécessairement s il reste une seule liberté. Ainsi le nombre de coup correspond au plus au nombre de liberté initiale moins 1, c est à dire 3n 1. On peut aussi contrôler la durée d une partie et montrer qu une partie se termine au minimum en 2n coups. Stratégie gagnante Si n = 1, le joueur 1 est certain de perdre. En effet, il ne peut que faire une boucle sue le sommet et le joueur 2 relie les deux sommets. En partant de deux points, n = 2, l analyse du jeu est déjà moins évidente, mais on peut établir la liste de toutes les configurations et le joueur qui commence perdra toujours si son adversaire joue convenablement. On a établit des stratégie gagnante informatiquement pour des valeurs de n inférieure à 50, la conjecture actuelle étant qu avec n points au départ, le jeu sprout est gagnant pour le second joueur si n = 0, 1 ou 2 modulo 6 et il est gagnant pour le joueur 1 dans les autres cas. III.3 III.3.1 Parcours dans un graphe Notion générale Un parcours de graphe est un algorithme consistant à explorer les sommets de proche en proche à partir d un sommet initial. Dans cette section on considèrera que les graphes traités sont orientés. Les algorithmes fonctionnent pour le cas non-orienté en transformant chaque arête en deux arcs à double sens. Soit G = (S, A) un graphe et s S un sommet, un parcours du graphe G à partir de s est une visite de chaque sommet accessible depuis s. Un parcours peut être représenté par un sous-graphe de G qui est un arbre de racine s. Lors d un parcours de graphe, on doit marquer les sommets visités pour ne pas les traiter plusieurs fois. Lorsqu on marque un sommet on réalise le traitement de ce sommet, le moment où l on réalise ce marquage peut donner des parcours différents. D un point de vue algorithmique, un parcours correspond à la procédure suivante. Il reste à préciser dans quel ordre on prend les sommets de L. On définira alors le parcours en largeur et le parcours en profondeur.31 29 III.3. Parcours dans un graphe Algorithm 2: Algorithme de parcours Data: Un graphe orienté G = (S, A) et un sommet s L Liste des sommets à traiter (vide au départ); Mettre s dans L (Début traitement de s); while L = do sortir x le premier sommet de L (x en cours de traitement); for y voisin non marqué de x do P(y) x; Mettre y dans L (Début traitement de y); Fin du traitement de x; III.3.2 Parcours en largeur A partir d un sommet s, un parcours en largeur traite d abord les voisins de s pour ensuite les explorer un par un. Ce mode de fonctionnement utilise donc une file dans laquelle on ajoute les voisins non encore explorés par le bas (enfiler) et on retire les sommets à traiter par le haut (défiler). Si on veut récupérer la liste des prédécesseurs P qui permet de retrouver l arbre de parcours en largeur depuis le sommet s on utilise l algorithme suivant : Algorithm 3: Algorithme de parcours en largeur Data: Un graphe orienté G = (S, A) et un sommet s L = File des sommets à traiter (vide au départ); P = Liste de taille S où toutes les valeurs sont affectées de (liste des prédécesseurs dans l arbre de parcours); Marquer le sommet s et l enfiler dans L; while L = do défiler x le premier sommet de L; for y voisin non marqué de x do Marquer y; P(y) x; enfiler y dans L; Remarque III.5. La liste L des sommets à traiter est l exemple type d une Pile de type FIFO (First In, First Out) : on ajoute les éléments par le bas de la file, on retire les éléments par le haut de la file. Le parcours en largeur explore tous les sommets accessibles depuis le sommet initial. Il permet de calculer les composantes connexes du graphe avec une complexité linéaire. De plus, lors de ce parcours, les sommets sont explorés par distance croissante au sommet de départ. Grâce à cette propriété, on peut utiliser l algorithme pour résoudre  Montrer encore











                                        



Documents pareils



















                2018 © DocPlayer.fr Politique de confidentialité | Conditions de service | Feed-back















            var pixel_image_src = '/pix/'+Math.random()+'/report/pixel.gif?type=pageview&domain_id=29&page_id=0&design_id=0&l='+encodeURIComponent(navigator.language)+'&p='+encodeURIComponent(navigator.platform)+'&url='+encodeURIComponent(document.location);
            document.write('<img src="'+pixel_image_src+'"> ');
        }());
    


    To make this website work, we log user data and share it with processors. To use this website, you must agree to our Privacy Policy, including cookie policy.
        I agree.    


    
        var fcb = document.getElementById('footer_height_for_cookie_msg');
        if (fcb) { fcb.parentElement.removeChild(fcb); }
    }
    
    })();



